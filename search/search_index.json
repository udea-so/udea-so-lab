{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ISE Engineering Fundamentals Playbook","text":"<p>An engineer working for a ISE project...</p> <ul> <li>Has responsibilities to their team \u2013 mentor, coach, and lead.</li> <li>Knows their playbook. Follows their playbook. Fixes their playbook if it is broken. If they find a better playbook, they copy it. If somebody could use their playbook, they share it.</li> <li>Leads by example. Models the behaviors we desire both interpersonally and technically.</li> <li>Strives to understand how their work fits into a broader context and ensures the outcome.</li> </ul> <p>This is our playbook. All contributions are welcome! Please feel free to submit a pull request to get involved.</p>"},{"location":"#why-have-a-playbook","title":"Why Have a Playbook","text":"<ul> <li>To increase overall efficiency for team members and the whole team in general.</li> <li>To reduce the number of mistakes and avoid common pitfalls.</li> <li>To strive to be better engineers and learn from other people's shared experience.</li> </ul> <p>If you do nothing else follow the Engineering Fundamentals Checklist!</p> <p>The first week of an ISE project is a breakdown of the sections of the playbook according to the structure of an Agile sprint.</p>"},{"location":"#general-guidance","title":"General Guidance","text":"<ul> <li>Keep the code quality bar high.</li> <li>Value quality and precision over \u2018getting things done\u2019.</li> <li>Work diligently on the one important thing.</li> <li>As a distributed team take time to share context via wiki, teams and backlog items.</li> <li>Make the simple thing work now. Build fewer features today, but ensure they work amazingly. Then add more features tomorrow.</li> <li>Avoid adding scope to a backlog item, instead add a new backlog item.</li> <li>Our goal is to ship incremental customer value.</li> <li>Keep backlog item details up to date to communicate the state of things with the rest of your team.</li> <li>Report product issues found and provide clear and repeatable engineering feedback!</li> <li>We all own our code and each one of us has an obligation to make all parts of the solution great.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING.md for contribution guidelines.</p>"},{"location":"ISE/","title":"Who is ISE (Industry Solutions Engineering)","text":"<p>Our team, ISE (Industry Solutions Engineering), works side-by-side with customers to help them tackle their toughest technical problems both in the cloud and on the edge. We meet customers where they are, work in the languages they use, with the open source frameworks they use, and on the operating systems they use. We work with enterprises and start-ups across many industries from financial services to manufacturing. Our work covers a broad spectrum of domains including IoT, machine learning, and high scale compute. Our \"superpower\" is that we work closely with both our customers\u2019 engineering teams and Microsoft\u2019s product engineering teams, developing real-world expertise that we can use to help our customers grow their business and help Microsoft improve our products and services.</p> <p>We are very community focused in our work, with one foot in Microsoft and one foot in the open source communities that we help. We make pull requests on open source projects to add support for Microsoft platforms and/or improve existing implementations. We build frameworks and other tools to make it easier for developers to use Microsoft platforms. We source all the ideas for this work by maintaining very deep connections with these communities and the customers and partners that use them.</p> <p>If you like variety, coding in many languages, using any available tech across our industry, digging in with our customers, hack fests, occasional travel, and telling the story of what you\u2019ve done in blog posts and at conferences, then come talk to us.</p> <p>You can check out some of our work on our Developer Blog</p>"},{"location":"engineering-fundamentals-checklist/","title":"Engineering Fundamentals Checklist","text":"<p>This checklist helps to ensure that our projects meet our Engineering Fundamentals.</p>"},{"location":"engineering-fundamentals-checklist/#source-control","title":"Source Control","text":"<ul> <li> The default target branch is locked.</li> <li> Merges are done through PRs.</li> <li> PRs reference related work items.</li> <li> Commit history is consistent and commit messages are informative (what, why).</li> <li> Consistent branch naming conventions.</li> <li> Clear documentation of repository structure.</li> <li> Secrets are not part of the commit history or made public. (see Credential scanning)</li> <li> Public repositories follow the OSS guidelines, see <code>Required files in default branch for public repositories</code>.</li> </ul> <p>More details on source control</p>"},{"location":"engineering-fundamentals-checklist/#work-item-tracking","title":"Work Item Tracking","text":"<ul> <li> All items are tracked in AzDevOps (or similar).</li> <li> The board is organized (swim lanes, feature tags, technology tags).</li> </ul> <p>More details on backlog management</p>"},{"location":"engineering-fundamentals-checklist/#testing","title":"Testing","text":"<ul> <li> Unit tests cover the majority of all components (&gt;90% if possible).</li> <li> Integration tests run to test the solution e2e.</li> </ul> <p>More details on automated testing</p>"},{"location":"engineering-fundamentals-checklist/#cicd","title":"CI/CD","text":"<ul> <li> Project runs CI with automated build and test on each PR.</li> <li> Project uses CD to manage deployments to a replica environment before PRs are merged.</li> <li> Main branch is always shippable.</li> </ul> <p>More details on continuous integration and continuous delivery</p>"},{"location":"engineering-fundamentals-checklist/#security","title":"Security","text":"<ul> <li> Access is only granted on an as-needed basis</li> <li> Secrets are stored in secured locations and not checked in to code</li> <li> Data is encrypted in transit (and if necessary at rest) and passwords are hashed</li> <li> Is the system split into logical segments with separation of concerns? This helps limiting security vulnerabilities.</li> </ul> <p>More details on security</p>"},{"location":"engineering-fundamentals-checklist/#observability","title":"Observability","text":"<ul> <li> Significant business and functional events are tracked and related metrics collected.</li> <li> Application faults and errors are logged.</li> <li> Health of the system is monitored.</li> <li> The client and server side observability data can be differentiated.</li> <li> Logging configuration can be modified without code changes (eg: verbose mode).</li> <li> Incoming tracing context is propagated to allow for production issue debugging purposes.</li> <li> GDPR compliance is ensured regarding PII (Personally Identifiable Information).</li> </ul> <p>More details on observability</p>"},{"location":"engineering-fundamentals-checklist/#agilescrum","title":"Agile/Scrum","text":"<ul> <li> Process Lead (fixed/rotating) runs the daily standup</li> <li> The agile process is clearly defined within team.</li> <li> The Dev Lead (+ PO/Others) are responsible for backlog management and refinement.</li> <li> A working agreement is established between team members and customer.</li> </ul> <p>More details on agile development</p>"},{"location":"engineering-fundamentals-checklist/#design-reviews","title":"Design Reviews","text":"<ul> <li> Process for conducting design reviews is included in the Working Agreement.</li> <li> Design reviews for each major component of the solution are carried out and documented, including alternatives.</li> <li> Stories and/or PRs link to the design document.</li> <li> Each user story includes a task for design review by default, which is assigned or removed during sprint planning.</li> <li> Project advisors are invited to design reviews or asked to give feedback to the design decisions captured in documentation.</li> <li> Discover all the reviews that the customer's processes require and plan for them.</li> <li> Clear non-functional requirements captured (see Non-Functional Requirements Guidance)</li> <li> Risks and opportunities captured (see Risk/Opportunity Management)</li> </ul> <p>More details on design reviews</p>"},{"location":"engineering-fundamentals-checklist/#code-reviews","title":"Code Reviews","text":"<ul> <li> There is a clear agreement in the team as to function of code reviews.</li> <li> The team has a code review checklist or established process.</li> <li> A minimum number of reviewers (usually 2) for a PR merge is enforced by policy.</li> <li> Linters/Code Analyzers, unit tests and successful builds for PR merges are set up.</li> <li> There is a process to enforce a quick review turnaround.</li> </ul> <p>More details on code reviews</p>"},{"location":"engineering-fundamentals-checklist/#retrospectives","title":"Retrospectives","text":"<ul> <li> Retrospectives are conducted each week/at the end of each sprint.</li> <li> The team identifies 1-3 proposed experiments to try each week/sprint to improve the process.</li> <li> Experiments have owners and are added to project backlog.</li> <li> The team conducts longer retrospective for Milestones and project completion.</li> </ul> <p>More details on retrospectives</p>"},{"location":"engineering-fundamentals-checklist/#engineering-feedback","title":"Engineering Feedback","text":"<ul> <li> The team submits feedback on business and technical blockers that prevent project success</li> <li> Suggestions for improvements are incorporated in the solution</li> <li> Feedback is detailed and repeatable</li> </ul> <p>More details on engineering feedback</p>"},{"location":"engineering-fundamentals-checklist/#developer-experience-devex","title":"Developer Experience (DevEx)","text":"<p>Developers on the team can:</p> <ul> <li> Build/Compile source to verify it is free of syntax errors and compiles.</li> <li> Execute all automated tests (unit, e2e, etc).</li> <li> Start/Launch end-to-end to simulate execution in a deployed environment.</li> <li> Attach a debugger to started solution or running automated tests, set breakpoints, step through code, and inspect variables.</li> <li> Automatically install dependencies by pressing F5 (or equivalent) in their IDE.</li> <li> Use local dev configuration values (i.e. .env, appsettings.development.json).</li> </ul> <p>More details on developer experience</p>"},{"location":"the-first-week-of-an-ise-project/","title":"The First Week of an ISE Project","text":"<p>The purpose of this document is to:</p> <ul> <li>Organize content in the playbook for quick reference and discoverability</li> <li>Provide content in a logical structure which reflects the engineering process</li> <li>Extensible hierarchy to allow teams to share deep subject-matter expertise</li> </ul>"},{"location":"the-first-week-of-an-ise-project/#before-starting-the-project","title":"Before Starting the Project","text":"<ul> <li> Discuss and start writing the Team Agreements. Update these documents with any process decisions made throughout the project<ul> <li>Working Agreement</li> <li>Definition of Ready</li> <li>Definition of Done</li> <li>Estimation</li> </ul> </li> <li> Set up the repository/repositories<ul> <li>Decide on repository structure/s</li> <li>Add README.md, LICENSE, CONTRIBUTING.md, .gitignore, etc</li> </ul> </li> <li> Build a Product Backlog<ul> <li>Set up a project in your chosen project management tool (ex. Azure DevOps)</li> <li>INVEST in good User Stories and Acceptance Criteria</li> <li>Non-Functional Requirements Guidance</li> </ul> </li> </ul>"},{"location":"the-first-week-of-an-ise-project/#day-1","title":"Day 1","text":"<ul> <li> Plan the first sprint<ul> <li>Agree on a sprint goal, and how to measure the sprint progress</li> <li>Determine team capacity</li> <li>Assign user stories to the sprint and split user stories into tasks</li> <li>Set up Work in Progress (WIP) limits</li> </ul> </li> <li> Decide on test frameworks and discuss test strategies<ul> <li>Discuss the purpose and goals of tests and how to measure test coverage</li> <li>Agree on how to separate unit tests from integration, load and smoke tests</li> <li>Design the first test cases</li> </ul> </li> <li> Decide on branch naming</li> <li> Discuss security needs and verify that secrets are kept out of source control</li> </ul>"},{"location":"the-first-week-of-an-ise-project/#day-2","title":"Day 2","text":"<ul> <li> Set up Source Control<ul> <li>Agree on best practices for commits</li> <li> Set up basic Continuous Integration with linters and automated tests</li> <li> Set up meetings for Daily Stand-ups and decide on a Process Lead</li> <li>Discuss purpose, goals, participants and facilitation guidance</li> <li>Discuss timing, and how to run an efficient stand-up</li> </ul> </li> <li> If the project has sub-teams, set up a Scrum of Scrums</li> </ul>"},{"location":"the-first-week-of-an-ise-project/#day-3","title":"Day 3","text":"<ul> <li> Agree on code style and on how to assign Pull Requests</li> <li> Set up Build Validation for Pull Requests (2 reviewers, linters, automated tests) and agree on Definition of Done</li> <li> Agree on a Code Merging strategy and update the CONTRIBUTING.md</li> <li> Agree on logging and observability frameworks and strategies</li> </ul>"},{"location":"the-first-week-of-an-ise-project/#day-4","title":"Day 4","text":"<ul> <li> Set up Continuous Deployment<ul> <li>Determine what environments are appropriate for this solution</li> <li>For each environment discuss purpose, when deployment should trigger, pre-deployment approvers, sing-off for promotion.</li> </ul> </li> <li> Decide on a versioning strategy</li> <li> Agree on how to Design a feature and conduct a Design Review</li> </ul>"},{"location":"the-first-week-of-an-ise-project/#day-5","title":"Day 5","text":"<ul> <li> Conduct a Sprint Demo</li> <li> Conduct a Retrospective<ul> <li>Determine required participants, how to capture input (tools) and outcome</li> <li>Set a timeline, and discuss facilitation, meeting structure etc.</li> </ul> </li> <li> Refine the Backlog<ul> <li>Determine required participants</li> <li>Update the Definition of Ready</li> <li>Update estimates, and the Estimation document</li> </ul> </li> <li> Submit Engineering Feedback for issues encountered</li> </ul>"},{"location":"CI-CD/","title":"Continuous Integration and Continuous Delivery","text":"<p>Continuous Integration (CI) is the engineering practice of frequently committing code in a shared repository, ideally several times a day, and performing an automated build on it. These changes are built with other simultaneous changes to the system, which enables early detection of integration issues between multiple developers working on a project. Build breaks due to integration failures are treated as the highest priority issue for all the developers on a team and generally work stops until they are fixed.</p> <p>Paired with an automated testing approach, continuous integration also allows us to also test the integrated build such that we can verify that not only does the code base still build correctly, but also is still functionally correct. This is also a best practice for building robust and flexible software systems.</p> <p>Continuous Delivery (CD) takes the Continuous Integration (CI) concept further to also test deployments of the integrated code base on a replica of the environment it will be ultimately deployed on. This enables us to learn early about any unforeseen operational issues that arise from our changes as quickly as possible and also learn about gaps in our test coverage.</p> <p>The goal of all of this is to ensure that the main branch is always shippable, meaning that we could, if we needed to, take a build from the main branch of our code base and ship it on production.</p> <p>If these concepts are unfamiliar to you, take a few minutes and read through Continuous Integration and Continuous Delivery.</p> <p>Our expectation is that CI/CD should be used in all the engineering projects that we do with our customers and that we are building, testing, and deploying each change we make to any software system that we are building.</p> <p>For a much deeper understanding of all of these concepts, the books Continuous Integration and Continuous Delivery provide a comprehensive background.</p>"},{"location":"CI-CD/#why-cicd","title":"Why CI/CD","text":"<ul> <li>We want to have an automated build and deployment of our software</li> <li>We want automated configuration of all components</li> <li>We want to be able to quickly re-build the environment from scratch in case of disaster</li> <li>We want the latest version of the code to always be deployed to our dev/test environments</li> <li>We want a reliable release strategy, where the policies for release are well understood by all</li> </ul>"},{"location":"CI-CD/#the-fundamentals","title":"The Fundamentals","text":"<ul> <li>We run a quality pipeline (with linting, unit tests etc.) on each PR/update of the main branch</li> <li>All cloud resources (including secrets and permissions) are provisioned through infrastructure as code templates \u2013 ex. Terraform, Bicep (ARM), Pulumi etc.</li> <li>All release candidates are deployed to a non-production environment through an automated process (ex Azure DevOps or Github pipelines)</li> <li>Releases are deployed to the production environment through an automated process</li> <li>Release rollbacks are carried out through a repeatable process</li> <li>Our release pipeline runs automated tests, validating all release candidate artifact(s) end-to-end against a non-production environment</li> </ul>"},{"location":"CI-CD/#tools","title":"Tools","text":""},{"location":"CI-CD/#azure-pipelines","title":"Azure Pipelines","text":"<p>Our tooling at Microsoft has made setting up integration and delivery systems like this easy. If you are unfamiliar with it, take a few moments now to read through Azure Pipelines (Previously VSTS) and for a practical walkthrough of how this works in practice, one example you can read through is CI/CD on Kubernetes with VSTS.</p>"},{"location":"CI-CD/#jenkins","title":"Jenkins","text":"<p>Jenkins is one of the most commonly used tools across the open source community. It is well-known with hundreds of plugins for every build requirement. Jenkins is free but requires a dedicated server. You can easily create a Jenkins VM using this template</p>"},{"location":"CI-CD/#travisci","title":"TravisCI","text":"<p>Travis CI can be used for open source projects at no cost but developers must purchase an enterprise plan for private projects. This service is ideal for validation of PR's on GitHub because it is lightweight and easy to set up with no need for dedicated server setup. It also supports a Build matrix feature which allows accelerating the build and testing process by breaking them into parts.</p>"},{"location":"CI-CD/#circleci","title":"CircleCI","text":"<p>CircleCI is a free service for open source projects with no dedicated server required. It is also ideal for validation of PR's on GitHub. CircleCI also allows workflows, parallelism and splitting your tests across any number of containers with a wide array of packages pre-installed on the build containers.</p>"},{"location":"CI-CD/#appveyor","title":"AppVeyor","text":"<p>AppVeyor is another free CI service for open source projects which also supports Windows-based builds.</p>"},{"location":"CI-CD/continuous-delivery/","title":"Continuous Delivery","text":"<p>The inspiration behind continuous delivery is constantly delivering valuable software to users and developers more frequently. Applying the principles and practices laid out in this readme will help you reduce risk, eliminate manual operations and increase quality and confidence.</p> <p>Deploying software involves the following principles:</p> <ol> <li>Provision and manage the cloud environment runtime for your application (cloud resources, infrastructure, hardware, services, etc).</li> <li>Install the target application version across your cloud environments.</li> <li>Configure your application, including any required data.</li> </ol> <p>A continuous delivery pipeline is an automated manifestation of your process to streamline these very principles in a consistent and repeatable manner.</p>"},{"location":"CI-CD/continuous-delivery/#goal","title":"Goal","text":"<ul> <li>Follow industry best practices for delivering software changes to customers and developers.</li> <li>Establish consistency for the guiding principles and best practices when assembling continuous delivery workflows.</li> </ul>"},{"location":"CI-CD/continuous-delivery/#general-guidance","title":"General Guidance","text":""},{"location":"CI-CD/continuous-delivery/#define-a-release-strategy","title":"Define a Release Strategy","text":"<p>It's important to establish a common understanding between the Dev Lead and application stakeholder(s) around the release strategy / design  during the planning phase of a project. This common understanding includes the deployment and maintenance of the application throughout its SDLC.</p>"},{"location":"CI-CD/continuous-delivery/#release-strategy-principles","title":"Release Strategy Principles","text":"<p>Continuous Delivery by Jez Humble, David Farley cover the key considerations to follow when creating a release strategy:</p> <ul> <li>Parties in charge of deployments to each environment, as well as in charge of the release.</li> <li>An asset and configuration management strategy.</li> <li>An enumeration of the environments available for acceptance, capacity, integration, and user acceptance testing, and the process by which builds will be moved through these environments.</li> <li>A description of the processes to be followed for deployment into testing and production environments, such as change requests to be opened and approvals that need to be granted.</li> <li>A discussion of the method by which the application\u2019s deploy-time and runtime configuration will be managed, and how this relates to the automated deployment process.</li> <li>_Description of the integration with any external systems. At what stage and how are they tested as part of a release? How does the technical operator communicate with the provider in the event of a problem?</li> <li>_A disaster recovery plan so that the application\u2019s state can be recovered following a disaster. Which steps will need to be in place to restart or redeploy the application should it fail.</li> <li>_Production sizing and capacity planning: How much data will your live application create? How many log files or databases will you need? How much bandwidth and disk space will you need? What latency are clients expecting?</li> <li>How the initial deployment to production works.</li> <li>How fixing defects and applying patches to the production environment will be handled.</li> <li>How upgrades to the production environment will be handled, including data migration. How will upgrades be carried out to the application without destroying its state.</li> </ul>"},{"location":"CI-CD/continuous-delivery/#application-release-and-environment-promotion","title":"Application Release and Environment Promotion","text":"<p>Your release manifestation process should take the deployable build artifact created from your commit stage and deploy them across all cloud environments, starting with your test environment.</p> <p>The test environment (often called Integration) acts as a gate to validate if your test suite completes successfully for all release candidates. This validation should always begin in a test environment while inspecting the deployed release integrated from the feature / release branch containing your code changes.</p> <p>Code changes released into the test environment typically targets the main branch (when doing trunk) or release branch (when doing gitflow).</p>"},{"location":"CI-CD/continuous-delivery/#the-first-deployment","title":"The First Deployment","text":"<p>The very first deployment of any application should be showcased to the customer in a production-like environment (UAT) to solicit feedback early. The UAT environment is used to obtain product owner sign-off acceptance to ultimately promote the release to production.</p>"},{"location":"CI-CD/continuous-delivery/#criteria-for-a-production-like-environment","title":"Criteria for a Production-Like Environment","text":"<ul> <li>Runs the same operating system as production.</li> <li>Has the same software installed as production.</li> <li>Is sized and configured the same way as production.</li> <li>Mirrors production's networking topology.</li> <li>Simulated production-like load tests are executed following a release to surface any latency or throughput degradation.</li> </ul>"},{"location":"CI-CD/continuous-delivery/#modeling-your-release-pipeline","title":"Modeling Your Release Pipeline","text":"<p>It's critical to model your test and release process to establish a common understanding between the application engineers and customer stakeholders. Specifically aligning expectations for how many cloud environments need to be pre-provisioned as well as defining sign-off gate roles and responsibilities.</p> <p></p>"},{"location":"CI-CD/continuous-delivery/#release-pipeline-modeling-considerations","title":"Release Pipeline Modeling Considerations","text":"<ul> <li>Depict all stages an application change would have to go through before it is released to production.</li> <li>Define all release gate controls.</li> <li>Determine customer-specific Cloud RBAC groups which have the authority to approve release candidates per environment.</li> </ul>"},{"location":"CI-CD/continuous-delivery/#release-pipeline-stages","title":"Release Pipeline Stages","text":"<p>The stages within your release workflow are ultimately testing a version of your application to validate it can be released in accordance to your acceptance criteria. The release pipeline should account for the following conditions:</p> <ul> <li>Release Selection: The developer carrying out application testing should have the capability to select which release version to deploy to the testing environment.</li> <li>Deployment - Release the application deployable build artifact (created from the CI stage) to the target cloud environment.</li> <li>Configuration - Applications should be configured consistently across all your environments. This configuration is applied at the time of deployment.  Sensitive data like app secrets and certificates should be mastered in a fully managed PaaS key and secret store (eg Key Vault, KMS). Any secrets used by the application should be sourced internally within the application itself. Application Secrets should not be exposed within the runtime environment. We encourage 12 Factor principles, especially when it comes to configuration management.</li> <li>Data Migration - Pre populate application state and/or data records which is needed for your runtime environment. This may also include test data required for your end-to-end integration test suite.</li> <li>Deployment smoke test. Your smoke test should also verify that your application is pointing to the correct configuration (e.g. production pointing to a UAT Database).</li> <li>Perform any manual or automated acceptance test scenarios.</li> <li>Approve the release gate to promote the application version to the target cloud environment. This promotion should also include the environment's configuration state (e.g. new env settings, feature flags, etc).</li> </ul>"},{"location":"CI-CD/continuous-delivery/#live-release-warm-up","title":"Live Release Warm Up","text":"<p>A release should be running for a period of time before it's considered live and allowed to accept user traffic. These warm up activities may include application server(s) and database(s) pre-fill any dependent cache(s) as well as establish all service connections (eg connection pool allocations, etc).</p>"},{"location":"CI-CD/continuous-delivery/#pre-production-releases","title":"Pre-production Releases","text":"<p>Application release candidates should be deployed to a staging environment similar to production for carrying out final manual/automated tests (including capacity testing). Your production and staging / pre-prod cloud environments should be setup at the beginning of your project.</p> <p>Application warm up should be a quantified measurement that's validated as part of your pre-prod smoke tests.</p>"},{"location":"CI-CD/continuous-delivery/#rolling-back-releases","title":"Rolling-Back Releases","text":"<p>Your release strategy should account for rollback scenarios in the event of unexpected failures following a deployment.</p> <p>Rolling back releases can get tricky, especially when database record/object changes occur in result of your deployment (either inadvertently or intentionally). If there are no data changes which need to be backed out, then you can simply trigger a new release candidate for the last known production version and promote that release along your CD pipeline.</p> <p>For rollback scenarios involving data changes, there are several approaches to mitigating this which fall outside the scope of this guide. Some involve database record versioning, time machining database records / objects, etc. All data files and databases should be backed up prior to each release so they could be restored. The mitigation strategy for this scenario will vary across our projects. The expectation is that this mitigation strategy should be covered as part of your release strategy.</p> <p>Another approach to consider when designing your release strategy is deployment rings. This approach simplifies rollback scenarios while limiting the impact of your release to end-users by gradually deploying and validating your changes in production.</p>"},{"location":"CI-CD/continuous-delivery/#zero-downtime-releases","title":"Zero Downtime Releases","text":"<p>A hot deployment follows a process of switching users from one release to another with no impact to the user experience. As an example, Azure managed app services allows developers to validate app changes in a staging deployment slot before swapping it with the production slot. App Service slot swapping can also be fully automated once the source slot is fully warmed up (and auto swap is enabled). Slot swapping also simplifies release rollbacks once a technical operator restores the slots to their pre-swap states.</p> <p>Kubernetes natively supports rolling updates.</p>"},{"location":"CI-CD/continuous-delivery/#blue-green-deployments","title":"Blue-Green Deployments","text":"<p>Blue / Green is a deployment technique which reduces downtime by running two identical instances of a production environment called Blue and Green.</p> <p>Only one of these environments accepts live production traffic at a given time.</p> <p></p> <p>In the above example, live production traffic is routed to the Green environment. During application releases, the new version is deployed to the blue environment which occurs independently from the Green environment. Live traffic is unaffected from Blue environment releases. You can point your end-to-end test suite against the Blue environment as one of your test checkouts.</p> <p>Migrating users to the new application version is as simple as changing the router configuration to direct all traffic to the Blue environment.</p> <p>This technique simplifies rollback scenarios as we can simply switch the router back to Green.</p> <p>Database providers like Cosmos and Azure SQL natively support data replication to help enable fully synchronized Blue Green database environments.</p>"},{"location":"CI-CD/continuous-delivery/#canary-releasing","title":"Canary Releasing","text":"<p>Canary releasing enables development teams to gather faster feedback when deploying new features to production. These releases are rolled out to a subset of production nodes (where no users are routed to) to collect early insights around capacity testing and functional completeness and impact.</p> <p></p> <p>Once smoke and capacity tests are completed, you can route a small subset of users to the production nodes hosting the release candidate.</p> <p>Canary releases simplify rollbacks as you can avoid routing users to bad application versions.</p> <p>Try to limit the number of versions of your application running parallel in production, as it can complicate maintenance and monitoring controls.</p>"},{"location":"CI-CD/continuous-delivery/#low-code-solutions","title":"Low Code Solutions","text":"<p>Low code solutions have increased their participation in the applications and processes and because of that it is required that a proper conjunction of disciplines improve their development.</p> <p>Here is a guide for continuous deployment for Low Code Solutions.</p>"},{"location":"CI-CD/continuous-delivery/#resources","title":"Resources","text":"<ul> <li>Continuous Delivery by Jez Humble, David Farley.</li> <li>Continuous integration vs. continuous delivery vs. continuous deployment</li> <li>Deployment Rings</li> </ul>"},{"location":"CI-CD/continuous-delivery/#tools","title":"Tools","text":"<p>Check out the below tools to help with some CD best practices listed above:</p> <ul> <li>Flux for gitops</li> <li>CI/CD workflow using GitOps</li> <li>Tekton for Kubernetes native pipelines<ul> <li>Note Jenkins-X uses Tekton under the hood.</li> </ul> </li> <li>Argo Workflows</li> <li>Flagger for powerful, Kubernetes native releases including blue/green, canary, and A/B testing.</li> <li>Not quite CD related, but checkout jsonnet, a templating language to reduce boilerplate and increase sharing between your yaml/json manifests.</li> </ul>"},{"location":"CI-CD/continuous-integration/","title":"Continuous Integration","text":"<p>We encourage engineering teams to make an upfront investment during Sprint 0 of a project to establish an automated and repeatable pipeline which continuously integrates code and releases system executable(s) to target cloud environments. Each integration should be verified by an automated build process that asserts a suite of validation tests pass and surface any errors across the developer team.</p> <p>We encourage teams to implement the CI/CD pipelines before any service code is written for customers, which usually happens in Sprint 0(N). This way, the engineering team can develop and test their work in isolation without impacting other developers and promote a consistent devops workflow throughout the engagement.</p> <p>These principles map directly agile software development lifecycle practices.</p>"},{"location":"CI-CD/continuous-integration/#goals","title":"Goals","text":"<p>Continuous integration automation is an integral part of the software development lifecycle intended to reduce build integration errors and maximize velocity across a dev crew.</p> <p>A robust build automation pipeline will:</p> <ul> <li>Accelerate team velocity</li> <li>Prevent integration problems</li> <li>Avoid last minute chaos during release dates</li> <li>Provide a quick feedback cycle for system-wide impact of local changes</li> <li>Separate build and deployment stages</li> <li>Measure and report metrics around build failures / success(s)</li> <li>Increase visibility across the team enabling tighter communication</li> <li>Reduce human errors, which is probably the most important part of automating the builds</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-definition-managed-in-git","title":"Build Definition Managed in Git","text":""},{"location":"CI-CD/continuous-integration/#code-manifest-artifacts-required-to-build-your-project-should-be-maintained-within-your-projects-git-repository","title":"Code / Manifest Artifacts Required to Build Your Project Should be Maintained Within Your Projects Git Repository","text":"<ul> <li>CI provider-specific build pipeline definition(s) should reside within your project(s) git repository(s).</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-automation","title":"Build Automation","text":"<p>An automated build should encompass the following principles:</p>"},{"location":"CI-CD/continuous-integration/#build-task","title":"Build Task","text":"<ul> <li>A single step within your build pipeline that compiles your code project into a single build artifact.</li> </ul>"},{"location":"CI-CD/continuous-integration/#unit-testing","title":"Unit Testing","text":"<ul> <li>Your build definition includes validation steps to execute a suite of automated unit tests to ensure that application components meets its design and behaves as intended.</li> </ul>"},{"location":"CI-CD/continuous-integration/#code-style-checks","title":"Code Style Checks","text":"<ul> <li>Code across an engineering team must be formatted to agreed coding standards. Such standards keep code consistent, and most importantly easy for the team and customer(s) to read and refactor. Code styling consistency encourages collective ownership for project scrum teams and our partners.</li> <li>There are several open source code style validation tools available to choose from (code style checks, StyleCop). The Code Review recipes section of the playbook has suggestions for linters and preferred styles for a number of languages.</li> <li>Your code and documentation should avoid the use of non-inclusive language wherever possible. Follow the Inclusive Linting section to ensure your project promotes an inclusive work environment for both the team and for customers.</li> <li>We recommend incorporating security analysis tools within the build stage of your pipeline such as: code credential scanner, security risk detection, static analysis, etc. For Azure DevOps, you can add a security scan task to your pipeline by installing the Microsoft Security Code Analysis Extension. GitHub Actions supports a similar extension with the RIPS security scan solution.</li> <li>Code standards are maintained within a single configuration file. There should be a step in your build pipeline that asserts code in the latest commit conforms to the known style definition.</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-script-target","title":"Build Script Target","text":"<ul> <li>A single command should have the capability of building the system. This is also true for builds running on a CI server or on a developers local machine.</li> </ul>"},{"location":"CI-CD/continuous-integration/#no-ide-dependencies","title":"No IDE Dependencies","text":"<ul> <li>It's essential to have a build that's runnable through standalone scripts and not dependent on a particular IDE. Build pipeline targets can be triggered locally on their desktops through their IDE of choice. The build process should maintain enough flexibility to run within a CI server as well. As an example, dockerizing your build process offers this level of flexibility as VSCode and IntelliJ supports docker plugin extensions.</li> </ul>"},{"location":"CI-CD/continuous-integration/#devops-security-checks","title":"DevOps Security Checks","text":"<ul> <li>Introduce security to your project at early stages. Follow the DevSecOps section to introduce security practices, automation, tools and frameworks as part of the CI.</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-environment-dependencies","title":"Build Environment Dependencies","text":""},{"location":"CI-CD/continuous-integration/#automated-local-environment-setup","title":"Automated Local Environment Setup","text":"<ul> <li>We encourage maintaining a consistent developer experience for all team members. There should be a central automated manifest / process that streamlines the installation and setup of any software dependencies. This way developers can replicate the same build environment locally as the one running on a CI server.</li> <li>Build automation scripts often require specific software packages and version pre-installed within the runtime environment of the OS. This presents some challenges as build processes typically version lock these dependencies.</li> <li>All developers on the team should be able to emulate the build environment from their local desktop regardless of their OS.</li> <li>For projects using VS Code, leveraging Dev Containers can really help standardize the local developer experience across the team.</li> <li>Well established software packaging tools like Docker, Maven, npm, etc should be considered when designing your build automation tool chain.</li> </ul>"},{"location":"CI-CD/continuous-integration/#document-local-setup","title":"Document Local Setup","text":"<ul> <li>The setup process for setting up a local build environment should be well documented and easy for developers to follow.</li> </ul>"},{"location":"CI-CD/continuous-integration/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Manage as much of the following as possible, as code:</p> <ul> <li>Configuration Files</li> <li>Configuration Management(ie environment variable automation via terraform)</li> <li>Secret Management(ie creating Azure secrets via terraform)</li> <li>Cloud Resource Provisioning</li> <li>Role Assignments</li> <li>Load Test Scenarios</li> <li>Availability Alerting / Monitoring Rules and Conditions</li> </ul> <p>Decoupling infrastructure from the application codebase simplifies engineering teams move to cloud native applications.</p> <p>Terraform resource providers like Azure DevOps is making it easier for developers to manage build pipeline variables, service connections and CI/CD pipeline definitions.</p>"},{"location":"CI-CD/continuous-integration/#sample-devops-workflow-using-terraform-and-cobalt","title":"Sample DevOps Workflow using Terraform and Cobalt","text":""},{"location":"CI-CD/continuous-integration/#why","title":"Why","text":"<ul> <li>Repeatable and auditable changes to infrastructure make it easier to roll back to known good configurations and to rapidly expand to new stages and regions without having to hand-wire cloud resources</li> <li>Battle tested and templated IAC reference projects like Cobalt and Bedrock enable more engineering teams deploy secure and scalable solutions at a much more rapid pace</li> <li>Simplify \u201clift and shift\u201d scenarios by abstracting the complexities of cloud-native computing away from application developer teams.</li> </ul>"},{"location":"CI-CD/continuous-integration/#iac-devops-operations-by-pull-request","title":"IAC DevOPS: Operations by Pull Request","text":"<ul> <li>The Infrastructure deployment process built around a repo that holds the current expected state of the system / Azure environment.</li> <li>Operational changes are made to the running system by making commits on this repo.</li> <li>Git also provides a simple model for auditing deployments and rolling back to a previous state.</li> </ul>"},{"location":"CI-CD/continuous-integration/#infrastructure-advocated-patterns","title":"Infrastructure Advocated Patterns","text":"<ul> <li>You define infrastructure as code in Terraform / ARM / Ansible templates</li> <li>Templates are repeatable cloud resource stacks with a focus on configuration sets aligned with app scaling and throughput needs.</li> </ul>"},{"location":"CI-CD/continuous-integration/#iac-principles","title":"IAC Principles","text":""},{"location":"CI-CD/continuous-integration/#automate-the-azure-environment","title":"Automate the Azure Environment","text":"<ul> <li>All cloud resources are provisioned through a set of infrastructure as code templates. This also includes secrets, service configuration settings, role assignments and monitoring conditions.</li> <li>Azure Portal should provide a read-only view on environment resources. Any change applied to the environment should be made through the IAC CI tool-chain only.</li> <li>Provisioning cloud environments should be a repeatable process that's driven off the infrastructure code artifacts checked into our git repository.</li> </ul>"},{"location":"CI-CD/continuous-integration/#iac-ci-workflow","title":"IAC CI Workflow","text":"<ul> <li>When the IAC template files change through a git-based workflow, A CI build pipeline builds, validates and reconciles the target infrastructure environment's current state with the expected state. The infrastructure execution plan candidate for these fixed environments are reviewed by a cloud administrator as a gate check prior to the deployment stage of the pipeline applying the execution plan.</li> </ul>"},{"location":"CI-CD/continuous-integration/#developer-read-only-access-to-cloud-resources","title":"Developer Read-Only Access to Cloud Resources","text":"<ul> <li>Developer accounts in the Azure portal should have read-only access to IAC environment resources in Azure.</li> </ul>"},{"location":"CI-CD/continuous-integration/#secret-automation","title":"Secret Automation","text":"<ul> <li>IAC templates are deployed via a CI/CD system that has secrets automation integrated. Avoid applying changes to secrets and/or certificates directly in the Azure Portal.</li> </ul>"},{"location":"CI-CD/continuous-integration/#infrastructure-integration-test-automation","title":"Infrastructure Integration Test Automation","text":"<ul> <li>End-to-end integration tests are run as part of your IAC CI process to inspect and validate that an azure environment is ready for use.</li> </ul>"},{"location":"CI-CD/continuous-integration/#infrastructure-documentation","title":"Infrastructure Documentation","text":"<ul> <li>The deployment and cloud resource template topology should be documented and well understood within the README of the IAC git repo.</li> <li>Local environment and CI workflow setup steps should be documented.</li> </ul>"},{"location":"CI-CD/continuous-integration/#configuration-validation","title":"Configuration Validation","text":"<p>Applications use configuration to allow different runtime behaviors and it\u2019s quite common to use files to store these settings. As developers, we might introduce errors while editing these files which would cause issues for the application to start and/or run correctly. By applying validation techniques on both syntax and semantics of our configuration, we can detect errors before the application is deployed and execute, improving the developer (user) experience.</p>"},{"location":"CI-CD/continuous-integration/#application-configuration-files-examples","title":"Application Configuration Files Examples","text":"<ul> <li>JSON, with support for complex data types and data structures</li> <li>YAML, a super set of JSON with support for complex data types and structures</li> <li>TOML, a super set of JSON and a formally specified configuration file format</li> </ul>"},{"location":"CI-CD/continuous-integration/#why-validate-application-configuration-as-a-separate-step","title":"Why Validate Application Configuration as a Separate Step?","text":"<ul> <li>Easier Debugging &amp; Time saving - With a configuration validation step in our pipeline, we can avoid running the application just to find it fails. It saves time on having to deploy &amp; run, wait and then realize something is wrong in configuration. In addition, it also saves time on going through the logs to figure out what failed and why.</li> <li>Better user/developer experience - A simple reminder to the user that something in the configuration isn't in the right format can make all the difference between the joy of a successful deployment process and the intense frustration of having to guess what went wrong. For example, when there is a Boolean value expected, it can either be a string value like \"True\" or \"False\" or an integer value such as \"0\" or \"1\" . With configuration validation we make sure the meaning is correct for our application.</li> <li>Avoid data corruption and security breaches - Since the data arrives from an untrusted source, such as a user or an external webservice, it\u2019s particularly important to validate the input . Otherwise, it will run at the risk of performing errors, corrupting data, or, worse, be vulnerable to a whole array of injection attacks.</li> </ul>"},{"location":"CI-CD/continuous-integration/#what-is-json-schema","title":"What is Json Schema?","text":"<p>JSON-Schema is the standard of JSON documents that describes the structure and the requirements of your JSON data. Although it is called JSON-Schema, it also common to use this method for YAMLs, as it is a super set of JSON. The schema is very simple; point out which fields might exist, which are required or optional, what data format they use. Other validation rules can be added on top of that basic premise, along with human-readable information. The metadata lives in schemas which are .json files as well. In addition, schema has the widest adoption among all standards for JSON validation as it covers a big part of validation scenarios. It uses easy-to-parse JSON documents for schemas and is easily extensible.</p>"},{"location":"CI-CD/continuous-integration/#how-to-implement-schema-validation","title":"How to Implement Schema Validation?","text":"<p>Implementing schema validation is divided in two - the generation of the schemas and the validation of yaml/json files with those schemas.</p>"},{"location":"CI-CD/continuous-integration/#generation","title":"Generation","text":"<p>There are two options to generate a schema:</p> <ul> <li>From code - we can leverage the existing models and objects in the code and generate a customized schema.</li> <li>From data - we can take yaml/json samples which reflect the configuration in general and use the various online tools to generate a schema.</li> </ul>"},{"location":"CI-CD/continuous-integration/#validation","title":"Validation","text":"<p>The schema has 30+ validators for different languages, including 10+ for JavaScript, so no need to code it yourself.</p>"},{"location":"CI-CD/continuous-integration/#integration-validation","title":"Integration Validation","text":"<p>An effective way to identify bugs in your build at a rapid pace is to invest early into a reliable suite of automated tests that validate the baseline functionality of the system:</p>"},{"location":"CI-CD/continuous-integration/#end-to-end-integration-tests","title":"End-to-End Integration Tests","text":"<ul> <li>Include tests in your pipeline to validate the build candidate conforms to automated business functionality assertions. Any bugs or broken code should be reported in the test results including the failed test and relevant stack trace. All tests should be invoked through a single command.</li> <li>Keep the build fast. Consider automated test runtime when deciding to pull in dependencies like databases, external services and mock data loading into your test harness. Slow builds often become a bottleneck for dev teams when parallel builds on a CI server are not an option. Consider adding max timeout limits for lengthy validations to fail fast and maintain high velocity across the team.</li> </ul>"},{"location":"CI-CD/continuous-integration/#avoid-checking-in-broken-builds","title":"Avoid Checking in Broken Builds","text":"<ul> <li>Automated build checks, tests, lint runs, etc should be validated locally before committing your changes to the scm repo. Test Driven Development is a practice dev crews should consider to help identify bugs and failures as early as possible within the development lifecycle.</li> </ul>"},{"location":"CI-CD/continuous-integration/#reporting-build-failures","title":"Reporting Build Failures","text":"<ul> <li>If the build step happens to fail then the build pipeline run status should be reported as failed including relevant logs and stack traces.</li> </ul>"},{"location":"CI-CD/continuous-integration/#test-automation-data-dependencies","title":"Test Automation Data Dependencies","text":"<ul> <li>Any mocked dataset(s) used for unit and end-to-end integration tests should be checked into the mainline repository. Minimize any external data dependencies with your build process.</li> </ul>"},{"location":"CI-CD/continuous-integration/#code-coverage-checks","title":"Code Coverage Checks","text":"<ul> <li>We recommend integrating code coverage tools within your build stage. Most coverage tools fail builds when the test coverage falls below a minimum threshold(80% coverage). The coverage report should be published to your CI system to track a time series of variations.</li> </ul>"},{"location":"CI-CD/continuous-integration/#git-driven-workflow","title":"Git Driven Workflow","text":""},{"location":"CI-CD/continuous-integration/#build-on-commit","title":"Build on Commit","text":"<ul> <li>Every commit to the baseline repository should trigger the CI pipeline to create a new build candidate.</li> <li>Build artifact(s) are built, packaged, validated and deployed continuously into a non-production environment per commit. Each commit against the repository results into a CI run which checks out the sources onto the integration machine, initiates a build, and notifies the committer of the result of the build.</li> </ul>"},{"location":"CI-CD/continuous-integration/#avoid-commenting-out-failing-tests","title":"Avoid Commenting Out Failing Tests","text":"<ul> <li>Avoid commenting out tests in the mainline branch. By commenting out tests, we get an incorrect indication of the status of the build.</li> </ul>"},{"location":"CI-CD/continuous-integration/#branch-policy-enforcement","title":"Branch Policy Enforcement","text":"<ul> <li>Protected branch policies should be setup on the main branch to ensure that CI stage(s) have passed prior to starting a code review. Code review approvers will only start reviewing a pull request once the CI pipeline run passes for the latest pushed git commit.</li> <li>Broken builds should block pull request reviews.</li> <li>Prevent commits directly into main branch.</li> </ul>"},{"location":"CI-CD/continuous-integration/#branch-strategy","title":"Branch Strategy","text":"<ul> <li>Release branches should auto trigger the deployment of a build artifact to its target cloud environment. You can find additional guidance on the Azure DevOps documentation site under the Manage deployments section</li> </ul>"},{"location":"CI-CD/continuous-integration/#deliver-quickly-and-daily","title":"Deliver Quickly and Daily","text":"<p>\"By committing regularly, every committer can reduce the number of conflicting changes. Checking in a week's worth of work runs the risk of conflicting with other features and can be very difficult to resolve. Early, small conflicts in an area of the system cause team members to communicate about the change they are making.\"</p> <p>In the spirit of transparency and embracing frequent communication across a dev crew, we encourage developers to commit code on a daily cadence. This approach provides visibility to feature progress and accelerates pair programming across the team. Here are some principles to consider:</p>"},{"location":"CI-CD/continuous-integration/#everyone-commits-to-the-git-repository-each-day","title":"Everyone Commits to the Git Repository Each Day","text":"<ul> <li>End of day checked-in code should contain unit tests at the minimum.</li> <li>Run the build locally before checking in to avoid CI pipeline failure saturation. You should verify what caused the error, and try to solve it as soon as possible instead of committing your code. We encourage developers to follow a lean SDLC principles.</li> <li>Isolate work into small chunks which ties directly to business value and refactor incrementally.</li> </ul>"},{"location":"CI-CD/continuous-integration/#isolated-environments","title":"Isolated Environments","text":"<p>One of the key goals of build validation is to isolate and identify failures in staging environment(s) and minimize any disruption to live production traffic. Our E2E automated tests should run in an environment which mimics our production environment(as much as possible). This includes consistent software versions, OS, test data volume simulations, network traffic parity with production, etc.</p>"},{"location":"CI-CD/continuous-integration/#test-in-a-clone-of-production","title":"Test in a Clone of Production","text":"<ul> <li>The production environment should be duplicated into a staging environment(QA and/or Pre-Prod) at a minimum.</li> </ul>"},{"location":"CI-CD/continuous-integration/#pull-request-updates-trigger-staged-releases","title":"Pull Request Updates Trigger Staged Releases","text":"<ul> <li>New commits related to a pull request should trigger a build / release into an integration environment. The production environment should be fully isolated from this process.</li> </ul>"},{"location":"CI-CD/continuous-integration/#promote-infrastructure-changes-across-fixed-environments","title":"Promote Infrastructure Changes Across Fixed Environments","text":"<ul> <li>Infrastructure as code changes should be tested in an integration environment and promoted to all staging environment(s) then migrated to production with zero downtime for system users.</li> </ul>"},{"location":"CI-CD/continuous-integration/#testing-in-production","title":"Testing in Production","text":"<ul> <li>There are various approaches with safely carrying out automated tests for production deployments. Some of these may include:<ul> <li>Feature flagging</li> <li>A/B testing</li> <li>Traffic shifting</li> </ul> </li> </ul>"},{"location":"CI-CD/continuous-integration/#developer-access-to-the-latest-release-artifacts","title":"Developer Access to the Latest Release Artifacts","text":"<p>Our devops workflow should enable developers to get, install and run the latest system executable. Release executable(s) should be auto generated as part of our CI/CD pipeline(s).</p>"},{"location":"CI-CD/continuous-integration/#developers-can-access-the-latest-executable","title":"Developers can Access the Latest Executable","text":"<ul> <li>The latest system executable is available for all developers on the team. There should be a well-known place where developers can reference the release artifact.</li> </ul>"},{"location":"CI-CD/continuous-integration/#release-artifacts-are-published-for-each-pull-request-or-merges-into-the-main-branch","title":"Release Artifacts are Published for Each Pull Request or Merges into the Main Branch","text":""},{"location":"CI-CD/continuous-integration/#integration-observability","title":"Integration Observability","text":"<p>Applied state changes to the mainline build should be made available and communicated across the team. Centralizing logs and status(s) from build and release pipeline failures are essential for developers investigating broken builds.</p> <p>We recommend integrating Teams or Slack with CI/CD pipeline runs which helps keep the team continuously plugged into failures and build candidate status(s).</p>"},{"location":"CI-CD/continuous-integration/#continuous-integration-top-level-dashboard","title":"Continuous Integration Top Level Dashboard","text":"<ul> <li>Modern CI providers have the capability to consolidate and report build status(s) within a given dashboard.</li> <li>Your CI dashboard should be able to correlate a build failure with a git commit.</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-status-badge-in-the-project-readme","title":"Build Status Badge in the Project Readme","text":"<ul> <li>There should be a build status badge included in the root README of the project.</li> </ul>"},{"location":"CI-CD/continuous-integration/#build-notifications","title":"Build Notifications","text":"<ul> <li>Your CI process should be configured to send notifications to messaging platforms like Teams / Slack once the build completes. We recommend creating a separate channel to help consolidate and isolate these notifications.</li> </ul>"},{"location":"CI-CD/continuous-integration/#resources","title":"Resources","text":"<ul> <li>Martin Fowler's Continuous Integration Best Practices</li> <li>Bedrock Getting Started Quick Guide</li> <li>Cobalt Quick Start Guide</li> <li>Terraform Azure DevOps Provider</li> <li>Azure DevOps multi stage pipelines</li> <li>Azure Pipeline Key Concepts</li> <li>Azure Pipeline Environments</li> <li>Artifacts in Azure Pipelines</li> <li>Azure Pipeline permission and security roles</li> <li>Azure Environment approvals and checks</li> <li>Terraform Getting Started Guide with Azure</li> <li>Terraform Remote State Azure Setup</li> <li>Terratest - Unit and Integration Infrastructure Framework</li> </ul>"},{"location":"CI-CD/dev-sec-ops/","title":"DevSecOps","text":""},{"location":"CI-CD/dev-sec-ops/#the-concept-of-devsecops","title":"The Concept of DevSecOps","text":"<p>DevSecOps or DevOps security is about introducing security earlier in the life cycle of application development (a.k.a shift-left), thus minimizing the impact of vulnerabilities and bringing security closer to development team.</p>"},{"location":"CI-CD/dev-sec-ops/#why","title":"Why","text":"<p>By embracing shift-left mentality, DevSecOps encourages organizations to bridge the gap that often exists between development and security teams to the point where many of the security processes are automated and are effectively handled by the development team.</p>"},{"location":"CI-CD/dev-sec-ops/#devsecops-practices","title":"DevSecOps Practices","text":"<p>This section covers different tools, frameworks and resources allowing introduction of DevSecOps best practices to your project at early stages of development. Topics covered:</p> <ol> <li>Credential Scanning - automatically inspecting a project to ensure that no secrets are included in the project's source code.</li> <li>Secrets Rotation - automated process by which the secret, used by the application, is refreshed and replaced by a new secret.</li> <li>Static Code Analysis - analyze source code or compiled versions of code to help find security flaws.</li> <li>Penetration Testing - a simulated attack against your application to check for exploitable vulnerabilities.</li> <li>Container Dependencies Scanning - search for vulnerabilities in container operating systems, language packages and application dependencies.</li> <li>Evaluation of Open Source Libraries - make it harder to apply open source supply chain attacks by evaluating the libraries you use.</li> </ol>"},{"location":"CI-CD/dev-sec-ops/azure-devops-service-connection-security/","title":"Azure DevOps Service Connection Security","text":"<p>Service Connections are used in Azure DevOps Pipelines to connect to external services, like Azure, GitHub, Docker, Kubernetes, and many other services. Service Connections can be used to authenticate to these external services and to invoke diverse types of commands, like create and update resources in Azure, upload container images to Docker, or deploy applications to Kubernetes.</p> <p>To be able to invoke these commands, Service Connections need to have the right permissions to do so, for most types of Service Connections the permissions can be scoped to a subset of resources to limit the access they have. To improve the principle of least privilege, it's often very common to have separate Service Connections for different environments like Dev/Test/QA/Prod.</p>"},{"location":"CI-CD/dev-sec-ops/azure-devops-service-connection-security/#secure-service-connection","title":"Secure Service Connection","text":"<p>Securing Service Connections can be achieved by using several methods.</p> <ul> <li>User permissions can be configured to ensure only the correct users can create, view, use, and manage the Service Connection.</li> <li>Pipeline-level permissions can be configured to ensure only approved YAML pipelines are able to use the Service Connection.</li> <li>Project permissions can be configured to ensure only certain Azure DevOps projects are able to use the Service Connection.</li> </ul> <p>After using the above methods, what is secured is who can use the Service Connections. What still isn't secured however, is what can be done with the Service Connections.</p> <p>Because Service Connections have all the necessary permissions in the external services, it is crucial to secure Service Connections so they cannot be misused by accident or by malicious users. An example of this is a Azure DevOps Pipeline that uses a Service Connection to an Azure Resource Group (or entire subscription) to list all resources and then delete those resources.  Without the correct security in place, it could be possible to execute this Pipeline, without any validation or reviews being done.</p> <pre><code>pool:\n  vmImage: ubuntu-latest\n\nsteps:\n- task: AzureCLI@2\n  inputs:\n    azureSubscription: 'Production Service Connection'\n    scriptType: 'pscore'\n    scriptLocation: 'inlineScript'\n    inlineScript: |\n      $resources = az resource list\n      foreach ($resource in $resources) {\n        az resource delete --ids $resource.id\n      }\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/azure-devops-service-connection-security/#pipeline-security-caveat","title":"Pipeline Security Caveat","text":"<p>YAML pipelines can be triggered without the need for a pull request, this introduces a security risk.</p> <p>In good practice, Pull Requests and Code Reviews should be used to ensure the code that is being deployed, is being reviewed by a second person and potentially automatically being checked for vulnerabilities and other security issues. However, YAML Pipelines can be executed without the need for a Pull Request and Code Reviews. This allows the (malicious) user to make changes using the Service Connection which would normally require a reviewer.</p> <p>The configuration of when a pipeline should be triggered is specified in the YAML Pipeline itself and therefore a pipeline can be configured to execute on changes in a temporary branch. In this temporary branch, any changes made to the pipeline itself will be executed without being reviewed.</p> <p>If the given pipeline has been granted Pipeline-level permissions to use a specific Service Connection, any command can be executed using that Service Connection, without anyone reviewing the command. Since Service Connections can have a lot of permissions in the external service, executing any pipeline without review could potentially have big consequences.</p>"},{"location":"CI-CD/dev-sec-ops/azure-devops-service-connection-security/#service-connection-checks","title":"Service Connection Checks","text":"<p>To prevent accidental mis-use of Service Connections there are several checks that can be configured. These checks are configured on the Service Connection itself and therefore can only be configured by the owner or administrator of that Service Connection. A user of a certain YAML Pipeline cannot modify these checks since the checks are not defined in the YAML file itself. Configuration can be done in the Approvals and Checks menu on the Service Connection. </p>"},{"location":"CI-CD/dev-sec-ops/azure-devops-service-connection-security/#branch-control","title":"Branch Control","text":"<p>By configuring Branch Control on a Service Connection, you can control that the Service Connection can only be used in a YAML Pipeline if the pipeline is running from a specific branch.</p> <p>By configuring Branch Control to only allow the main branch (and potentially release branches) you can ensure a YAML Pipeline can only use the Service Connection after any changes to that pipeline have been merged into the main branch, and therefore has passed any Pull Requests checks and Code Reviews. As an additional check, Branch Control can verify if Branch Protections (like required Pull Requests and Code Reviews) are actually configured on the allowed branches.</p> <p>With Branch Control in place, in combination with Branch Protections, it is not possible anymore to run any commands against a Service Connection without having multiple persons review the commands. Therefore accidental, or malicious, mis-use of the permissions a Service Connection has is not possible anymore.</p> <p>Note: When setting a wildcard for the Allowed Branches, anyone could still create a branch matching that wildcard and would be able to use the Service Connection. Using git permissions it can be configured so only administrators are allowed to create certain branches, like release branches.*</p> <p></p>"},{"location":"CI-CD/dev-sec-ops/dependency-and-container-scanning/","title":"Dependency and Container Scanning","text":"<p>Dependency and Container scanning is performed in order to search for vulnerabilities in operating systems, language and application packages.</p>"},{"location":"CI-CD/dev-sec-ops/dependency-and-container-scanning/#why-dependency-and-container-scanning","title":"Why Dependency and Container Scanning","text":"<p>Container images are standard application delivery format in cloud-native environments. Having a broad selection of images from the community, we often choose a community base image, and then add packages that we need to it, which might also come from community sources. Those arbitrary dependencies might introduce vulnerabilities to our image and application.</p>"},{"location":"CI-CD/dev-sec-ops/dependency-and-container-scanning/#applying-dependency-and-container-scanning","title":"Applying Dependency and Container Scanning","text":"<p>Images that contain software with security vulnerabilities become exploitable at runtime. When building an image in your CI pipeline, image scanning must be a requirement for a build to pass. Images that did not pass scanning should never be pushed to your production-accessible container registry.</p> <p>Dependency and Container scanning best practices:</p> <ol> <li>Base Image - if your image is built on top of a third-party base image, validate the following:<ul> <li>The image comes from a well-known company or open-source group.</li> <li>It is hosted on a reputable registry.</li> <li>The Dockerfile is available, and check for dependencies installed in it.</li> <li>The image is frequently updated - old images might not contain the latest security updates.</li> </ul> </li> <li>Remove Non-Essential Software - Start with a minimal base image and install only the tools, libraries and configuration files that are required by your application. Avoid installing the following tools or remove them if present:     - Network tools and clients: e.g., wget, curl, netcat, ssh.     - Shells: e.g. sh, bash. Note that removing shells also prevents the use of shell scripts at runtime. Instead, use an executable when possible.     - Compilers and debuggers. These should be used only in build and development containers, but never in production containers.</li> <li>Container images should be immutable - download and include all the required dependencies during the image build.</li> <li>Scan for vulnerabilities in software dependencies -  today there is likely no software project without some form of external libraries, dependencies or open source. While it allows the development team to focus on their application code, the dependency brings forth an expected downside where the security posture of the real application is now resting on it. To detect vulnerabilities contained within a project\u2019s dependencies use container scanning tools which as part of their analysis scan the software dependencies (see \"Dependency and Container Scanning Frameworks and Tools\").</li> </ol>"},{"location":"CI-CD/dev-sec-ops/dependency-and-container-scanning/#dependency-and-container-scanning-frameworks-and-tools","title":"Dependency and Container Scanning Frameworks and Tools","text":"<ol> <li>Trivy - a simple and comprehensive vulnerability scanner for containers (doesn't support Windows containers)</li> <li>Aqua - dependency and container scanning for applications running on AKS, ACI and Windows Containers. Has an integration with AzDO pipelines.</li> <li>Dependency-Check Plugin for SonarQube - OnPrem dependency scanning</li> <li>Mend (previously WhiteSource) - Open Source Scanning Software</li> </ol>"},{"location":"CI-CD/dev-sec-ops/dependency-and-container-scanning/#conclusion","title":"Conclusion","text":"<p>A powerful technology such as containers should be used carefully. Install the minimal requirements needed for your application, be aware of the software dependencies your application is using and make sure to maintain it over time by using container and dependencies scanning tools.</p>"},{"location":"CI-CD/dev-sec-ops/evaluate-open-source-software/","title":"Evaluate Open Source Software","text":"<p>Given the rise in threat of open source software supply chain attacks, developers should identify potential candidates for open-source dependencies and evaluate them against your needs and the required security posture.</p>"},{"location":"CI-CD/dev-sec-ops/evaluate-open-source-software/#why-evaluate-open-source-software","title":"Why Evaluate Open Source Software","text":"<p>Open source software is a critical part of modern software development. It is important to evaluate the open source software uses to ensure it meets the needs and is secure. Security is not a given with open source software, and furthermore, what is secure today may not be secure tomorrow so scanning dependencies for known vulnerabilities doesn't always cover all bases. This is why we need to look for evidence of a strong security posture and a commitment to security from the maintainers of the open source software we use.</p>"},{"location":"CI-CD/dev-sec-ops/evaluate-open-source-software/#when-to-evaluate-open-source-software","title":"When to Evaluate Open Source Software","text":"<p>You should evaluate open source software before you use it in your project. This is especially important if the software is a dependency of your project, as it can introduce security vulnerabilities and other issues into your project. Code reviewers should also be aware of the open source software used in the project and be able to use the tools and resources mentioned below to evaluate the security of the open source software that is being added to the project.</p>"},{"location":"CI-CD/dev-sec-ops/evaluate-open-source-software/#applying-open-source-software-evaluation","title":"Applying Open Source Software Evaluation","text":"<p>When evaluating open source software, consider the following:</p> <ul> <li>Can you avoid adding it as a dependency? The best dependency is the one you don't have.</li> <li>Is it maintained? How often and at what engineering rigor (i.e. code reviews, branch protection, tests)</li> <li>Is there evidence that effort is taken to make it secure?</li> <li>Can you find a reference that it is used significantly downstream by other projects or is referenced by known and trusted documentation? How many stars and forks does it have on GitHub?</li> <li>Is it easy to use securely?</li> <li>Does the license allow you to use it in your project?</li> <li>Are there instructions on how to report vulnerabilities?</li> <li>Does it have any known vulnerabilities or security issues?</li> <li>Are its dependencies secure, or at least up to date and actively maintained?</li> <li>Has it been audited by a third party such as the OpenSSF Security Reviews?</li> </ul>"},{"location":"CI-CD/dev-sec-ops/evaluate-open-source-software/#tools-for-evaluating-open-source-software","title":"Tools for Evaluating Open Source Software","text":"<ul> <li>OpenSSF Scorecards - This tool actually automates some of the checks in the list above and can be used to evaluate the security posture of open source projects. This can run as a GitHub action or in the Command Line Interface (CLI) to provide a security scorecard for open source projects. Note which metrics are important to you, your organization and the customer's. This tool is used by known open source program offices (OSPO) for measuring open source contributions by their employees.</li> <li>OWASP Dependency-Check - a software composition analysis utility that identifies project dependencies and checks if there are any known, publicly disclosed, vulnerabilities.</li> <li>Concise Guide for Evaluating Open Source Software - a guide to help you expand upon the knowledge in this page to evaluate open source software.</li> </ul>"},{"location":"CI-CD/dev-sec-ops/penetration-testing/","title":"Penetration Testing","text":"<p>A penetration test is a simulated attack against your application to check for exploitable security issues.</p>"},{"location":"CI-CD/dev-sec-ops/penetration-testing/#why-penetration-testing","title":"Why Penetration Testing","text":"<p>Penetration testing performed on a running application. As such, it tests the application E2E with all of its layers. It's output is a real simulated attack on the application that succeeded, therefore it is a critical issue in your application and should be addressed as soon as possible.</p>"},{"location":"CI-CD/dev-sec-ops/penetration-testing/#applying-penetration-testing","title":"Applying Penetration Testing","text":"<p>Many organizations perform manual penetration testing. But new vulnerabilities found every day. Therefore, it is a good practice to have an automated penetration testing performed. To achieve this automation use penetration testing tools to uncover vulnerabilities, such as unsanitized inputs that are susceptible to code injection attacks. Insights provided by the penetration test can then be used to fine-tune your WAF security policies and patch detected vulnerabilities.</p>"},{"location":"CI-CD/dev-sec-ops/penetration-testing/#penetration-testing-frameworks-and-tools","title":"Penetration Testing Frameworks and Tools","text":"<p>OWASP Zed Attack Proxy (ZAP) - OWASP penetration testing tool for web applications.</p>"},{"location":"CI-CD/dev-sec-ops/penetration-testing/#conclusion","title":"Conclusion","text":"<p>Penetration testing is essential to check for vulnerabilities in your application and protect it from simulated attacks. Insights provided by Penetration testing can identify weak spots in an organization's security posture, as well as measure the compliance of its security policy, test the staff's awareness of security issues and determine whether -- and how -- the organization would be subject to security disasters.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/","title":"Secrets Management","text":"<p>Secret management refers to the tools and practices used to manage digital authentication credentials (like API keys, tokens, passwords, and certificates). These secrets are used to protect access to sensitive data and services, making their management critical for security.</p> <p>We should assume any repo we work on may go public at any time and protect our secrets, even if the repo is initially private.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#importance-of-secrets-management","title":"Importance of Secrets Management","text":"<p>In modern software development, applications often need to interact with other software components, APIs, and services. These interactions often require authentication, which is typically handled using secrets. If these secrets are not managed properly, they can be exposed, leading to potential security breaches.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#best-practices-for-secrets-management","title":"Best Practices for Secrets Management","text":"<ol> <li>Centralized Secret Storage: Store all secrets in a centralized, encrypted location. This reduces the risk of secrets being lost or exposed.</li> <li>Access Control: Implement strict access control policies. Only authorized entities should have access to secrets.</li> <li>Rotation of Secrets: Regularly change secrets to reduce the risk if a secret is compromised.</li> <li>Audit Trails: Keep a record of when and who accessed which secret. This can help in identifying suspicious activities.</li> <li>Automated Secret Management: Automate the processes of secret creation, rotation, and deletion. This reduces the risk of human error.</li> </ol> <p>Remember, the goal of secret management is to protect sensitive information from unauthorized access and potential security threats.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#general-approach","title":"General Approach","text":"<p>The general approach is to keep secrets in separate configuration files that are not checked in to the repo. Add the files to the .gitignore to prevent that they're checked in.</p> <p>Each developer maintains their own local version of the file or, if required, circulate them via private channels e.g. a Teams chat.</p> <p>In a production system, assuming Azure, create the secrets in the environment of the running process. We can do this by manually editing the 'Applications Settings' section of the resource, but a script using the Azure CLI to do the same is a useful time-saving utility. See az webapp config appsettings for more details.</p> <p>It's best practice to maintain separate secrets configurations for each environment that you run. e.g. dev, test, prod, local etc</p> <p>The secrets-per-branch recipe describes a simple way to manage separate secrets configurations for each environment.</p> <p>Note: even if the secret was only pushed to a feature branch and never merged, it's still a part of the git history. Follow these instructions to remove any sensitive data and/or regenerate any keys and other sensitive information added to the repo. If a key or secret made it into the code base, rotate the key/secret so that it's no longer active</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#keeping-secrets-secret","title":"Keeping Secrets Secret","text":"<p>The care taken to protect our secrets applies both to how we get and store them, but also to how we use them.</p> <ul> <li>Don't log secrets</li> <li>Don't put them in reporting</li> <li>Don't send them to other applications, as part of URLs, forms, or in any other way other than to make a request to the service that requires that secret</li> </ul>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#enhanced-security-applications","title":"Enhanced-Security Applications","text":"<p>The techniques outlined below provide good security and a common pattern for a wide range of languages. They rely on the fact that Azure keeps application settings (the environment) encrypted until your app runs.</p> <p>They do not prevent secrets from existing in plaintext in memory at runtime. In particular, for garbage collected languages those values may exist for longer than the lifetime of the variable, and may be visible when debugging a memory dump of the process.</p> <p>If you are working on an application with enhanced security requirements you should consider using additional techniques to maintain encryption on secrets throughout the application lifetime.</p> <p>Always rotate encryption keys on a regular basis.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#techniques-for-secrets-management","title":"Techniques for Secrets Management","text":"<p>These techniques make the loading of secrets  transparent to the developer.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#cnet","title":"C#/.NET","text":""},{"location":"CI-CD/dev-sec-ops/secrets-management/#modern-net-solution","title":"Modern .NET Solution","text":"<p>For .NET SDK (version 2.0 or higher) we have <code>dotnet secrets</code>, a tool provided by the .NET SDK that allows you to manage and protect sensitive information, such as API keys, connection strings, and other secrets, during development. The secrets are stored securely on your machine and can be accessed by your .NET applications.</p> <pre><code># Initialize dotnet secret\ndotnet user-secrets init\n\n# Adding secret\n# dotnet user-secrets set &lt;KEY&gt; &lt;VALUE&gt;\ndotnet user-secrets set ExternalServiceApiKey my-api-key-12345\n\n# Update Secret\ndotnet user-secrets set ExternalServiceApiKey updated-api-key-67890\n</code></pre> <p>To access the secrets;</p> <pre><code>using Microsoft.Extensions.Configuration;\n\nvar builder = new ConfigurationBuilder()\n    .AddUserSecrets&lt;Startup&gt;();\n\nvar configuration = builder.Build();\nvar externalServiceApiKey = configuration[\"ExternalServiceApiKey\"];\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#deployment-considerations","title":"Deployment Considerations","text":"<p>When deploying your application to production, it's essential to ensure that your secrets are securely managed. Here are some deployment-related implications:</p> <ul> <li>Remove Development Secrets: Before deploying to production, remove any development secrets from your application configuration. You can use environment variables or a more secure secret management solution like Azure Key Vault or AWS Secrets Manager in production.</li> </ul> <ul> <li>Secure Deployment: Ensure that your production server is secure, and access to secrets is controlled. Never store secrets directly in source code or configuration files.</li> </ul> <ul> <li>Key Rotation: Consider implementing a secret rotation policy to regularly update your secrets in production.</li> </ul>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#net-framework-solution","title":".NET Framework Solution","text":"<p>Use the <code>file</code> attribute of the appSettings element to load secrets from a local file.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n  &lt;appSettings file=\"..\\..\\secrets.config\"&gt;\n  \u2026\n  &lt;/appSettings&gt;\n  &lt;startup&gt;\n      &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6.1\" /&gt;\n  &lt;/startup&gt;\n  \u2026\n&lt;/configuration&gt;\n</code></pre> <p>Access secrets:</p> <pre><code>static void Main(string[] args)\n{\n    String mySecret = System.Configuration.ConfigurationManager.AppSettings[\"mySecret\"];\n}\n</code></pre> <p>When running in Azure, ConfigurationManager will load these settings from the process environment. We don't need to upload secrets files to the server or change any code.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#node","title":"Node","text":"<p>Store secrets in environment variables or in a <code>.env</code> file</p> <pre><code>$ cat .env\nMY_SECRET=mySecret\n</code></pre> <p>Use the dotenv package to load and access environment variables</p> <pre><code>require('dotenv').config()\nlet mySecret = process.env(\"MY_SECRET\")\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#python","title":"Python","text":"<p>Store secrets in environment variables or in a <code>.env</code> file</p> <pre><code>$ cat .env\nMY_SECRET=mySecret\n</code></pre> <p>Use the dotenv package to load and access environment variables</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\n\nload_dotenv()\nmy_secret = os.getenv('MY_SECRET')\n</code></pre> <p>Another good library for reading environment variables is <code>environs</code></p> <pre><code>from environs import Env\n\n\nenv = Env()\nenv.read_env()\nmy_secret = os.environ[\"MY_SECRET\"]\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#databricks","title":"Databricks","text":"<p>Databricks has the option of using dbutils as a secure way to retrieve credentials and not reveal them within the notebooks running on Databricks</p> <p>The following steps lay out a clear pathway to creating new secrets and then utilizing them within a notebook on Databricks:</p> <ol> <li>Install and configure the Databricks CLI on your local machine</li> <li>Get the Databricks personal access token</li> <li>Create a scope for the secrets</li> <li>Create secrets</li> </ol>"},{"location":"CI-CD/dev-sec-ops/secrets-management/#validation","title":"Validation","text":"<p>Automated credential scanning can be performed on the code regardless of the programming language.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/credential_scanning/","title":"Credential Scanning","text":"<p>Credential scanning is the practice of automatically inspecting a project to ensure that no secrets are included in the project's source code. Secrets include database passwords, storage connection strings, admin logins, service principals, etc.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/credential_scanning/#why-credential-scanning","title":"Why Credential Scanning","text":"<p>Including secrets in a project's source code is a significant risk, as it might make those secrets available to unwanted parties. Even if it seems that the source code is accessible to the same people who are privy to the secrets, this situation is likely to change as the project grows. Spreading secrets in different places makes them harder to manage, access control, and revoke efficiently. Secrets that are committed to source control are also harder to discard of, since they will persist in the source's history. Another consideration is that coupling the project's code to its infrastructure and deployment specifics is limiting and considered a bad practice. From a software design perspective, the code should be independent of the runtime configuration that will be used to run it, and that runtime configuration includes secrets. As such, there should be a clear boundary between code and secrets: secrets should be managed outside of the source code and credential scanning should be employed to ensure that this boundary is never violated.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/credential_scanning/#applying-credential-scanning","title":"Applying Credential Scanning","text":"<p>Ideally, credential scanning should be run as part of a developer's workflow (e.g. via a git pre-commit hook), however, to protect against developer error, credential scanning must also be enforced as part of the continuous integration process to ensure that no credentials ever get merged to a project's main branch. To implement credential scanning for a project, consider the  following:</p> <ol> <li>Store secrets in an external secure store that is meant to store sensitive information</li> <li>Use secrets scanning tools to asses your repositories current state by scanning it's full history for secrets</li> <li>Incorporate an automated secrets scanning tool into your CI pipeline to detect unintentional committing of secrets</li> <li>Avoid <code>git add .</code> commands on git</li> <li>Add sensitive files to .gitignore</li> </ol>"},{"location":"CI-CD/dev-sec-ops/secrets-management/credential_scanning/#credential-scanning-frameworks-and-tools","title":"Credential Scanning Frameworks and Tools","text":"<p>Recipes and Scenarios -</p> <ol> <li>detect-secrets is an aptly named module for detecting secrets within a code base.</li> <li>Use detect-secrets inside Azure DevOps Pipeline</li> <li>Microsoft Security Code Analysis extension</li> </ol> <p>Additional Tools -</p> <ol> <li>CodeQL  \u2013 GitHub security. CodeQL lets you query code as if it was data. Write a query to find all variants of a vulnerability</li> <li>Git-secrets  - Prevents you from committing passwords and other sensitive information to a git repository.</li> </ol>"},{"location":"CI-CD/dev-sec-ops/secrets-management/credential_scanning/#conclusion","title":"Conclusion","text":"<p>Secret management is essential to every project. Storing secrets in external secrets store and incorporating this mindset into your workflow will improve your security posture and will result in cleaner code.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/","title":"Secrets Rotation","text":"<p>Secret rotation is the process of refreshing the secrets that are used by the application. The best way to authenticate to Azure services is by using a managed identity, but there are some scenarios where that isn't an option. In those cases, access keys or secrets are used. You should periodically rotate access keys or secrets.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/#why-secrets-rotation","title":"Why Secrets Rotation","text":"<p>Secrets are an asset and as such have a potential to be leaked or stolen. By rotating the secrets, we are revoking any secrets that may have been compromised. Therefore, secrets should be rotated frequently.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/#managed-identity","title":"Managed Identity","text":"<p>Azure Managed identities are automatically issues by Azure in order to identify individual resources, and can be used for authentication in place of secrets and passwords. The appeal in using Managed Identities is the elimination of management of secrets and credentials. They are not required on developers machines or checked into source control, and they don't need to be rotated. Managed identities are considered safer than the alternatives and is the recommended choice.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/#applying-secrets-rotation","title":"Applying Secrets Rotation","text":"<p>If Azure Managed Identity can't be used. This and the following sections will explain how rotation of secrets can be achieved:</p> <p>To promote frequent rotation of a secret - define an automated periodic secret rotation process. The secret rotation process might result in a downtime when the application is restarted to introduce the new secret. A common solution for that is to have two versions of secret available, also referred to as Blue/Green Secret rotation. By having a second secret at hand, we can start a second instance of the application with that secret before the previous secret is revoked, thus avoiding any downtime.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/#secrets-rotation-frameworks-and-tools","title":"Secrets Rotation Frameworks and Tools","text":"<ol> <li>For rotation of a secret for resources that use one set of authentication credentials click here</li> <li>For rotation of a secret for resources that have two sets of authentication credentials click here</li> </ol>"},{"location":"CI-CD/dev-sec-ops/secrets-management/secrets_rotation/#conclusion","title":"Conclusion","text":"<p>Refreshing secrets is important to ensure that your secret stays a secret without causing downtime to your application.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/static-code-analysis/","title":"Static Code Analysis","text":"<p>Static code analysis is a method of detecting security issues by examining the source code of the application.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/static-code-analysis/#why-static-code-analysis","title":"Why Static Code Analysis","text":"<p>Compared to code reviews, Static code analysis tools are more fast, accurate and through. As it operates on the source code itself, it is a very early indicator for issues, and coding errors found earlier are less costly to fix.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/static-code-analysis/#applying-static-code-analysis","title":"Applying Static Code Analysis","text":"<p>Static Code Analysis should be integrated in your build process. There are many tools available for Static Code Analysis, choose the ones that meet your programming language and development techniques.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/static-code-analysis/#static-code-analysis-frameworks-and-tools","title":"Static Code Analysis Frameworks and Tools","text":"<p>SonarCloud - static code analysis with cloud-based software as a service product. OWASP Source code Analysis - OWASP recommendations for source code analysis tools</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/static-code-analysis/#conclusion","title":"Conclusion","text":"<p>Static code analysis is essential to identify potential problems and security issues in the code. It allows you to detect bugs and security issues at an early stage.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets-ado/","title":"Running <code>detect-secrets</code> in Azure DevOps Pipelines","text":""},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets-ado/#overview","title":"Overview","text":"<p>In this article, you can find information on how to integrate YELP detect-secrets into your Azure DevOps Pipeline. The proposed code can be part of the classic CI process or (preferred way) build validation for PRs before merging to the <code>main</code> branch.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets-ado/#azure-devops-pipeline","title":"Azure DevOps Pipeline","text":"<p>Proposed Azure DevOps Pipeline contains multiple steps described below:</p> <ol> <li>Set Python 3 as default</li> <li>Install detect-secrets using pip</li> <li>Run detect-secrets tool</li> <li>Publish results in the Pipeline Artifact <p>Note: It's an optional step, but for future investigation .json file with results may be helpful.</p> </li> <li>Analyzing detect-secrets results <p>Note: This step does a simple analysis of the .json file. If any secret has been detected, then break the build with exit code 1.</p> </li> </ol> <p>Note: The below example has 2 jobs: for Linux and Windows agents. You do not have to use both jobs - just adjust the pipeline to your needs.</p> <p>Note: Windows example does not use the latest version of detect-secrets. It is related to the bug in the detect-secret tool (see more in Issue#452). It is highly recommended to monitor the fix for the issue and use the latest version if possible by removing version tag <code>==1.0.3</code> in the pip install command.</p> <pre><code>trigger:\n  - none\n\njobs:\n  - job: ubuntu\n    displayName: \"detect-secrets on Ubuntu Linux agent\"\n    pool:\n      vmImage: ubuntu-latest\n    steps:\n      - task: UsePythonVersion@0\n        displayName: \"Set Python 3 as default\"\n        inputs:\n          versionSpec: \"3\"\n          addToPath: true\n          architecture: \"x64\"\n\n      - bash: pip install detect-secrets\n        displayName: \"Install detect-secrets using pip\"\n\n      - bash: |\n          detect-secrets --version\n          detect-secrets scan --all-files --force-use-all-plugins --exclude-files FETCH_HEAD &gt; $(Pipeline.Workspace)/detect-secrets.json\n        displayName: \"Run detect-secrets tool\"\n\n      - task: PublishPipelineArtifact@1\n        displayName: \"Publish results in the Pipeline Artifact\"\n        inputs:\n          targetPath: \"$(Pipeline.Workspace)/detect-secrets.json\"\n          artifact: \"detect-secrets-ubuntu\"\n          publishLocation: \"pipeline\"\n\n      - bash: |\n          dsjson=$(cat $(Pipeline.Workspace)/detect-secrets.json)\n          echo \"${dsjson}\"\n\n          count=$(echo \"${dsjson}\" | jq -c -r '.results | length')\n\n          if [ $count -gt 0 ]; then\n            msg=\"Secrets were detected in code. ${count} file(s) affected.\"\n            echo \"##vso[task.logissue type=error]${msg}\"\n            echo \"##vso[task.complete result=Failed;]${msg}.\"\n          else\n            echo \"##vso[task.complete result=Succeeded;]No secrets detected.\"\n          fi\n        displayName: \"Analyzing detect-secrets results\"\n\n  - job: windows\n    displayName: \"detect-secrets on Windows agent\"\n    pool:\n      vmImage: windows-latest\n    steps:\n      - task: UsePythonVersion@0\n        displayName: \"Set Python 3 as default\"\n        inputs:\n          versionSpec: \"3\"\n          addToPath: true\n          architecture: \"x64\"\n\n      - script: pip install detect-secrets==1.0.3\n        displayName: \"Install detect-secrets using pip\"\n\n      - script: |\n          detect-secrets --version\n          detect-secrets scan --all-files --force-use-all-plugins &gt; $(Pipeline.Workspace)/detect-secrets.json\n        displayName: \"Run detect-secrets tool\"\n\n      - task: PublishPipelineArtifact@1\n        displayName: \"Publish results in the Pipeline Artifact\"\n        inputs:\n          targetPath: \"$(Pipeline.Workspace)/detect-secrets.json\"\n          artifact: \"detect-secrets-windows\"\n          publishLocation: \"pipeline\"\n\n      - pwsh: |\n          $dsjson = Get-Content $(Pipeline.Workspace)/detect-secrets.json\n          Write-Output $dsjson\n\n          $dsObj = $dsjson | ConvertFrom-Json\n          $count = ($dsObj.results | Get-Member -MemberType NoteProperty).Count\n\n          if ($count -gt 0) {\n            $msg = \"Secrets were detected in code. $count file(s) affected. \"\n            Write-Host \"##vso[task.logissue type=error]$msg\"\n            Write-Host \"##vso[task.complete result=Failed;]$msg\"\n          }\n          else {\n            Write-Host \"##vso[task.complete result=Succeeded;]No secrets detected.\"\n          }\n        displayName: \"Analyzing detect-secrets results\"\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets/","title":"Credential Scanning Tool: <code>detect-secrets</code>","text":""},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets/#background","title":"Background","text":"<p>The <code>detect-secrets</code> tool is an open source project that uses heuristics and rules to scan for a wide range of secrets. We can extend the tool with custom rules and heuristics via a simple Python plugin API.</p> <p>Unlike other credential scanning tools, <code>detect-secrets</code> does not attempt to check a project's entire git history when invoked, but instead scans the project's current state. This means that the tool runs quickly which makes it ideal for use in continuous integration pipelines.</p> <p><code>detect-secrets</code> employs the concept of a \"baseline file\", i.e. a list of known secrets already present in the repository, and we can configure it to ignore any of these pre-existing secrets when running. This makes it easy to gradually introduce the tool into a pre-existing project.</p> <p>The baseline file also provides a simple and convenient way of handling false positives. We can white-list the false positive in the baseline file to ignore it on future invocations of the tool.</p>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets/#setup","title":"Setup","text":"<pre><code># install system dependencies: diff, jq, python3 (if on Linux-based OS)\napt-get install -y diffutils jq python3 python3-pip\n\n# install system dependencies: diff, jq, python3 (if on Windows)\nwinget install Python.Python.3\nchoco install diffutils jq -y\n\n# install the detect-secrets tool\npython3 -m pip install detect-secrets\n\n# run the tool to establish a list of known secrets\n# review this file thoroughly and check it into the repository\ndetect-secrets scan &gt; .secrets.baseline\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets/#pre-commit-hook","title":"Pre-Commit Hook","text":"<p>It is recommended to use <code>detect-secrets</code> in your development environment as a Git pre-commit hook.</p> <p>First, follow the <code>pre-commit</code> installation instructions to install the tool in your development environment.</p> <p>Then, add the following to your <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n-   repo: https://github.com/Yelp/detect-secrets\n    rev: v1.4.0\n    hooks:\n    -   id: detect-secrets\n        args: ['--baseline', '.secrets.baseline']\n</code></pre>"},{"location":"CI-CD/dev-sec-ops/secrets-management/recipes/detect-secrets/#usage-in-ci-pipelines","title":"Usage in CI Pipelines","text":"<pre><code># backup the list of known secrets\ncp .secrets.baseline .secrets.new\n\n# find all the secrets in the repository\ndetect-secrets scan --baseline .secrets.new $(find . -type f ! -name '.secrets.*' ! -path '*/.git*')\n\n# if there is any difference between the known and newly detected secrets, break the build\nlist_secrets() { jq -r '.results | keys[] as $key | \"\\($key),\\(.[$key] | .[] | .hashed_secret)\"' \"$1\" | sort; }\n\nif ! diff &lt;(list_secrets .secrets.baseline) &lt;(list_secrets .secrets.new) &gt;&amp;2; then\n  echo \"Detected new secrets in the repo\" &gt;&amp;2\n  exit 1\nfi\n</code></pre>"},{"location":"CI-CD/gitops/deploying-with-gitops/","title":"Deploying with GitOps","text":""},{"location":"CI-CD/gitops/deploying-with-gitops/#what-is-gitops","title":"What is GitOps?","text":"<p>\"GitOps is an operational framework that takes DevOps best practices used for application development such as version control, collaboration, compliance, and CI/CD, and applies them to infrastructure automation.\" See GitLab: What is GitOps?.</p>"},{"location":"CI-CD/gitops/deploying-with-gitops/#why-should-i-use-gitops","title":"Why should I use GitOps?","text":"<p>GitOps simply allows faster deployments by having git repositories in the center offering a clear audit trail via git commits and no direct environment access. Read more on Why should I use GitOps?</p> <p>The below diagram compares traditional CI/CD vs GitOps workflow: </p>"},{"location":"CI-CD/gitops/deploying-with-gitops/#tools-for-gitops","title":"Tools for GitOps","text":"<p>Some popular GitOps frameworks for Kubernetes backed by CNCF community:</p> <ul> <li>Flux V2</li> <li>Argo CD</li> <li>Rancher Fleet</li> </ul>"},{"location":"CI-CD/gitops/deploying-with-gitops/#deploying-using-gitops","title":"Deploying Using GitOps","text":"<p>GitOps with Flux v2 can be enabled in Azure Kubernetes Service (AKS) managed clusters or Azure Arc-enabled Kubernetes connected clusters as a cluster extension. After the microsoft.flux cluster extension is installed, you can create one or more fluxConfigurations resources that sync your Git repository sources to the cluster and reconcile the cluster to the desired state. With GitOps, you can use your Git repository as the source of truth for cluster configuration and application deployment.</p> <ul> <li>Tutorial: Deploy configurations using GitOps on an Azure Arc-enabled Kubernetes cluster</li> <li>Tutorial: Implement CI/CD with GitOps</li> <li>Multi-cluster and multi-tenant environment with Flux v2</li> </ul>"},{"location":"CI-CD/gitops/github-workflows/","title":"GitHub Workflows","text":"<p>A workflow is a configurable automated process made up of one or more jobs where each of these jobs can be an action in GitHub. Currently, a YAML file format is supported for defining a workflow in GitHub.</p> <p>Additional information on GitHub actions and GitHub Workflows in the links posted in the resources section below.</p>"},{"location":"CI-CD/gitops/github-workflows/#workflow-per-environment","title":"Workflow per Environment","text":"<p>The general approach is to have one pipeline, where the code is built, tested and deployed, and the artifact is then promoted to the next environment, eventually to be deployed into production.</p> <p>There are multiple ways in GitHub that an environment setup can be achieved. One way it can be done is to have one workflow for multiple environments, but the complexity increases as additional processes and jobs are added to a workflow, which does not mean it cannot be done for small pipelines. The plus point of having one workflow is that, when an artifact flows from one environment to another the state and environment values between the deployment environments can be passed easily.</p> <p></p> <p>One way to get around the complexity of a single workflow is to have separate workflows for different environments, making sure that only the artifacts created and validated are promoted from one environment to another, as well as, the workflow is small enough, to debug any issues seen in any of the workflows. In this case, the state and environment values need to be passed from one deployment environment to another. Multiple workflows also helps to keep the deployments to the environments independent thus reducing the time to deploy and find issues earlier than later in the process. Also, since the environments are independent of each other, any failures in deploying to one environment does not block deployments to other environments. One tradeoff in this method, is that with different workflows for each environment, the maintenance increases as the complexity of workflows increase over time.</p> <p></p>"},{"location":"CI-CD/gitops/github-workflows/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> <li>GitHub Workflows</li> </ul>"},{"location":"CI-CD/gitops/secret-management/","title":"Secrets Management with GitOps","text":"<p>GitOps projects have git repositories in the center that are considered a source of truth for managing both infrastructure and application. This infrastructure and application will require secured access to other resources of the system through secrets. Committing clear-text secrets into git repositories is unacceptable even if the repositories are private to your team and organization. Teams need a secure way to handle secrets when using GitOps.</p> <p>There are many ways to manage secrets with GitOps and at high level can be categorized into:</p> <ol> <li>Encrypted secrets in git repositories</li> <li>Reference to secrets stored in the external key vault</li> </ol> <p>TLDR: Referencing secrets in an external key vault is the recommended approach. It is easier to orchestrate secret rotation and more scalable with multiple clusters and/or teams.</p>"},{"location":"CI-CD/gitops/secret-management/#encrypted-secrets-in-git-repositories","title":"Encrypted Secrets in Git Repositories","text":"<p>In this approach, Developers manually encrypt secrets using a public key, and the key can only be decrypted by the custom Kubernetes controller running in the target cluster. Some popular tools for his approach are Bitnami Sealed Secrets, Mozilla SOPS</p> <p>All the secret encryption tools share the following:</p> <ul> <li>Secret changes are managed by making changes within the GitOps repository which provides great traceability</li> <li>All secrets can be rotated by making changes in GitOps, without accessing the cluster</li> <li>They support fully disconnected gitops scenarios</li> <li>Secrets are stored encrypted in the gitops repository, if the private encryption key is leaked and the attacker has access to the repo, all secrets can be decrypted</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#bitnami-sealed-secrets","title":"Bitnami Sealed Secrets","text":"<p>Sealed Secrets use asymmetric encryption to encrypt secrets. A Kubernetes controller generates a key-pair (private-public) and stores the private key in the cluster's <code>etcd</code> database as a Kubernetes secret. Developers use Kubeseal CLI to seal secrets before committing to the git repo.</p> <p>Some of the key points of using Sealed Secrets are:</p> <ul> <li>Support automatic key rotation for the private key and can be used to enforce re-encryption of secrets<ul> <li>Due to automatic renewal of the sealing key, the key needs to be prefetched from the cluster or cluster set up to store the sealing key on renewal in a secondary location</li> </ul> </li> <li>Multi-tenancy support at the namespace level can be enforced by the controller</li> <li>When sealing secrets developers need a connection to the cluster control plane to fetch the public key or the public key has to be explicitly shared with the developer</li> <li>If the private key in the cluster is lost for some reason all secrets need to be re-encrypted followed by a new key-pair generation</li> <li>Does not scale with multi-cluster, because every cluster will require a controller having its own key pair</li> <li>Can only encrypt <code>secret</code> resource type</li> <li>The\u00a0Flux\u00a0documentation has\u00a0inconsistences\u00a0in\u00a0the\u00a0Azure\u00a0Key Vault\u00a0examples</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#mozilla-sops","title":"Mozilla SOPS","text":"<p>SOPS: Secrets OPerationS is an encryption tool that supports YAML, JSON, ENV, INI, and BINARY formats and encrypts with AWS KMS, GCP KMS, Azure Key Vault, age, and PGP and is not just limited to Kubernetes. It supports integration with some common key management systems including Azure Key Vault, where one or more key management system is used to store the encryption key for encrypting secrets and not the actual secrets.</p> <p>Some of the key points of using SOPS are:</p> <ul> <li>Flux has native support for SOPS with cluster-side decryption</li> <li>Provides an added layer of security as the private key used for decryption is protected in an external key vault</li> <li>To use the Helm CLI for encryption the (Helm Secrets) plugin is needed</li> <li>Needs (KSOPS)(kustomize-sopssecretgenerator) plugin to work with Kustomization</li> <li>Does not scale with larger teams as each developer has to encrypt the secrets</li> <li>The public key is sufficient for creating brand new files. The secret key is required for decrypting and editing existing files because SOPS computes a MAC on all values.\u00a0When using the public key solely to add or remove a field, the whole file should be deleted and recreated</li> <li>Supports\u00a0several\u00a0types\u00a0of\u00a0keys\u00a0that\u00a0can\u00a0be\u00a0used\u00a0in\u00a0both\u00a0connected\u00a0and\u00a0disconnected\u00a0state.\u00a0A\u00a0secret\u00a0can\u00a0have\u00a0a\u00a0list\u00a0of\u00a0keys\u00a0and\u00a0will\u00a0try\u00a0do\u00a0decrypt\u00a0with\u00a0all\u00a0of\u00a0them.</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#reference-to-secrets-stored-in-an-external-key-vault-recommended","title":"Reference to Secrets Stored in an External Key Vault (Recommended)","text":"<p>This approach relies on a key management system like Azure Key Vault to hold the secrets and the git manifest in the repositories has reference to the key vault secrets. Developers do not perform any cryptographic operations with files in repositories. Kubernetes operators running in the target cluster are responsible for pulling the secrets from the key vault and making them available either as Kubernetes secrets or secrets volume mounted to the pod.</p> <p>All the below tools share the following:</p> <ul> <li>Secrets are not stored in the repository</li> <li>Supports Prometheus metrics for observability</li> <li>Supports sync with Kubernetes Secrets</li> <li>Supports Linux and Windows containers</li> <li>Provides enterprise-grade external secret management</li> <li>Easily scalable with multi-cluster and larger teams</li> <li>Both solutions support either Azure Active Directory (Azure AD) service principal or managed identity for authentication with the Key Vault.</li> </ul> <p>For secret rotation ideas, see Secrets Rotation on Environment Variables and Mounted Secrets</p> <p>For how to authenticate private container registries with a service principal see: Authenticated Private Container Registry</p>"},{"location":"CI-CD/gitops/secret-management/#azure-key-vault-provider-for-secrets-store-csi-driver","title":"Azure Key Vault Provider for Secrets Store CSI Driver","text":"<p>Azure Key Vault Provider (AKVP) for Kubernetes secret store CSI Driver allows you to get secret contents stored in an Azure Key Vault instance and use the Secrets Store CSI driver interface to mount them into Kubernetes pods. Mounts secrets/keys/certs to pod using a CSI Inline volume.</p> <p>Azure Key Vault Provider for Secrets Store CSI Driver install guide.</p> <p>CSI driver will need access to Azure Key Vault either through a service principal or managed identity (recommended). To make this access secure you can leverage Azure AD Workload Identity(recommended) or AAD Pod Identity. Please note AAD pod identity will soon be replaced by workload identity.</p> <p>Product Group Links provided for AKVP with SSCSID:</p> <p>1. Differences between ESO / SSCSID (GitHub Issue)   2. Secrets Management on K8S talk here (Native Secrets, Vault.io, and ESO vs. SSCSID)</p> <p>Advantages:</p> <ul> <li>Supports pod portability with the SecretProviderClass CRD</li> <li>Supports auto rotation of secrets with customizable sync intervals per cluster.</li> <li>Seems to be the MSFT choice (Secrets Store CSI driver is heavily contributed by MSFT and Kubernetes-SIG)</li> </ul> <p>Disadvantages:</p> <ul> <li>Missing disconnected scenario support: When the node is offline the SSCSID fails to fetch the secret and thus mounting the volume fails, making scaling and restarting pods not possible while being offline</li> <li>AKVP can only access Key Vault from a non-Azure environment using a service principal</li> <li>The Kubernetes Secret containing the service principal credentials need to be created as a secret in the same namespace as the application pod. If pods in multiple namespaces need to use the same SP to access Key Vault, this Kubernetes Secret needs to be created in each namespace.</li> <li>The GitOps repo must contain the name of the Key Vault within the SecretProviderClass</li> <li>Must mount secrets as volumes to allow syncing into Kubernetes Secrets</li> <li>Uses more resources (4 pods; CSI Storage driver and provider) and is a daemonset - not test on RPS / resource usage</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#external-secrets-operator-with-azure-key-vault","title":"External Secrets Operator with Azure Key Vault","text":"<p>The External Secrets Operator (ESO) is an open-sourced Kubernetes operator that can read secrets from external secret stores (e.g., Azure Key Vault) and sync those into Kubernetes Secrets. In contrast to the CSI Driver, the ESO controller creates the secrets on the cluster as K8s secrets, instead of mounting them as volumes to pods.</p> <p>Docs on using ESO Azure Key vault provider here.</p> <p>ESO will need access to Azure Key Vault either through the use of a service principal or managed identity (via Azure AD Workload Identity(recommended) or AAD Pod Identity).</p> <p>Advantages:</p> <ul> <li>Supports auto rotation of secrets with customizable sync intervals per secret.</li> <li>Components are split into different CRDs for namespace (ExternalSecret, SecretStore) and cluster-wide (ClusterSecretStore, ClusterExternalSecret) making syncing more manageable i.r.t. different deployments/pods etc.</li> <li>Service Principal secret for the (Cluster)SecretStores could placed in a namespaced that only the ESO can access (see Shared ClusterSecretStore).</li> <li>Resource efficient (single pod) - not test on RPS / resource usage.</li> <li>Open source and high contributions, (GitHub)</li> <li>Mounting Secrets as volumes is supported via K8S's APIs (see here)</li> <li>Partial disconnected scenario support: As ESO is using native K8s secrets the cluster can be offline, and it does not have any implications towards restarting and scaling pods while being offline</li> </ul> <p>Disadvantages:</p> <ul> <li>The GitOps repo must contain the name of the Key Vault within the SecretStore / ClusterSecretStore or a ConfigMap linking to it</li> <li>Must create secrets as K8s secrets</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#resources","title":"Resources","text":"<ul> <li>Sealed Secrets with Flux v2</li> <li>Mozilla SOPS with Flux v2</li> <li>Secret Management with Argo CD</li> <li>Secret management Workflow</li> </ul>"},{"location":"CI-CD/gitops/secret-management/#appendix","title":"Appendix","text":""},{"location":"CI-CD/gitops/secret-management/#authenticated-private-container-registry","title":"Authenticated Private Container Registry","text":"<p>An option on how to authenticate private container registries (e.g., ACR):</p> <ol> <li>Use a <code>dockerconfigjson</code> Kubernetes Secret on Pod-Level with <code>ImagePullSecret</code> (This can be also defined on namespace-level)</li> </ol>"},{"location":"CI-CD/gitops/secret-management/azure-devops-secret-management-per-branch/","title":"Azure DevOps: Managing Settings on a Per-Branch Basis","text":"<p>When using Azure DevOps Pipelines for CI/CD, it's convenient to leverage the built-in pipeline variables for secrets management, but using pipeline variables for secrets management has its disadvantages:</p> <ul> <li>Pipeline variables are managed outside the code that references them. This makes it easy to introduce drift between the source code and the secrets, e.g. adding a reference to a new secret in code but forgetting to add it to the pipeline variables (leads to confusing build breaks), or deleting a reference to a secret in code and forgetting to remote it from the pipeline variables (leads to confusing pipeline variables).</li> </ul> <ul> <li>Pipeline variables are global shared state. This can lead to confusing situations and hard to debug problems when developers make concurrent changes to the pipeline variables which may override each other. Having a single global set of pipeline variables also makes it impossible for secrets to vary per environment (e.g. when using a branch-based deployment model where 'master' deploys using the production secrets, 'development' deploys using the staging secrets, and so forth).</li> </ul> <p>A solution to these limitations is to manage secrets in the Git repository jointly with the project's source code. As described in secrets management, don't check secrets into the repository in plain text. Instead we can add an encrypted version of our secrets to the repository and enable our CI/CD agents and developers to decrypt the secrets for local usage with some pre-shared key. This gives us the best of both worlds: a secure storage for secrets as well as side-by-side management of secrets and code.</p> <pre><code># first, make sure that we never commit our plain text secrets and generate a strong encryption key\necho \".env\" &gt;&gt; .gitignore\nENCRYPTION_KEY=\"$(LC_ALL=C &lt; /dev/urandom tr -dc '_A-Z-a-z-0-9' | head -c128)\"\n\n# now let's add some secret to our .env file\necho \"MY_SECRET=...\" &gt;&gt; .env\n\n# also update our secrets documentation file\ncat &gt;&gt; .env.template &lt;&lt;&lt; \"\n# enter description of your secret here\nMY_SECRET=\n\"\n\n# next, encrypt the plain text secrets; the resulting .env.enc file can safely be committed to the repository\necho \"${ENCRYPTION_KEY}\" | openssl enc -aes-256-cbc -md sha512 -pass stdin -in .env -out .env.enc\ngit add .env.enc .env.template\ngit commit -m \"Update secrets\"\n</code></pre> <p>When running the CI/CD, the build server can now access the secrets by decrypting them. E.g. for Azure DevOps, configure <code>ENCRYPTION_KEY</code> as a secret pipeline variable and then add the following step to <code>azure-pipelines.yml</code>:</p> <pre><code>steps:\n  - script: echo \"$(ENCRYPTION_KEY)\" | openssl enc -aes-256-cbc -md sha512 -pass stdin -in .env.enc -out .env -d\n    displayName: Decrypt secrets\n</code></pre> <p>You can also use variable groups linked directly to Azure key vault for your pipelines to manage all secrets in one location.</p>"},{"location":"CI-CD/gitops/secret-management/secret-rotation-in-pods/","title":"Secrets Rotation of Environment Variables and Mounted Secrets in Pods","text":"<p>This document covers some ways you can do secret rotation with environment variables and mounted secrets in Kubernetes pods</p>"},{"location":"CI-CD/gitops/secret-management/secret-rotation-in-pods/#mapping-secrets-via-secretkeyref-with-environment-variables","title":"Mapping Secrets via secretKeyRef with Environment Variables","text":"<p>If we map a K8s native secret via a <code>secretKeyRef</code> into an environment variable and we rotate keys the environment variable is not updated even though the K8s native secret has been updated. We need to restart the Pod so changes get populated. Reloader solves this issue with a K8S controller.</p> <pre><code>...\n    env:\n        - name: EVENTHUB_CONNECTION_STRING\n          valueFrom:\n            secretKeyRef:\n              name: poc-creds\n              key: EventhubConnectionString\n...\n</code></pre>"},{"location":"CI-CD/gitops/secret-management/secret-rotation-in-pods/#mapping-secrets-via-volumemounts-eso-way","title":"Mapping Secrets via volumeMounts (ESO Way)","text":"<p>If we map a K8s native secret via a volume mount and we rotate keys the file gets updated. The application needs to then be able pick up the changes without a restart (requiring most likely custom logic in the application to support this). Then no restart of the application is required.</p> <pre><code>...\n    volumeMounts:\n    - name: mounted-secret\n      mountPath: /mnt/secrets-store\n      readOnly: true\n  volumes:\n  - name: mounted-secret\n    secret:\n      secretName: poc-creds\n...\n</code></pre>"},{"location":"CI-CD/gitops/secret-management/secret-rotation-in-pods/#mapping-secrets-via-volumemounts-akvp-sscsid-way","title":"Mapping Secrets via volumeMounts (AKVP SSCSID Way)","text":"<p>SSCSID focuses on mounting external secrets into the CSI. Thus if we rotate keys the file gets updated. The application needs to then be able pick up the changes without a restart (requiring most likely custom logic in the application to support this). Then no restart of the application is required.</p> <pre><code>...\n    volumeMounts:\n    - name: app-secrets-store-inline\n      mountPath: \"/mnt/app-secrets-store\"\n      readOnly: true\n  volumes:\n  - name: app-secrets-store-inline\n    csi:\n      driver: secrets-store.csi.k8s.io\n      readOnly: true\n      volumeAttributes:\n        secretProviderClass: akvp-app\n      nodePublishSecretRef:\n        name: secrets-store-sp-creds\n...\n</code></pre>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/","title":"Continuous Delivery on Low-Code and No-Code Solutions","text":"<p>Low-code and no-code platforms have taken a spot in a wide variety of Business Solutions involving process automation, AI models, Bots, Business Applications and Business Intelligence. The scenarios enabled by these platforms are constantly evolving and opening a spot for productive roles. This has been exactly the reason why bringing more professional tools to their development have become necessary such as controlled and automated delivery.</p> <p>In the case of Power Platform products, the adoption of a CI/CD process may seem to increase the development complexity to a solution oriented to Citizen Developers it is more important to make the development process more scalable and capable of dealing with new features and bug corrections in a faster way.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#environments-in-power-platform-solutions","title":"Environments in Power Platform Solutions","text":"<p>Environments are spaces where Power Platform Solutions exists. They store, manage and share everything related to the solution like data, apps, chat bots, flows and models. They also serve as containers to separate apps that might have different roles, security requirements or just target audiences. They can be used to create different stages of the solution development process, the expected model of working with environments in a CI/CD process will be as the following image suggests.</p> <p></p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#environments-considerations","title":"Environments Considerations","text":"<p>Whenever an environment has been created, its resources can be only accessed by users within the same tenant which is an Azure Active Directory tenant in fact. When you create an app in an environment that app can only interact with data sources that are also deployed in that same environment, this includes connections, flows and Dataverse databases. This is an important consideration when dealing with a CD process.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#deployment-strategy","title":"Deployment Strategy","text":"<p>With three environments already created to represent the stages of the deployment, the goal now is to automate the deployment from one environment to another. Each environment will require the creation of its own solution: business logic and data.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#step-1","title":"Step 1","text":"<p>Development team will be working in a Dev environment. These environments according to the team could be one for the team or one for each developer.</p> <p>Once changes have been made, the first step will be packaging the solution and export it into source control.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#step-2","title":"Step 2","text":"<p>Second step is about the solution, you need to have a managed solution to deploy to other environments such as Stage or Production so now you should use a JIT environment where you would import your unmanaged solution and export them as managed. These solution files won't be checked into source control but will be stored as a build artifact in the pipeline making them available to be deployed in the release pipeline. This is where the second environment will be used. This second environment will be responsible of receiving the output managed solution coming from the artifact.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#step-3","title":"Step 3","text":"<p>Third and final step will import the solution into the production environment, this means that this stage will take the artifact from last step and will export it. When working in this environment you can also version your product in order to make a better trace of the product.</p>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#tools","title":"Tools","text":"<p>Most used tools to get this process completed are:</p> <ul> <li>Power Platform Build Tools</li> <li>There is also a non graphical tool that could be used to work with this CD process. The Power CLI tool.</li> </ul>"},{"location":"CI-CD/recipes/cd-on-low-code-solutions/#resources","title":"Resources","text":"<p>Application lifecycle management with Microsoft Power Platform</p>"},{"location":"CI-CD/recipes/ci-pipeline-for-better-documentation/","title":"CI Pipeline for Better Documentation","text":""},{"location":"CI-CD/recipes/ci-pipeline-for-better-documentation/#introduction","title":"Introduction","text":"<p>Most projects start with spikes, where developers and analysts produce lots of documentation.</p> <p>Sometimes, these documents don't have a standard and each team member writes them accordingly with their preference. Add to that the time a reviewer will spend confirming grammar, searching for typos or non-inclusive language.</p> <p>This pipeline helps address that!</p>"},{"location":"CI-CD/recipes/ci-pipeline-for-better-documentation/#the-pipeline","title":"The Pipeline","text":"<p>The pipeline uses the following <code>npm</code> modules:</p> <ul> <li>markdownlint: add standardization using rules</li> <li>lychee: check the links in the documentation and report broken ones</li> <li>write-good: linter for English prose</li> </ul> <p>We have been using this pipeline for more than one year in different engagements and always received great feedback from the customers!</p>"},{"location":"CI-CD/recipes/ci-pipeline-for-better-documentation/#how-does-it-work","title":"How Does it Work","text":"<p>To start using this pipeline:</p> <ol> <li>Download the files from this repository</li> <li>Unzip the folders and files to your repository root if the repository is empty     - if it's not brand new, copy the files and make the required adjustments:         - check <code>.azdo</code> so it matches your repository standard         - check <code>package.json</code> so you don't overwrite one you already have in the process. Also update the file if you changed           the name of the <code>.azdo</code> folder.</li> <li>Create the pipeline in Azure DevOps or GitHub</li> </ol>"},{"location":"CI-CD/recipes/ci-pipeline-for-better-documentation/#resources","title":"Resources","text":"<p>Markdown Code Reviews in the Engineering Fundamentals Playbook</p>"},{"location":"CI-CD/recipes/ci-with-jupyter-notebooks/","title":"CI with Jupyter Notebooks","text":"<p>As Azure DevOps doesn't allow code reviewers to comment directly in Jupyter Notebooks, Data Scientists(DSs) have to convert the notebooks to scripts before they commit and push these files to the repository.</p> <p>This document aims to automate this process in Azure DevOps, so the DSs don't need to execute anything locally.</p>"},{"location":"CI-CD/recipes/ci-with-jupyter-notebooks/#problem-statement","title":"Problem Statement","text":"<p>A Data Science repository has this folder structure:</p> <pre><code>    .\n    \u251c\u2500\u2500 notebooks\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 00.ipynb\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 01.ipynb\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 02.ipynb\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 03.ipynb\n    \u2514\u2500\u2500 scripts\n    \u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 00.py\n    \u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 01.py\n    \u00a0\u00a0 \u251c\u2500\u2500 Machine Learning Experiments - 02.py\n    \u00a0\u00a0 \u2514\u2500\u2500 Machine Learning Experiments - 03.py\n</code></pre> <p>The python files are needed to allow Pull Request reviewers to add comments to the notebooks, they can add comments to the Python scripts and we apply these comments to the notebooks.</p> <p>Since we have to run this process manually before we add files to a commit, this manual process is error prone, e.g. If we create a notebook, generate the script from it, but later make some changes and forget to generate a new script for the changes.</p>"},{"location":"CI-CD/recipes/ci-with-jupyter-notebooks/#solution","title":"Solution","text":"<p>One way to avoid this is to create the scripts in the repository from the commit. This document will describe this process.</p> <p>We can add a pipeline with the following steps to the repository to run in <code>ipynb</code> files:</p> <ol> <li>Go to the Project Settings -&gt; Repositories -&gt; Security -&gt; User Permissions</li> <li>Add the Build Service in Users the permission to Contribute </li> <li>Create a new pipeline.</li> </ol> <p>In the newly created pipeline we add:</p> <ol> <li> <p>Trigger to run on ipynb files:</p> <pre><code>trigger:\n  paths:\n  include:\n    - '*.ipynb'\n    - '**/*.ipynb'\n</code></pre> </li> <li> <p>Select the pool as Linux:</p> <pre><code>pool:\n  vmImage: ubuntu-latest\n</code></pre> </li> <li> <p>Set the directory where we want to store the scripts:</p> <pre><code>variables:\n  REPO_URL: # Azure DevOps URL in the format: dev.azure.com/&lt;Organization&gt;/&lt;Project&gt;/_git/&lt;RepoName&gt;\n</code></pre> </li> <li> <p>Now we will start the core of the pipeline:     1. Upgrade pip</p> <pre><code>- script: |\n    python -m pip install --upgrade pip\n  displayName: 'Upgrade pip'\n</code></pre> <p>1. Install <code>nbconvert</code> and <code>ipython</code>:</p> <pre><code>- script: |\n    pip install nbconvert ipython\n  displayName: 'install nbconvert &amp; ipython'\n</code></pre> <p>1. Install <code>pandoc</code>:</p> <pre><code>- script: |\n    sudo apt install -y pandoc\n  displayName: \"Install pandoc\"\n</code></pre> <p>1. Find the notebook files (<code>ipynb</code>) in the last commit to the repo and convert it to scripts (<code>py</code>):</p> <pre><code>- task: Bash@3\n    inputs:\n      targetType: 'inline'\n      script: |\n        IPYNB_PATH=($(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion) | grep '[.]ipynb$'))\n        echo $IPYNB_PATH\n        [ -z \"$IPYNB_PATH\" ] &amp;&amp; echo \"Nothing to convert\" || jupyter nbconvert --to script $IPYNB_PATH\n    displayName: \"Convert Notebook to script\"\n</code></pre> <p>1. Commit these changes to the repository:</p> <pre><code>- bash: |\n    git config --global user.email \"build@dev.azure.com\"\n    git config --global user.name \"build\"\n    git add .\n    git commit -m 'Convert Jupyter notebooks' || echo \"No changes to commit\" &amp;&amp; NO_CHANGES=1\n    [ -z \"$NO_CHANGES\" ] || git push https://$(System.AccessToken)@$(REPO_URL) HEAD:$(Build.SourceBranchName)\n  displayName: \"Commit notebook to repository\"\n</code></pre> </li> </ol> <p>Now we have a pipeline that will generate the scripts as we commit our notebooks.</p>"},{"location":"CI-CD/recipes/inclusive-linting/","title":"Inclusive Linting","text":"<p>As software professionals we should strive to promote an inclusive work environment, which naturally extends to the code and documentation we write. It's important to keep the use of inclusive language consistent across an entire project or repository.</p> <p>To achieve this, we recommend using a text file analysis tool such as an inclusive linter and including this as a step in your CI pipelines.</p>"},{"location":"CI-CD/recipes/inclusive-linting/#what-to-lint-for","title":"What to Lint for","text":"<p>The primary goal of an inclusive linter is to flag any occurrences of non-inclusive language within source code (and optionally suggest some alternatives). Non-inclusive words or phrases in a project can be found anywhere from comments and documentation to variable names.</p> <p>An inclusive linter may include its own dictionary of \"default\" non-inclusive words and phrases to run against as a good starting point. These tools can also be customizable, oftentimes offering the ability to omit some terms and/or add your own.</p> <p>The ability to add additional terms to your linter has the added benefit of enabling linting of sensitive language on top of inclusive linting. This can prevent things such as customer names or other non-public information from making it into your git history, for instance.</p>"},{"location":"CI-CD/recipes/inclusive-linting/#getting-started-with-an-inclusive-linter","title":"Getting Started with an Inclusive Linter","text":""},{"location":"CI-CD/recipes/inclusive-linting/#woke","title":"woke","text":"<p>One inclusive linter we recommend is <code>woke</code>. It is a language-agnostic CLI tool that detects non-inclusive language in your source code and recommends alternatives. While <code>woke</code> automatically applies a default ruleset with non-inclusive terms to lint for, you can also apply a custom rule config (via a yaml file) with additional terms to lint for.</p> <p>Running the tool locally on a file or directory is relatively straightforward:</p> <pre><code>$ woke test.txt\n\ntest.txt:2:2-6: `guys` may be insensitive, use `folks`, `people` instead (warning)\n* guys\n  ^\n</code></pre> <p><code>woke</code> can be run locally on your machine or CI/CD system via CLI and is also available as a two GitHub Actions:</p> <ul> <li>Run woke</li> <li>Run woke with Reviewdog</li> </ul> <p>To use the standard \"Run woke\" GitHub Action with the default ruleset in a CI pipeline:</p> <ol> <li> <p>Add the <code>woke</code> action as a step in your project's CI pipeline yaml:</p> <pre><code>name: ci\non:\n  - pull_request\njobs:\n  woke:\n    name: woke\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: woke\n        uses: get-woke/woke-action@v0\n        with:\n          # Cause the check to fail on any broke rules\n          fail-on-error: true\n</code></pre> </li> <li> <p>Run your pipeline</p> </li> <li>View the output in the \"Actions\" tab in the main repository view</li> </ol>"},{"location":"CI-CD/recipes/inclusive-linting/#resources","title":"Resources","text":"<ul> <li>woke</li> <li>default ruleset</li> <li>example.yaml</li> <li>Run woke</li> <li>Run woke with reviewdog</li> <li>docs</li> </ul>"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/","title":"Reusing Dev Containers Within a Pipeline","text":"<p>Given a repository with a local development container a.k.a. dev container that contains all the tooling required for development, would it make sense to reuse that container for running the tooling in the Continuous Integration pipelines?</p>"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/#options-for-building-dev-containers-within-a-pipeline","title":"Options for Building Dev Containers Within a Pipeline","text":"<p>There are three ways to build devcontainers within pipeline:</p> <ul> <li>With GitHub - devcontainers/ci builds the container with the <code>devcontainer.json</code>. Example here: devcontainers/ci \u00b7 Getting Started.</li> <li>With GitHub - devcontainers/cli, which is the same as the above, but using the underlying CLI directly without tasks.</li> <li>Building the <code>DockerFile</code> with <code>docker build</code>. This option excludes all configuration/features specified within the <code>devcontainer.json</code>.</li> </ul>"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/#considered-options","title":"Considered Options","text":"<ul> <li>Run CI pipelines in the native environment</li> <li>Run CI pipelines in the dev container via building image locally</li> <li>Run CI pipelines in the dev container with a container registry</li> </ul> <p>Here are below pros and cons for both approaches:</p>"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/#run-ci-pipelines-in-the-native-environment","title":"Run CI Pipelines in the Native Environment","text":"Pros Cons Can use any pipeline tasks available Need to keep two sets of tooling and their versions in sync No container registry Can take some time to start, based on tools/dependencies required Agent will always be up to date with security patches The dev container should always be built within each run of the CI pipeline, to verify the changes within the branch haven't broken anything"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/#run-ci-pipelines-in-the-dev-container-without-image-caching","title":"Run CI Pipelines in the Dev Container Without Image Caching","text":"Pros Cons Utilities scripts will work out of the box Need to rebuild the container for each run, given that there may be changes within the branch being built Rules used (for linting or unit tests) will be the same on the CI Not everything in the container is needed for the CI pipeline\u00b9 No surprise for the developers, local outputs (of linting for instance) will be the same in the CI Some pipeline tasks will not be available All tooling and their versions defined in a single place Building the image for each pipeline run is slow\u00b2 Tools/dependencies are already present The dev container is being tested to include all new tooling in addition to not being broken <p>\u00b9: container size can be reduced by exporting the layer that contains only the tooling needed for the CI pipeline</p> <p>\u00b2: could be mitigated via adding image caching without using a container registry</p>"},{"location":"CI-CD/recipes/reusing-devcontainers-within-a-pipeline/#run-ci-pipelines-in-the-dev-container-with-image-registry","title":"Run CI Pipelines in the Dev Container with Image Registry","text":"Pros Cons Utilities scripts will work out of the box Need to rebuild the container for each run, given that there may be changes within the branch being built No surprise for the developers, local outputs (of linting for instance) will be the same in the CI Not everything in the container is needed for the CI pipeline\u00b9 Rules used (for linting or unit tests) will be the same on the CI Some pipeline tasks will not be available\u00b2 All tooling and their versions defined in a single place Require access to a container registry to host the container within the pipeline\u00b3 Tools/dependencies are already present The dev container is being tested to include all new tooling in addition to not being broken Publishing the container built from <code>devcontainer.json</code> allows you to reference it in the cacheFrom in <code>devcontainer.json</code> (see docs). By doing this, VS Code will use the published image as a layer cache when building <p>\u00b9: container size can be reduces by exporting the layer that contains only the tooling needed for the CI pipeline. This would require building the image without tasks</p> <p>\u00b2: using container jobs in AzDO you can use all tasks (as far as I can tell). Reference: Dockerizing DevOps V2 - AzDO container jobs - DEV Community</p> <p>\u00b3: within GH actions, the default Github Actions token can be used for accessing GHCR without setting up separate registry, see the example below. Note: This does not build the <code>Dockerfile</code> together with the <code>devcontainer.json</code></p> <pre><code>\u00a0\u00a0\u00a0 - uses: whoan/docker-build-with-cache-action@v5\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 id: cache\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 with:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 username: $GITHUB_ACTOR\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 password: \"${{ secrets.GITHUB_TOKEN }}\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 registry: docker.pkg.github.com\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 image_name: devcontainer\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dockerfile: .devcontainer/Dockerfile\n</code></pre>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/","title":"Runtime Variables in GitHub Actions","text":""},{"location":"CI-CD/recipes/github-actions/runtime-variables/#objective","title":"Objective","text":"<p>While GitHub Actions is a popular choice for writing and running CI/CD pipelines, especially for open source projects hosted on GitHub, it lacks specific quality of life features found in other CI/CD environments. One key feature that GitHub Actions has not yet implemented is the ability to mock and inject runtime variables into a workflow, in order to test the pipeline itself.</p> <p>This provides a bridge between a pre-existing feature in Azure DevOps, and one that has not yet released inside GitHub Actions.</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#target-audience","title":"Target Audience","text":"<p>This guide assumes that you are familiar with CI/CD, and understand the security implications of CI/CD pipelines. We also assume basic knowledge with GitHub Actions, including how to write and run a basic CI/CD pipeline, checkout repositories inside the action, use Marketplace Actions with version control, etc.</p> <p>We assume that you, as a CI/CD engineer, want to inject environment variables or environment flags into your pipelines and workflows in order to test them, and are using GitHub Actions to accomplish this.</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#usage-scenario","title":"Usage Scenario","text":"<p>Many integration or end-to-end workflows require specific environment variables that are only available at runtime. For example, a workflow might be doing the following:</p> <p></p> <p>In this situation, testing the pipeline is extremely difficult without having to make external calls to the resource. In many cases, making external calls to the resource can be expensive or time-consuming, significantly slowing down inner loop development.</p> <p>Azure DevOps, as an example, offers a way to define pipeline variables on a manual trigger:</p> <p></p> <p>GitHub Actions does not do so yet.</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#solution","title":"Solution","text":"<p>To workaround this, the easiest solution is to add runtime variables to either commit messages or the PR Body, and <code>grep</code> for the variable. GitHub Actions provides <code>grep</code> functionality natively using a <code>contains</code> function, which is what we shall be specifically using.</p> <p>In scope:</p> <ul> <li>We will scope this to injecting a single environment variable into a pipeline, with a previously known key and value.</li> </ul> <p>Out of Scope:</p> <ul> <li>While the solution is obviously extensible using shell scripting or any other means of creating variables, this solution serves well as the proof of the basic concept. No such scripting is provided in this guide.</li> <li>Additionally, teams may wish to formalize this process using a PR Template that has an additional section for the variables being provided. This is not however included in this guide.</li> </ul> <p>Security Warning: This is NOT for injecting secrets as the commit messages and PR body can be retrieved by a third party, are stored in <code>git log</code>, and can otherwise be read by a malicious individual using a variety of tools. Rather, this is for testing a workflow that needs simple variables to be injected into it, as above. If you need to retrieve secrets or sensitive information, use the GitHub Action for Azure Key Vault or some other similar secret storage and retrieval service.</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#commit-message-variables","title":"Commit Message Variables","text":"<p>How to inject a single variable into the environment for use, with a specified key and value. In this example, the key is <code>COMMIT_VAR</code> and the value is <code>[commit var]</code>.</p> <p>Pre-requisites:</p> <ul> <li>Pipeline triggers are correctly set up to trigger on pushed commits (Here we will use <code>actions-test-branch</code> as the branch of choice)</li> </ul> <p>Code Snippet:</p> <pre><code>on:\n  push:\n    branches:\n      - actions-test-branch\n\njobs:\n  Echo-On-Commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout Repository\"\n        uses: actions/checkout@v2\n\n      - name: \"Set flag from Commit\"\n        env:\n          COMMIT_VAR: ${{ contains(github.event.head_commit.message, '[commit var]') }}\n        run: |\n          if ${COMMIT_VAR} == true; then\n            echo \"flag=true\" &gt;&gt; $GITHUB_ENV\n            echo \"flag set to true\"\n          else\n            echo \"flag=false\" &gt;&gt; $GITHUB_ENV\n            echo \"flag set to false\"\n          fi\n\n      - name: \"Use flag if true\"\n        if: env.flag\n        run: echo \"Flag is available and true\"\n</code></pre> <p>Code Explanation:</p> <p>The first part of the code is setting up Push triggers on the working branch and checking out the repository, so we will not explore that in detail.</p> <pre><code>- name: \"Set flag from Commit\"\n  env:\n    COMMIT_VAR: ${{ contains(github.event.head_commit.message, '[commit var]') }}\n</code></pre> <p>This is a named step inside the only Job in our GitHub Actions pipeline. Here, we set an environment variable for the step: Any code or action that the step calls will now have the environment variable available.</p> <p><code>contains</code> is a GitHub Actions function that is available by default in all workflows. It returns a Boolean <code>true</code> or <code>false</code> value. In this situation, it checks to see if the commit message on the last push, accessed using <code>github.event.head_commit.message</code>. The <code>${{...}}</code> is necessary to use the GitHub Context and make the functions and <code>github.event</code> variables available for the command.</p> <pre><code>run: |\n  if ${COMMIT_VAR} == true; then\n    echo \"flag=true\" &gt;&gt; $GITHUB_ENV\n    echo \"flag set to true\"\n  else\n    echo \"flag=false\" &gt;&gt; $GITHUB_ENV\n    echo \"flag set to false\"\n  fi\n</code></pre> <p>The <code>run</code> command here checks to see if the <code>COMMIT_VAR</code> variable has been set to <code>true</code>, and if it has, it sets a secondary flag to true, and echoes this behavior. It does the same if the variable is <code>false</code>.</p> <p>The specific reason to do this is to allow for the <code>flag</code> variable to be used in further steps instead of having to reuse the <code>COMMIT_VAR</code> in every step. Further, it allows for the flag to be used in the <code>if</code> step of an action, as in the next part of the snippet.</p> <pre><code>- name: \"Use flag if true\"\n  if: env.flag\n  run: echo \"Flag is available and true\"\n</code></pre> <p>In this part of the snippet, the next step in the same job is now using the <code>flag</code> that was set in the previous step. This allows the user to:</p> <ol> <li>Reuse the flag instead of repeatedly accessing the GitHub Context</li> <li>Set the flag using multiple conditions, instead of just one. For example, a different step might ALSO set the flag to <code>true</code> or <code>false</code> for different reasons.</li> <li>Change the variable in exactly one place instead of having to change it in multiple places</li> </ol> <p>Shorter Alternative:</p> <p>The \"Set flag from commit\" step can be simplified to the following in order to make the code much shorter, although not necessarily more readable:</p> <pre><code>- name: \"Set flag from Commit\"\n  env:\n    COMMIT_VAR: ${{ contains(github.event.head_commit.message, '[commit var]') }}\n  run: |\n    echo \"flag=${COMMIT_VAR}\" &gt;&gt; $GITHUB_ENV\n    echo \"set flag to ${COMMIT_VAR}\"\n</code></pre> <p>Usage:</p> <p>Including the Variable</p> <ol> <li> <p>Push to branch <code>master</code>:</p> <pre><code>&gt; git add.\n&gt; git commit -m \"Running GitHub Actions Test [commit var]\"\n&gt; git push\n</code></pre> </li> <li> <p>This triggers the workflow (as will any push). As the <code>[commit var]</code> is in the commit message, the <code>${COMMIT_VAR}</code> variable in the workflow will be set to <code>true</code> and result in the following:</p> <p></p> </li> </ol> <p>Not Including the Variable</p> <ol> <li> <p>Push to branch <code>master</code>:</p> <pre><code>&gt; git add.\n&gt; git commit -m \"Running GitHub Actions Test\"\n&gt; git push\n</code></pre> </li> <li> <p>This triggers the workflow (as will any push). As the <code>[commit var]</code> is not in the commit message, the <code>${COMMIT_VAR}</code> variable in the workflow will be set to <code>false</code> and result in the following:</p> <p></p> </li> </ol>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#pr-body-variables","title":"PR Body Variables","text":"<p>When a PR is made, the PR Body can also be used to set up variables. These variables can be made available to all the workflow runs that stem from that PR, which can help ensure that commit messages are more informative and less cluttered, and reduces the work on the developer.</p> <p>Once again, this for an expected key and value. In this case, the key is <code>PR_VAR</code> and the value is <code>[pr var]</code>.</p> <p>Pre-requisites:</p> <ul> <li>Pipeline triggers are correctly set up to trigger on a pull request into a specific branch. (Here we will use master as the destination branch.)</li> </ul> <p>Code Snippet:</p> <pre><code>on:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  Echo-On-PR:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout Repository\"\n        uses: actions/checkout@v2\n\n      - name: \"Set flag from PR\"\n        env:\n          PR_VAR: ${{ contains(github.event.pull_request.body, '[pr var]') }}\n        run: |\n          if ${PR_VAR} == true; then\n            echo \"flag=true\" &gt;&gt; $GITHUB_ENV\n            echo \"flag set to true\"\n          else\n            echo \"flag=false\" &gt;&gt; $GITHUB_ENV\n            echo \"flag set to false\"\n          fi\n\n      - name: \"Use flag if true\"\n        if: env.flag\n        run: echo \"Flag is available and true\"\n</code></pre> <p>Code Explanation:</p> <p>The first part of the YAML file simply sets up the Pull Request Trigger. The majority of the following code is identical, so we will only explain the differences.</p> <pre><code>- name: \"Set flag from PR\"\n  env:\n    PR_VAR: ${{ contains(github.event.pull_request.body, '[pr var]') }}\n</code></pre> <p>In this section, the <code>PR_VAR</code> environment variable is set to <code>true</code> or <code>false</code> depending on whether the <code>[pr var]</code> string is in the PR Body.</p> <p>Shorter Alternative:</p> <p>Similarly to the above, the YAML step can be simplified to the following in order to make the code much shorter, although not necessarily more readable:</p> <pre><code>- name: \"Set flag from PR\"\n  env:\n    PR_VAR: ${{ contains(github.event.pull_request.body, '[pr var]') }}\n  run: |\n  echo \"flag=${PR_VAR}\" &gt;&gt; $GITHUB_ENV\n  echo \"set flag to ${PR_VAR}\"\n</code></pre> <p>Usage:</p> <ol> <li> <p>Create a Pull Request into <code>master</code>, and include the expected variable in the body somewhere:</p> <p></p> </li> <li> <p>The GitHub Action will trigger automatically, and since <code>[pr var]</code> is present in the PR Body, it will set the <code>flag</code> to true, as shown below:</p> <p></p> </li> </ol>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#real-world-scenarios","title":"Real World Scenarios","text":"<p>There are many real world scenarios where controlling environment variables can be extremely useful. Some are outlined below:</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#avoiding-expensive-external-calls","title":"Avoiding Expensive External Calls","text":"<p>Developer A is in the process of writing and testing an integration pipeline. The integration pipeline needs to make a call to an external service such as Azure Data Factory or Databricks, wait for a result, and then echo that result. The workflow could look like this:</p> <p></p> <p>The workflow inherently takes time and is expensive to run, as it involves maintaining a Databricks cluster while also waiting for the response. This external dependency can be removed by essentially mocking the response for the duration of writing and testing other parts of the workflow, and mocking the response in situations where the actual response either does not matter, or is not being directly tested.</p>"},{"location":"CI-CD/recipes/github-actions/runtime-variables/#skipping-long-ci-processes","title":"Skipping Long CI processes","text":"<p>Developer B is in the process of writing and testing a CI/CD pipeline. The pipeline has multiple CI stages, each of which runs sequentially. The workflow might look like this:</p> <p></p> <p>In this case, each CI stage needs to run before the next one starts, and errors in the middle of the process can cause the entire pipeline to fail. While this might be intended behavior for the pipeline in some situations (Perhaps you don't want to run a more involved, longer build or run a time-consuming test coverage suite if the CI process is failing), it means that steps need to be commented out or deleted when testing the pipeline itself.</p> <p>Instead, an additional step could check for a <code>[skip ci $N]</code> tag in either the commit messages or PR Body, and skip a specific stage of the CI build. This ensures that the final pipeline does not have changes committed to it that render it broken, as sometimes happens when commenting out/deleting steps. It additionally allows for a mechanism to repeatedly test individual steps by skipping the others, making developing the pipeline significantly easier.</p>"},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/","title":"Save Terraform Output to a Variable Group (Azure DevOps)","text":"<p>This recipe applies only to terraform usage with Azure DevOps. It assumes your familiar with terraform commands and Azure Pipelines.</p>"},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#context","title":"Context","text":"<p>When terraform is used to automate the provisioning of the infrastructure, an Azure Pipeline is generally dedicated to apply terraform configuration files. It will create, update, delete Azure resources to provision your infrastructure changes.</p> <p>Once files are applied, some Output Values (for instance resource group name, app service name) can be referenced and outputted by terraform. These values must be generally retrieved afterwards, used as input variables for the deployment of services happening in separate pipelines.</p> <pre><code>output \"core_resource_group_name\" {\n  description = \"The resource group name\"\n  value       = module.core.resource_group_name\n}\n\noutput \"core_key_vault_name\" {\n  description = \"The key vault name.\"\n  value       = module.core.key_vault_name\n}\n\noutput \"core_key_vault_url\" {\n  description = \"The key vault url.\"\n  value       = module.core.key_vault_url\n}\n</code></pre> <p>The purpose of this recipe is to answer the following statement: How to make terraform output values available across multiple pipelines ?</p>"},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#solution","title":"Solution","text":"<p>One suggested solution is to store outputted values in the Library with a Variable Group. Variable groups is a convenient way store values you might want to be passed into a YAML pipeline. In addition, all assets defined in the Library share a common security model. You can control who can define new items in a library, and who can use an existing item.</p> <p>For this purpose, we are using the following commands:</p> <ul> <li>terraform output to extract the value of an output variable from the state file (provided by Terraform CLI)</li> <li>az pipelines variable-group to manage variable groups (provided by Azure DevOps CLI)</li> </ul> <p>You can use the following script once <code>terraform apply</code> is completed to create/update the variable group.</p>"},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#script-update-variablegroupsh","title":"Script (update-variablegroup.sh)","text":""},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#parameters","title":"Parameters","text":"Name Description DEVOPS_ORGANIZATION The URI of the Azure DevOps organization. DEVOPS_PROJECT The name or id of the Azure DevOps project. GROUP_NAME The name of the variable group targeted. <p>Implementation choices:</p> <ul> <li>If a variable group already exists, a valid option could be to delete and rebuild the group from scratch. However, as authorization could have been updated at the group level, we prefer to avoid this option. The script remove instead all variables in the targeted group and add them back with latest values. Permissions are not impacted.</li> <li>A variable group cannot be empty. It must contains at least one variable. A temporary uuid value is created to mitigate this issue, and removed once variables are updated.</li> </ul> <pre><code>#!/bin/bash\n\nset -e\n\nexport DEVOPS_ORGANIZATION=$1\nexport DEVOPS_PROJECT=$2\nexport GROUP_NAME=$3\n\n# configure the azure devops cli\naz devops configure --defaults organization=${DEVOPS_ORGANIZATION} project=${DEVOPS_PROJECT} --use-git-aliases true\n\n# get the variable group id (if already exists)\ngroup_id=$(az pipelines variable-group list --group-name ${GROUP_NAME} --query '[0].id' -o json)\n\nif [ -z \"${group_id}\" ]; then\n    # create a new variable group\n    tf_output=$(terraform output -json | jq -r 'to_entries[] | \"\\(.key)=\\(.value.value)\"')\n    az pipelines variable-group create --name ${GROUP_NAME} --variables ${tf_output} --authorize true\nelse\n    # get existing variables\n    var_list=$(az pipelines variable-group variable list --group-id ${group_id})\n\n    # add temporary uuid variable (a variable group cannot be empty)\n    uuid=$(cat /proc/sys/kernel/random/uuid)\n    az pipelines variable-group variable create --group-id ${group_id} --name ${uuid}\n\n    # delete existing variables\n    for row in $(echo ${var_list} | jq -r 'to_entries[] | \"\\(.key)\"'); do\n        az pipelines variable-group variable delete --group-id ${group_id} --name ${row} --yes\n    done\n\n    # create variables with latest values (from terraform)\n    for row in $(terraform output -json | jq -c 'to_entries[]'); do\n        _jq()\n        {\n            echo ${row} | jq -r ${1}\n        }\n\n        az pipelines variable-group variable create --group-id ${group_id} --name $(_jq '.key') --value $(_jq '.value.value') --secret $(_jq '.value.sensitive') \n    done\n\n    # delete temporary uuid variable\n    az pipelines variable-group variable delete --group-id ${group_id} --name ${uuid} --yes\nfi\n</code></pre>"},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#authenticate-with-azure-devops","title":"Authenticate with Azure DevOps","text":"<p>Most commands used in previous script interact with Azure DevOps and do require authentication. You can authenticate using the <code>System.AccessToken</code> security token used by the running pipeline, by assigning it to an environment variable named <code>AZURE_DEVOPS_EXT_PAT</code>, as shown in the following example (see Azure DevOps CLI in Azure Pipeline YAML for additional information).</p> <p>In addition, you can notice we are also using predefined variables to target the Azure DevOps organization and project (respectively <code>System.TeamFoundationCollectionUri</code> and <code>System.TeamProjectId</code>).</p> <pre><code>  - task: Bash@3\n    displayName: 'Update variable group using terraform outputs'\n    inputs:\n      targetType: filePath\n      arguments: $(System.TeamFoundationCollectionUri) $(System.TeamProjectId) \"Platform-VG\"\n      workingDirectory: $(terraformDirectory)\n      filePath: $(scriptsDirectory)/update-variablegroup.sh\n    env:\n      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)\n</code></pre> System variables Description System.AccessToken Special variable that carries the security token used by the running build. System.TeamFoundationCollectionUri The URI of the Azure DevOps organization. System.TeamProjectId The ID of the project that this build belongs to."},{"location":"CI-CD/recipes/terraform/save-output-to-variable-group/#library-security","title":"Library security","text":"<p>Roles are defined for Library items, and membership of these roles governs the operations you can perform on those items.</p> Role for library item Description Reader Can view the item. User Can use the item when authoring build or release pipelines. For example, you must be a 'User' for a variable group to use it in a release pipeline. Administrator Can also manage membership of all other roles for the item. The user who created an item gets automatically added to the Administrator role for that item. By default, the following groups get added to the Administrator role of the library: Build Administrators, Release Administrators, and Project Administrators. Creator Can create new items in the library, but this role doesn't include Reader or User permissions. The Creator role can't manage permissions for other users. <p>When using <code>System.AccessToken</code>, service account <code>&lt;ProjectName&gt; Build Service</code> identity will be used to access the Library.</p> <p>Please ensure in <code>Pipelines &gt; Library &gt; Security</code> section that this service account has <code>Administrator</code> role at the <code>Library</code> or <code>Variable Group</code> level to create/update/delete variables (see. Library of assets for additional information).</p>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/","title":"Sharing Common Variables / Naming Conventions Between Terraform Modules","text":""},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#what-are-we-trying-to-solve","title":"What are we Trying to Solve?","text":"<p>When deploying infrastructure using code, it's common practice to split the code into different modules that are responsible for the deployment of a part or a component of the infrastructure. In Terraform, this can be done by using modules.</p> <p>In this case, it is useful to be able to share some common variables as well as centralize naming conventions of the different resources, to ensure it will be easy to refactor when it has to change, despite the dependencies that exist between modules.</p> <p>For example, let's consider 2 modules:</p> <ul> <li>Network module, responsible for deploying Virtual Network, Subnets, NSGs and Private DNS Zones</li> <li>Azure Kubernetes Service module responsible for deploying AKS cluster</li> </ul> <p>There are dependencies between these modules, like the Kubernetes cluster that will be deployed into the virtual network from the Network module. To do that, it must reference the name of the virtual network, as well as the resource group it is deployed in. And ideally, we would like these dependencies to be loosely coupled, as much as possible, to keep agility in how the modules are deployed and keep independent lifecycle.</p> <p>This page explains a way to solve this with Terraform.</p>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#how-to-do-it","title":"How to Do It?","text":""},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#context","title":"Context","text":"<p>Let's consider the following structure for our modules:</p> <pre><code>modules\n\u251c\u2500\u2500 kubernetes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 network\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n</code></pre> <p>Now, assume that you deploy a virtual network for the development environment, with the following properties:</p> <ul> <li>name: vnet-dev</li> <li>resource group: rg-dev-network</li> </ul> <p>Then at some point, you need to inject these values into the Kubernetes module, to get a reference to it through a data source, for example:</p> <pre><code>data \"azurem_virtual_network\" \"vnet\" {\n    name                = var.vnet_name\n    resource_group_name = var.vnet_rg_name\n}\n</code></pre> <p>In the snippet above, the virtual network name and resource group are defined through variable. This is great, but if this changes in the future, then the values of these variables must change too. In every module they are used.</p> <p>Being able to manage naming in a central place will make sure the code can easily be refactored in the future, without updating all modules.</p>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#about-terraform-variables","title":"About Terraform Variables","text":"<p>In Terraform, every input variable must be defined at the configuration (or module) level, using the <code>variable</code> block. By convention, this is often done in a <code>variables.tf</code> file, in the module. This file contains variable declaration and default values. Values can be set using variables configuration files (.tfvars), environment variables or CLI arg when using the terraform <code>plan</code> or <code>apply</code> commands.</p> <p>One of the limitation of the variables declaration is that it's not possible to compose variables, locals or Terraform built-in functions are used for that.</p>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#common-terraform-module","title":"Common Terraform Module","text":"<p>One way to bypass this limitations is to introduce a \"common\" module, that will not deploy any resources, but just compute / calculate and output the resource names and shared variables, and be used by all other modules, as a dependency.</p> <pre><code>modules\n\u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 output.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 kubernetes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 network\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n</code></pre> <p>variables.tf:</p> <pre><code>variable \"environment_name\" {\n  type = string\n  description = \"The name of the environment.\"\n}\n\nvariable \"location\" {\n  type = string\n  description = \"The Azure region where the resources will be created. Default is westeurope.\"\n  default = \"westeurope\"\n}\n</code></pre> <p>output.tf:</p> <pre><code># Shared variables\noutput \"location\" {\n  value = var.location\n}\n\noutput \"subscription\" {\n  value = var.subscription\n}\n\n# Virtual Network Naming\n\noutput \"vnet_rg_name\" {\n  value = \"rg-network-${var.environment_name}\"\n}\n\noutput \"vnet_name\" {\n  value = \"vnet-${var.environment_name}\"\n}\n\n# AKS Naming\n\noutput \"aks_rg_name\" {\n  value = \"rg-aks-${var.environment_name}\"\n}\n\noutput \"aks_name\" {\n  value = \"aks-${var.environment_name}\"\n}\n</code></pre> <p>Now, if you execute the Terraform apply for the common module, you get all the shared/common variables in outputs:</p> <pre><code>$ terraform plan -var environment_name=\"dev\" -var subscription=\"$(az account show --query id -o tsv)\"\n\nChanges to Outputs:\n  + aks_name     = \"aks-dev\"\n  + aks_rg_name  = \"rg-aks-dev\"\n  + location     = \"westeurope\"\n  + subscription = \"01010101-1010-0101-1010-010101010101\"\n  + vnet_name    = \"vnet-dev\"\n  + vnet_rg_name = \"rg-network-dev\"\n\nYou can apply this plan to save these new output values to the Terraform state, without changing any real infrastructure.\n</code></pre>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#use-the-common-terraform-module","title":"Use the Common Terraform Module","text":"<p>Using the common Terraform module in any other module is super easy. For example, this is what you can do in the Azure Kubernetes module <code>main.tf</code> file:</p> <pre><code>module \"common\" {\n  source           = \"../common\"\n  environment_name = var.environment_name\n  subscription     = var.subscription\n}\n\ndata \"azurerm_subnet\" \"aks_subnet\" {\n  name                 = \"AksSubnet\"\n  virtual_network_name = module.common.vnet_name\n  resource_group_name  = module.common.vnet_rg_name\n}\n\nresource \"azurerm_kubernetes_cluster\" \"aks\" {\n  name                = module.common.aks_name\n  resource_group_name = module.common.aks_rg_name\n  location            = module.common.location\n  dns_prefix          = module.common.aks_name\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  default_node_pool {\n    name           = \"default\"\n    vm_size        = \"Standard_DS2_v2\"\n    vnet_subnet_id = data.azurerm_subnet.aks_subnet.id\n  }\n}\n</code></pre> <p>Then, you can execute the <code>terraform plan</code> and <code>terraform apply</code> commands to deploy!</p> <pre><code>terraform plan -var environment_name=\"dev\" -var subscription=\"$(az account show --query id -o tsv)\"\ndata.azurerm_subnet.aks_subnet: Reading...\ndata.azurerm_subnet.aks_subnet: Read complete after 1s [id=/subscriptions/01010101-1010-0101-1010-010101010101/resourceGroups/rg-network-dev/providers/Microsoft.Network/virtualNetworks/vnet-dev/subnets/AksSubnet]\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # azurerm_kubernetes_cluster.aks will be created\n  + resource \"azurerm_kubernetes_cluster\" \"aks\" {\n      + dns_prefix                          = \"aks-dev\"\n      + fqdn                                = (known after apply)\n      + id                                  = (known after apply)\n      + kube_admin_config                   = (known after apply)\n      + kube_admin_config_raw               = (sensitive value)\n      + kube_config                         = (known after apply)\n      + kube_config_raw                     = (sensitive value)\n      + kubernetes_version                  = (known after apply)\n      + location                            = \"westeurope\"\n      + name                                = \"aks-dev\"\n      + node_resource_group                 = (known after apply)\n      + portal_fqdn                         = (known after apply)\n      + private_cluster_enabled             = (known after apply)\n      + private_cluster_public_fqdn_enabled = false\n      + private_dns_zone_id                 = (known after apply)\n      + private_fqdn                        = (known after apply)\n      + private_link_enabled                = (known after apply)\n      + public_network_access_enabled       = true\n      + resource_group_name                 = \"rg-aks-dev\"\n      + sku_tier                            = \"Free\"\n\n      [...] truncated\n\n      + default_node_pool {\n          + kubelet_disk_type    = (known after apply)\n          + max_pods             = (known after apply)\n          + name                 = \"default\"\n          + node_count           = (known after apply)\n          + node_labels          = (known after apply)\n          + orchestrator_version = (known after apply)\n          + os_disk_size_gb      = (known after apply)\n          + os_disk_type         = \"Managed\"\n          + os_sku               = (known after apply)\n          + type                 = \"VirtualMachineScaleSets\"\n          + ultra_ssd_enabled    = false\n          + vm_size              = \"Standard_DS2_v2\"\n          + vnet_subnet_id       = \"/subscriptions/01010101-1010-0101-1010-010101010101/resourceGroups/rg-network-dev/providers/Microsoft.Network/virtualNetworks/vnet-dev/subnets/AksSubnet\"\n        }\n\n      + identity {\n          + principal_id = (known after apply)\n          + tenant_id    = (known after apply)\n          + type         = \"SystemAssigned\"\n        }\n\n      [...] truncated\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n</code></pre> <p>Note: the usage of a common module is also valid if you decide to deploy all your modules in the same operation from a main Terraform configuration file, like:</p> <pre><code>module \"common\" {\n  source           = \"./common\"\n  environment_name = var.environment_name\n  subscription     = var.subscription\n}\n\nmodule \"network\" {\n  source           = \"./network\"\n  vnet_name        = module.common.vnet_name\n  vnet_rg_name     = module.common.vnet_rg_name\n}\n\nmodule \"kubernetes\" {\n  source           = \"./kubernetes\"\n  aks_name         = module.common.aks_name\n  aks_rg           = module.common.aks_rg_name\n}\n</code></pre>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#centralize-input-variables-definitions","title":"Centralize Input Variables Definitions","text":"<p>In case you chose to define variables values directly in the source control (e.g. gitops scenario) using variables definitions files (<code>.tfvars</code>), having a common module will also help to not have to duplicate the common variables definitions in all modules. Indeed, it is possible to have a global file that is defined once, at the common module level, and merge it with a module-specific variables definitions files at Terraform <code>plan</code> or <code>apply</code> time.</p> <p>Let's consider the following structure:</p> <pre><code>modules\n\u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 prod.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 output.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 kubernetes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 prod.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 network\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dev.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 prod.tfvars\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 variables.tf\n</code></pre> <p>The common module as well as all other modules contain variables files for <code>dev</code> and <code>prod</code> environment. <code>tfvars</code> files from the common module will define all the global variables that will be shared with other modules (like subscription, environment name, etc.) and <code>.tfvars</code> files of each module will define only the module-specific values.</p> <p>Then, it's possible to merge these files when running the <code>terraform apply</code> or <code>terraform plan</code> command, using the following syntax:</p> <pre><code>terraform plan -var-file=&lt;(cat ../common/dev.tfvars ./dev.tfvars)\n</code></pre> <p>Note: using this, it is really important to ensure that you have not the same variable names in both files, otherwise that will generate an error.</p>"},{"location":"CI-CD/recipes/terraform/share-common-variables-naming-conventions/#conclusion","title":"Conclusion","text":"<p>By having a common module that owns shared variables as well as naming convention, it is now easier to refactor your Terraform configuration code base. Imagine that for some reason you need change the pattern that is used for the virtual network name: you change it in the common module output files, and just have to re-apply all modules!</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/","title":"Guidelines on Structuring and Testing the Terraform Configuration","text":""},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#context","title":"Context","text":"<p>When creating an infrastructure configuration, it is important to follow a consistent and organized structure to ensure maintainability, scalability and reusability of the code. The goal of this section is to briefly describe how to structure your Terraform configuration in order to achieve this.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#structuring-the-terraform-configuration","title":"Structuring the Terraform Configuration","text":"<p>The recommended structure is as follows:</p> <ol> <li>Place each component you want to configure in its own module folder. Analyze your infrastructure code and identify the logical components that can be separated into reusable modules. This will give you a clear separation of concerns and will make it straight forward to include new resources, update existing ones or reuse them in the future. For more details on modules and when to use them, see the Terraform guidance.</li> <li>Place the <code>.tf</code> module files at the root of each folder and make sure to include a <code>README</code> file in a markdown format which can be automatically generated based on the module code. It's recommended to follow this approach as this file structure will be automatically picked up by the Terraform Registry.</li> <li>Use a consistent set of files to structure your modules. While this can vary depending on the specific needs of the project, one good example can be the following:<ul> <li>provider.tf: defines the list of providers according to the plugins used</li> <li>data.tf: defines information read from different data sources</li> <li>main.tf: defines the infrastructure objects needed for your configuration (e.g. resource group, role assignment, container registry)</li> <li>backend.tf: backend configuration file</li> <li>outputs.tf: defines structured data that is exported</li> <li>variables.tf: defines static, reusable values</li> </ul> </li> <li>Include in each module sub folders for documentation, examples and tests. The documentation includes basic information about the module: what is it installing, what are the options, an example use case and so on. You can also add here any other relevant details you might have. The example folder can include one or more examples of how to use the module, each example having the same set of configuration files decided on the previous step. It's recommended to also include a README providing a clear understanding of how it can be used in practice. The tests folder includes one or more files to test the example module together with a documentation file with instructions on how these tests can be executed.</li> <li>Place the root module in a separate folder called <code>main</code>: this is the primary entry point for the configuration. Like for the other modules, it will contain its corresponding configuration files.</li> </ol> <p>An example configuration structure obtained using the guidelines above is:</p> <pre><code>modules\n\u251c\u2500\u2500 mlops\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 doc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 example\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 backend.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 outputs.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 provider.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 variables.tf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 common\n\u251c\u2500\u2500 main\n</code></pre>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#testing-the-configuration","title":"Testing the Configuration","text":"<p>To test Terraform configurations, the Terratest library is utilized. A comprehensive guide to best practices with Terratest, including unit tests, integration tests, and end-to-end tests, is available for reference here.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#types-of-tests","title":"Types of tests","text":"<ul> <li>Unit Test for Module / Resource: Write unit tests for individual modules / resources to ensure that each module behaves as expected in isolation. They are particularly valuable in larger, more complex Terraform configurations where individual modules can be reused and are generally quicker in terms of execution time.</li> </ul> <ul> <li>Integration Test: These tests verify that the different modules and resources work together as intended.</li> </ul> <p>For simple Terraform configurations, extensive unit testing might be overkill. Integration tests might be sufficient in such cases. However, as the complexity grows, unit tests become more valuable.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#key-aspects-to-consider","title":"Key aspects to consider","text":"<ul> <li>Syntax and validation: Use <code>terraform fmt</code> and <code>terraform validate</code> to check the syntax and validate the Terraform configuration during development or in the deployment script / pipeline. This ensures that the configuration is correctly formatted and free of syntax errors.</li> <li>Deployment and existence: Terraform providers, like the Azure provider, perform certain checks during the execution of terraform apply. If Terraform successfully applies a configuration, it typically means that the specified resources were created or modified as expected. In your code you can skip this validation and focus on particular resource configurations that are more critical, described in the next points.</li> <li>Resource properties that can break the functionality: The expectation here is that we're not interested in testing each property of a resource, but to identify the ones that could cause an issue in the system if they are changed, such as access or network policies, service principal permissions and others.</li> <li>Validation of Key Vault contents: Ensuring the presence of necessary keys, certificates, or secrets in the Azure Key Vault that are stored as part of resource configuration.</li> <li>Properties that can influence the cost or location: This can be achieved by asserting the locations, service tiers, storage settings, depending on the properties available for the resources.</li> </ul>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#naming-convention","title":"Naming Convention","text":"<p>When naming Terraform variables, it's essential to use clear and consistent naming conventions that are easy to understand and follow. The general convention is to use lowercase letters and numbers, with underscores instead of dashes, for example: \"azurerm_resource_group\". When naming resources, start with the provider's name, followed by the target resource, separated by underscores. For instance, \"azurerm_postgresql_server\" is an appropriate name for an Azure provider resource. When it comes to data sources, use a similar naming convention, but make sure to use plural names for lists of items. For example, \"azurerm_resource_groups\" is a good name for a data source that represents a list of resource groups. Variable and output names should be descriptive and reflect the purpose or use of the variable. It's also helpful to group related items together using a common prefix. For example, all variables related to storage accounts could start with \"storage_\". Keep in mind that outputs should be understandable outside of their scope. A useful naming pattern to follow is \"{name}_{attribute}\", where \"name\" represents a resource or data source name, and \"attribute\" is the attribute returned by the output. For example, \"storage_primary_connection_string\" could be a valid output name.</p> <p>Make sure you include a description for outputs and variables, as well as marking the values as 'default' or 'sensitive' when the case. This information will be captured in the generated documentation.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#generating-the-documentation","title":"Generating the Documentation","text":"<p>The documentation can be automatically generated based on the configuration code in your modules with the help of terraform-docs. To generate the Terraform module documentation, go to the module folder and enter this command:</p> <pre><code>terraform-docs markdown table --output-file README.md --output-mode inject .\n</code></pre> <p>Then, the documentation will be generated inside the component root directory.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#conclusion","title":"Conclusion","text":"<p>The approach presented in this section is designed to be flexible and easy to use, making it straight forward to add new resources or update existing ones. The separation of concerns also makes it easy to reuse existing components in other projects, with all the information (modules, examples, documentation and tests) located in one place.</p>"},{"location":"CI-CD/recipes/terraform/terraform-structure-guidelines/#resources","title":"Resources","text":"<ul> <li>Terraform-docs</li> <li>Terraform Registry</li> <li>Terraform Module Guidance</li> <li>Terratest</li> <li>Testing HashiCorp Terraform</li> <li>Build Infrastructure - Terraform Azure Example</li> </ul>"},{"location":"UI-UX/","title":"User Interface and User Experience Engineering","text":"<p>Also known as UI/UX, Front End Development, or Web Development, user interface and user experience engineering is a broad topic and encompasses many different aspects of modern application development. When a user interface is required, ISE primarily develops a web application. Web apps can be built in a variety of ways with many different tools.</p>"},{"location":"UI-UX/#goal","title":"Goal","text":"<p>The goal of the User Interface section is to provide guidance on developing web applications. Everyone should begin by reading the General Guidance for a quick introduction to the four main aspects of every web application project. From there, readers are encouraged to dive deeper into each topic, or begin reviewing technical guidance that pertains to their engagement. All UI/UX projects should begin with a detailed design document. Review the Design Process section for more details, and a template to get started.</p> <p>Keep in mind that like all software, there is no \"right way\" to build a user interface application. Leverage and trust your team's or your customer's experience and expertise for the best development experience.</p>"},{"location":"UI-UX/#general-guidance","title":"General Guidance","text":"<p>The state of web platform engineering is fast moving. There is no one-size-fits-all solution. For any team to be successful in building a UI, they need to have an understanding of the higher-level aspects of all UI project.</p> <ol> <li>Accessibility - ensuring your application is usable and enjoyed by as many people as possible is at the heart of accessibility and inclusive design.</li> <li>Usability - how effortless should it be for any given user to use the application? Do they need special training or a document to understand how to use it, or will it be intuitive?</li> <li>Maintainability - is the application just a proof of concept to showcase an idea for future work, or will it be an MVP and act as the starting point for a larger, production-ready application? Sometimes you don't need React or any other framework. Sometimes you need React, but not all the bells and whistles from create-react-app. Understanding project maintainability requirements can simplify an engagement\u2019s tooling needs significantly and let folks iterate without headaches.</li> <li>Stability - what is the cost of adding a dependency? Is it actively stable/updated/maintained? If not, can you afford the tech debt (sometimes the answer can be yes!)? Could you get 90% of the way there without adding another dependency?</li> </ol> <p>More information is available for each general guidance section in the corresponding pages.</p>"},{"location":"UI-UX/#design-process","title":"Design Process","text":"<p>All user interface applications begin with the design process. The true definition for \"the design process\" is ever changing and highly opinion based as well. This sections aims to deliver a general overview of a design process any engineering team could conduct when starting an UI application engagement.</p> <p>When committing to a UI/UX project, be certain to not over-promise on the web application requirements. Delivering a production-ready application involves a large number of engineering complexities resulting in a very long timeline. Always start with a proof-of-concept or minimum-viable-product first. These projects can easily be achieved within a couple month timeline (and sometimes even less).</p> <p>The first step in the design process is to understand the problem at hand and outline what the solution should achieve. Commonly referred to as Desired Outcomes, the output of this first step should be a generalized list of outcomes that the solution will accomplish. Consider the following example:</p> <p>A public library has a set of data containing information about its collection. The data stores text, images, and the status of a book (borrowed, available, reserved). The library librarian wants to share this data with its users.</p> <ol> <li>As the librarian, I want to notify users before they receive late penalties for overdue books</li> <li>As the librarian, I want to notify users when a book they have reserved becomes available</li> </ol> <p>With the desired outcomes in mind, the next step in the design process is to define user personas. Regardless of the solution for a given problem, understanding the user needs leads to a better understanding of feature development and technological choices. Personas are written as prose-like paragraphs that describe different types of users. Considering the previous example, the various user personas could be:</p> <ol> <li>An individual with no disabilities, but is unfamiliar with using software interfaces</li> <li>An individual with no disabilities, and is familiar with using software interfaces</li> <li>An individual with disabilities, and is unfamiliar with using software interfaces (with or without the use of accessibility tooling)</li> <li>An individual with disabilities, but familiar with using software interfaces through the use of accessibility tooling</li> </ol> <p>After defining these personas it is clear that whatever the solution is, it requires a lot of accessibility and user experience design work. Sometimes personas can be simpler than this, but always include disabled users. Even when a user set is predefined as a group of individuals without disabilities, there is no guarantee that the user set will remain that way.</p> <p>After defining the desired outcomes as well as the personas, the next step in the design process is to begin conducting Trade Studies for potential solutions. The first trade study should be high-level and solution oriented. It will utilize the results of previous steps and propose multiple solutions for achieving the desired outcomes with the listed personas in mind. Continuing with the library example, this first trade study may compare various application solutions such as automated emails or text messages, an RSS feed, or an user interface application. There are pros and cons for each solution both from an user experience and a developer experience perspective, but at this stage it is important to focus on the users. After arriving on the best solution, the next trade study can dive into different implementation methods. It is in this subsequent trade studies that developer experience becomes more important.</p> <p>The benefit of building software applications is that there are truly infinite ways to build something. A team can use the latest shiny tools, or they can utilize the tried-and-tested ones. It is for this reason that focussing completely on the user until a solution is defined is better than obsessing over technology choices. Within ISE, we often reach for tools such as the React framework. React is a great tool when wielded by an experienced team. Otherwise, it can create more hurdles than it is worth. Keep in mind that even if you feel capable with React, the rest of your team and your customer's dev team needs to as well. Some other great options to consider when building a proof-of-concept or minimum-viable-product are:</p> <ol> <li>HTML/CSS/JavaScript<ul> <li>Back to the basics! Start with a single index.html, include a popular CSS framework such as Bootstrap using their CDN link, and start prototyping!</li> <li>Rarely will you have to support legacy browsers; thus, you can rely on modern JavaScript language features! No need for build tools or even TypeScript (did you know you can type check JavaScript).</li> </ul> </li> <li>Web Component frameworks<ul> <li>Web Components are now standardized in all modern browsers</li> <li>Microsoft has their own, stable &amp; actively-maintained framework, Fast</li> </ul> </li> </ol> <p>For more information of choosing the right implementation tool, read the Recommended Technologies document.</p> <p>Continue reading the Trade Study section of this site for more information on completing this step in the design process.</p> <p>After iterating through multiple trade study documents, this design process can be considered complete! With an agreed upon solution and implementation in mind, it is now time to begin development. A natural continuation of the design process is to get users (or stakeholders) involved as early as possible. Constantly look for design and usability feedback, and utilize this to improve the application as it is being developed.</p>"},{"location":"UI-UX/recommended-technologies/","title":"Recommended Technologies","text":"<p>The purpose of this page is to review the commonly selected technology options when developing user interface applications. To reiterate from the general guidance section:</p> <p>Keep in mind that like all software, there is no \"right way\" to build a user interface application. Leverage and trust your team's or your customer's experience and expertise for the best development experience.</p> <p>Additionally, while some of these technologies are presented as alternate options, many can be combined together. For example, you can use React in a basic HTML/CSS/JS workflow by inline-importing React along with Babel. See the Add React to a Website for more details. Similarly, any Fast web component can be integrated into any existing React application. And of course, every JavaScript technology can also be used with TypeScript!</p>"},{"location":"UI-UX/recommended-technologies/#typescript","title":"TypeScript","text":"<p>TypeScript is JavaScript with syntax for types. TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale. typescriptlang.org</p> <p>TypeScript is highly recommended for all new web application projects. The stability it provides for teams is unmatched, and can make it easier for folks with C# backgrounds to work with web technologies.</p> <p>There are many ways to integrate TypeScript into a web application. The easiest way to get started is by reviewing the TypeScript Tooling in 5 Minutes guide from the official TypeScript docs. The other sections on this page contain information regarding integration with TypeScript.</p>"},{"location":"UI-UX/recommended-technologies/#react","title":"React","text":"<p>React is a framework developed and maintained by Facebook. React is used throughout Microsoft and has a vast open source community.</p>"},{"location":"UI-UX/recommended-technologies/#documentation-recommended-resources","title":"Documentation &amp; Recommended Resources","text":"<p>One can expect to find a multitude of guides, answers, and posts on how to work with React; don't take everything at face value. The best place to review React concepts is the React documentation. From there, you can review articles from various sources such as React Community Articles, Kent C Dodd's Blog, CSS Tricks Articles, and Awesome React.</p> <p>The React API has changed dramatically over time. Older resources may contain solutions or patterns that have since been changed and improved upon. Modern React development uses the React Hooks pattern. Rarely will you have to implement something using React Class pattern. If you're reading an article/answer/docs that instruct you to use the class pattern you may be looking at an out-of-date resource.</p>"},{"location":"UI-UX/recommended-technologies/#bootstrapping","title":"Bootstrapping","text":"<p>There are many different ways to bootstrap a React application. Two great tool sets to use are create-react-app and vite.</p>"},{"location":"UI-UX/recommended-technologies/#create-react-app","title":"create-react-app","text":"<p>From Adding TypeScript</p> <pre><code>npx create-react-app my-app --template typescript\n</code></pre>"},{"location":"UI-UX/recommended-technologies/#vite","title":"Vite","text":"<p>From Scaffolding your First Vite Project</p> <pre><code># npm 6.x\nnpm init vite@latest my-app --template react-ts\n\n# npm 7.x\nnpm init vite@latest my-app -- --template react-ts\n</code></pre>"},{"location":"agile-development/","title":"Agile Development","text":"<p>In this documentation we refer to the team working on an engagement a \"Crew\". This includes the dev team, dev lead, PM, data scientists, etc.</p>"},{"location":"agile-development/#why-agile","title":"Why Agile","text":"<ul> <li>We want to be quick to respond to change</li> <li>We want to get to a state of working software fast, and iterate on it to improve it</li> <li>We want to keep the customer/end users involved all the way through</li> <li>We care about individuals and interactions over documents and processes</li> </ul>"},{"location":"agile-development/#the-fundamentals","title":"The Fundamentals","text":"<p>We care about the goal for each activity, but not necessarily about how they are accomplished. The suggestions in parenthesis are common ways to accomplish the goals.</p> <ul> <li>We keep a shared backlog of work, that everyone in the team can always access (ex. Azure DevOps or GitHub)</li> <li>We plan our work in iterations with clear goals (ex. sprints)</li> <li>We have a clear idea of when work items are ready to implement (ex. definition of ready)</li> <li>We have a clear idea of when work items are completed (ex. definition of done)</li> <li>We communicate the progress in one place that everyone can access, and keep the progress up to date (ex. sprint board and daily standups)</li> <li>We reflect on our work regularly to make improvements (ex. retrospectives)</li> <li>The team has a clear idea of the roles and responsibilities in the project (ex. Dev lead, TPM, Process Lead etc.)</li> <li>The team has a joint idea of how we work together (ex. team agreement)</li> <li>We value and respect the opinions and work of all team members.</li> </ul>"},{"location":"agile-development/#references","title":"References","text":"<ul> <li>What Is Scrum?</li> <li>Essential Scrum: A Practical Guide to The Most Popular Agile Process</li> </ul>"},{"location":"agile-development/backlog-management/","title":"Backlog Management","text":""},{"location":"agile-development/backlog-management/#backlog","title":"Backlog","text":"<p>Goals</p> <ul> <li>User stories have a clear acceptance criteria and definition of done.</li> <li>Design activities are planned as part of the backlog (a design for a story that needs it should be done before it is added in a Sprint).</li> </ul> <p>Suggestions</p> <ul> <li>Consider the backlog refinement as an ongoing activity, that expands outside of the typical \"Refinement meeting\".</li> <li>The team should decide on and have a clear understanding of a definition of ready and a definition of done.</li> <li>The team should have a clear understanding of what constitutes good acceptance criteria for a story/task, and decide on how stories/tasks are handled. Eg. in some projects, stories are refined as a crew, but tasks are created by individual developers on an as needed bases.</li> <li>Technical debt is mostly due to shortcuts made in the implementation as well as the future maintenance cost as the natural result of continuous improvement. Shortcuts should generally be avoided. In some rare instances where they happen, prioritizing and planning improvement activities to reduce this debt at a later time is the recommended approach.</li> </ul>"},{"location":"agile-development/backlog-management/#resources","title":"Resources","text":"<ul> <li>Product Backlog</li> <li>Sprint Backlog</li> <li>Acceptance Criteria</li> <li>Definition of Done</li> <li>Definition of Ready</li> <li>Estimation Basics in Agile</li> </ul>"},{"location":"agile-development/ceremonies/","title":"Agile Ceremonies","text":""},{"location":"agile-development/ceremonies/#sprint-planning","title":"Sprint Planning","text":"<p>Goals</p> <ul> <li>The planning supports Diversity and Inclusion principles and provides equal opportunities.</li> <li>The Planning defines how the work is going to be completed in the sprint.</li> <li>Stories fit in a sprint and are designed and ready before the planning.</li> </ul> <p>Note: Self assignment by team members can give a feeling of fairness in how work is split in the team. Sometime, this ends up not being the case as it can give an advantage to the loudest or more experienced voices in the team. Individuals also tend to stay in their comfort zone, which might not be the right approach for their own growth.*</p>"},{"location":"agile-development/ceremonies/#sprint-goal","title":"Sprint Goal","text":"<p>Consider defining a sprint goal, or list of goals for each sprint. Effective sprint goals are a concise bullet point list of items. A Sprint goal can be created first and used as an input to choose the Stories for the sprint. A sprint goal could also be created from the list of stories that were picked for the Sprint.</p> <p>The sprint goal can be used:</p> <ul> <li>At the end of each stand up meeting, to remember the north star for the Sprint and help everyone taking a step back</li> <li>During the sprint review (\"was the goal achieved?\", \"If not, why?\")</li> </ul> <p>Note: A simple way to define a sprint goal, is to create a User Story in each sprint backlog and name it \"Sprint XX goal\". You can add the bullet points in the description.*</p>"},{"location":"agile-development/ceremonies/#stories","title":"Stories","text":"<p>Example 1: Preparing in advance</p> <ul> <li>The dev lead and product owner plan time to prepare the sprint backlog ahead of sprint planning.</li> <li>The dev lead uses their experience (past and on the current project) and the estimation made for these stories to gauge how many should be in the sprint.</li> <li>The dev lead asks the entire team to look at the tentative sprint backlog in advance of the sprint planning.</li> <li>The dev lead assigns stories to specific developers after confirming with them that it makes sense</li> <li>During the sprint planning meeting, the team reviews the sprint goal and the stories. Everyone confirm they understand the plan and feel it's reasonable.</li> </ul> <p>Example 2: Building during the planning meeting</p> <ul> <li>The product owner ensures that the highest priority items of the product backlog is refined and estimated following the team estimation process.</li> <li>During the Sprint planning meeting, the product owner describe each stories, one by one, starting by highest priority.</li> <li>For each story, the dev lead and the team confirm they understand what needs to be done and add the story to the sprint backlog.</li> <li>The team keeps considering more stories up to a point where they agree the sprint backlog is full. This should be informed by the estimation, past developer experience and past experience in this specific project.</li> <li>Stories are assigned during the planning meeting:<ul> <li>Option 1: The dev lead makes suggestion on who could work on each stories. Each engineer agrees or discuss if required.</li> <li>Option 2: The team review each story and engineer volunteer select the one they want to be assigned to. <p>Note: this option might cause issues with the first core expectations. Who gets to work on what? Ultimately, it is the dev lead responsibility to ensure each engineer gets the opportunity to work on what makes sense for their growth.)</p> </li> </ul> </li> </ul>"},{"location":"agile-development/ceremonies/#tasks","title":"Tasks","text":"<p>Examples of approaches for task creation and assignment:</p> <ul> <li>Stories are split into tasks ahead of time by dev lead and assigned before/during sprint planning to engineers.</li> <li>Stories are assigned to more senior engineers who are responsible for splitting into tasks.</li> <li>Stories are split into tasks during the Sprint planning meeting by the entire team.</li> </ul> <p>Note: Depending on the seniority of the team, consider splitting into tasks before sprint planning. This can help getting out of sprint planning with all work assigned. It also increase clarity for junior engineers.</p>"},{"location":"agile-development/ceremonies/#sprint-planning-resources","title":"Sprint Planning Resources","text":"<ul> <li>Definition of Ready</li> <li>Sprint Goal Template</li> <li>Planning</li> <li>Refinement</li> <li>User Stories Applied: For Software Development</li> </ul>"},{"location":"agile-development/ceremonies/#estimation","title":"Estimation","text":"<p>Goals</p> <ul> <li>Estimation supports the predictability of the team work and delivery.</li> <li>Estimation re-enforces the value of accountability to the team.</li> <li>The estimation process is improved over time and discussed on a regular basis.</li> <li>Estimation is inclusive of the different individuals in the team.</li> </ul> <p>Rough estimation is usually done for a generic SE 2 dev.</p>"},{"location":"agile-development/ceremonies/#example-1-t-shirt-sizes","title":"Example 1: T-shirt Sizes","text":"<ul> <li>The team use t-shirt sizes (S, M, L, XL) and agrees in advance which size fits a sprint. In this example: S, M fits a sprint, L, XL too big for a sprint and need to be split / refined</li> <li>The dev lead with support of the team roughly estimates how much S and M stories can be done in the first sprints</li> <li>This rough estimation is refined over time and used to as an input for future sprint planning and to adjust project end date forecasting</li> </ul>"},{"location":"agile-development/ceremonies/#example-2-single-indicator","title":"Example 2: Single Indicator","text":"<ul> <li>The team uses a single indicator: \"does this story fits in one sprint?\", if not, the story needs to be split</li> <li>The dev lead with support of the team roughly estimates how many stories can be done in the first sprints</li> <li>How many stories are done in each sprint on average is used as an input for future sprint planning and as an indicator to adjust project end date forecasting</li> </ul>"},{"location":"agile-development/ceremonies/#example-3-planning-poker","title":"Example 3: Planning Poker","text":"<ul> <li>The team does planning poker and estimates in story points</li> <li>Story points are roughly used to estimate how much can be done in next sprint</li> <li>The dev lead and the TPM uses the past sprints and observed velocity to adjust project end date forecasting</li> </ul>"},{"location":"agile-development/ceremonies/#other-considerations","title":"Other Considerations","text":"<ul> <li>Estimating stories using story points in smaller project does not always provide the value it would in bigger ones.</li> <li>Avoid converting story points or t-shirt sizes to days.</li> </ul>"},{"location":"agile-development/ceremonies/#measure-estimation-accuracy","title":"Measure Estimation Accuracy","text":"<ul> <li>Collect data to monitor estimation accuracy and sprint completion over time to drive improvements.</li> <li>Use the sprint goal to understand if the estimation was correct. If the sprint goal is met: does anything else matter?</li> </ul>"},{"location":"agile-development/ceremonies/#scrum-practices","title":"Scrum Practices","text":"<p>While Scrum does not prescribe how to size work, Professional Scrum is biased away from absolute estimation (hours, function points, ideal-days, etc.) and towards relative sizing.</p> <p>Planning Poker</p> <p>Planning Poker is a collaborative technique to assign relative size. Developers may choose whatever units they want - story points and t-shirt sizes are examples of units.</p> <p>'Same-Size' Product Backlog Items (PBIs)</p> <p>'Same-Size' PBIs is a relative estimation approach that involves breaking items down small enough that they are roughly the same size. Velocity can be understood as a count of PBIs; this is sometimes used by teams doing continuously delivery.</p> <p>'Right-Size' Product Backlog Items (PBIs)</p> <p>'Right-Size' PBIs is a relative estimation approach that involves breaking things down small enough to deliver value in a certain time period (i.e. get to Done by the end of a Sprint). This is sometimes associated with teams utilizing flow for forecasting. Teams use historical data to determine if they think they can get the PBI done within the confidence level that their historical data says they typically get a PBI done.</p>"},{"location":"agile-development/ceremonies/#estimation-resources","title":"Estimation Resources","text":"<ul> <li>The Most Important Thing You Are Missing about Estimation</li> </ul>"},{"location":"agile-development/ceremonies/#retrospectives","title":"Retrospectives","text":"<p>Goals</p> <ul> <li>Retrospectives lead to actionable items that help grow the team's engineering practices. These items are in the backlog, assigned, and prioritized to be fixed by a date agreed upon (default being next retrospective).</li> <li>Retrospectives are used to ask the hard questions (\"we usually don't finish what we plan, let's talk about this\") when necessary.</li> </ul> <p>Suggestions</p> <ul> <li>Consider other retro formats available outside of Mad Sad Glad.<ul> <li>Gather Data: Triple Nickels, Timeline, Mad Sad Glad, Team Radar</li> <li>Generate Insights: 5 Whys, Fishbone, Patterns and Shifts</li> </ul> </li> <li>Consider setting a retro focus area.</li> <li>Schedule enough time to ensure that you can have the conversation you need to get the correct plan an action and improve how you work.</li> <li>Bring in a neutral facilitator for project retros or retros that introspect after a difficult period.</li> </ul> <p>Use the following retrospectives techniques to address specific trends that might be emerging on an engagement</p>"},{"location":"agile-development/ceremonies/#5-whys","title":"5 Whys","text":"<p>If a team is confronting a problem and is unsure of the exact root cause, the 5 whys exercise taken from the business analysis sector can help get to the bottom of it.\u00a0For example, if a team cannot get to Done each Sprint, that would go at the top of the whiteboard. The team then asks why that problem exists, writing that answer in the box below.\u00a0 Next, the team asks why again, but this time in response to the why they just identified. Continue this process until the team identifies an actual root cause, which usually becomes apparent within five steps.</p>"},{"location":"agile-development/ceremonies/#processes-tools-individuals-interactions-and-the-definition-of-done","title":"Processes, Tools, Individuals, Interactions and the Definition of Done","text":"<p>This approach encourages team members to think more broadly.\u00a0 Ask team members to identify what is going well and ideas for improvement within the categories of processes, tools, individuals/interactions, and the Definition of Done.\u00a0 Then, ask team members to vote on which improvement ideas to focus on during the upcoming Sprint.</p>"},{"location":"agile-development/ceremonies/#focus","title":"Focus","text":"<p>This retrospective technique incorporates the concept of visioning. Using this technique, you ask team members where they would like to go?\u00a0 Decide what the team should look like in 4 weeks, and then ask what is holding them back from that and how they can resolve the impediment.\u00a0 If you are focusing on specific improvements, you can use this technique for one or two Retrospectives in a row so that the team can see progress over time.</p>"},{"location":"agile-development/ceremonies/#retrospective-resources","title":"Retrospective Resources","text":"<ul> <li>Agile Retrospective: Making Good Teams Great</li> <li>Retrospective</li> </ul>"},{"location":"agile-development/ceremonies/#sprint-demo","title":"Sprint Demo","text":"<p>Goals</p> <ul> <li>Each sprint ends with demos that illustrate the sprint goal and how it fits in the engagement goal.</li> </ul> <p>Suggestions</p> <ul> <li>Consider not pre-recording sprint demos in advance. You can record the demo meeting and archive them.</li> <li>A demo does not have to be about running code. It can be showing documentation that was written.</li> </ul>"},{"location":"agile-development/ceremonies/#sprint-demo-resources","title":"Sprint Demo Resources","text":"<ul> <li>Sprint Review/Demo</li> </ul>"},{"location":"agile-development/ceremonies/#stand-up","title":"Stand-Up","text":"<p>Goals</p> <ul> <li>The stand-up is run efficiently.</li> <li>The stand-up helps the team understand what was done, what will be done and what are the blockers.</li> <li>The stand-up helps the team understand if they will meet the sprint goal or not.</li> </ul> <p>Suggestions</p> <ul> <li>Keep stand up short and efficient. Table the longer conversations for a parking lot section, or for a conversation that will be planned later.</li> <li>Run daily stand ups: 15 minutes of stand up and 15 minutes of parking lot.</li> <li>If someone cannot make the stand-up exceptionally: Ask them to do a written stand up in advance.</li> <li>Stand ups should include everyone involved in the project, including the customer.</li> <li>Projects with widely divergent time zones should be avoided if possible, but if you are on one, you should adapt the standups to meet the needs and time constraints of all team members.</li> </ul>"},{"location":"agile-development/ceremonies/#stand-up-resources","title":"Stand-Up Resources","text":"<ul> <li>Stand-Up/Daily Scrum</li> </ul>"},{"location":"agile-development/roles/","title":"Agile/Scrum Roles","text":"<ul> <li>We prefer using \"process lead\" over \"scrum master\". It describes the same role.</li> </ul> <p>This section has links directing you to definitions for the traditional roles within Agile/Scrum.  After reading through the best practices you should have a basic understanding of the key Agile roles in terms of what they are and the expectations for the role.</p> <ul> <li>Product Owner</li> <li>Scrum Master</li> <li>Development Team</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/external-feedback/","title":"External Feedback","text":"<p>Various stakeholders can provide feedback to the working product during a project, beyond any formal review and feedback sessions required by the organization. The frequency and method of collecting feedback through reviews varies depending on the case, but a couple of good practices are:</p> <ul> <li>Capture each review in the backlog as a separate user story.</li> <li>Standardize the tasks that implement this user story.</li> <li>Plan for a review user story per Epic / Feature in your backlog proactively.</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/","title":"Minimal Slices","text":""},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/#always-deliver-your-work-using-minimal-valuable-slices","title":"Always Deliver Your Work Using Minimal Valuable Slices","text":"<ul> <li>Split your work item into small chunks that are contributed in incremental commits.</li> <li>Contribute your chunks frequently. Follow an iterative approach by regularly providing updates and changes to the team. This allows for instant feedback and early issue discovery and ensures you are developing in the right direction, both technically and functionally.</li> </ul> <ul> <li>Do NOT work independently on your task without providing any updates to your team.</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/#example","title":"Example","text":"<p>Imagine you are working on adding UWP (Universal Windows Platform) application building functionality for existing continuous integration service which already has Android/iOS support.</p>"},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/#bad-approach","title":"Bad Approach","text":"<p>After six weeks of work you created PR with all required functionality, including portal UI (build settings), backend REST API (UWP build functionality), telemetry, unit and integration tests, etc.</p>"},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/#good-approach","title":"Good Approach","text":"<p>You divided your feature into smaller user stories (which in turn were divided into multiple tasks) and started working on them one by one:</p> <ul> <li>As a user I can successfully build UWP apps using current service</li> <li>As a user I can see telemetry when building the apps</li> <li>As a user I have the ability to select build configuration (debug, release)</li> <li>As a user I have the ability to select target platform (arm, x86, x64)</li> <li>...</li> </ul> <p>You also divided your stories into smaller tasks and sent PRs based on those tasks. E.g. you have the following tasks for the first user story above:</p> <ul> <li>Enable UWP platform on backend</li> <li>Add <code>build</code> button to the UI (build first solution file found)</li> <li>Add <code>select solution file</code> dropdown to the UI</li> <li>Implement unit tests</li> <li>Implement integration tests to verify build succeeded</li> <li>Update documentation</li> <li>...</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/minimal-slices/#resources","title":"Resources","text":"<ul> <li>Minimalism Rules</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/risk-management/","title":"Risk Management","text":"<p>Agile methodologies are conceived to be driven by risk management principles, but no methodology can eliminate all risks.</p>"},{"location":"agile-development/advanced-topics/backlog-management/risk-management/#goal","title":"Goal","text":"<p>Anticipation is a key aspect of software project management, involving the proactive identification and assessment of potential risks and challenges to enable effective planning and mitigation strategies.</p> <p>The following guidance aims to provide decision-makers with the information needed to make informed choices, understanding trade-offs, costs, and project timelines throughout the project.</p>"},{"location":"agile-development/advanced-topics/backlog-management/risk-management/#general-guidance","title":"General Guidance","text":"<ul> <li>Identify risks in every activity such as a planning meetings, design and code reviews, or daily standups. All team members are responsible for identifying relevant risks.</li> <li>Assess risks in terms of their likelihood and potential impact on the project. Use the issues to report and track risks. Issues represent unplanned activities.</li> <li>Prioritize them based on their severity and likelihood, focusing on addressing the most critical ones first.</li> <li>Mitigate or reduce the impact and likelihood of the risks.</li> <li>Monitor continuously to ensure the effectiveness of the mitigation strategies.</li> <li>Prepare contingency plans for high-impact risks that may still materialize.</li> <li>Communicate and report risks to keep all stakeholders informed.</li> </ul>"},{"location":"agile-development/advanced-topics/backlog-management/risk-management/#opportunity-management","title":"Opportunity Management","text":"<p>The same process can be applied to opportunities, but while risk management involves applying mitigation actions to decrease the likelihood of a risk, in opportunity management, you enhance actions to increase the likelihood of a positive outcome.</p>"},{"location":"agile-development/advanced-topics/collaboration/add-pairing-field-azure-devops-cards/","title":"How to Add a Pairing Custom Field in Azure DevOps User Stories","text":"<p>This document outlines the benefits of adding a custom field of type Identity in Azure DevOps user stories, prerequisites, and a step-by-step guide.</p>"},{"location":"agile-development/advanced-topics/collaboration/add-pairing-field-azure-devops-cards/#benefits-of-adding-a-custom-field","title":"Benefits of Adding a Custom Field","text":"<p>Having the names of both individuals pairing on a story visible on the Azure DevOps cards can be helpful during sprint ceremonies and lead to greater accountability by the pairing assignee. For example, it is easier to keep track of the individuals assigned stories as part of a pair during sprint planning by using the \"pairing names\" field. During stand-up it can also help the Process Lead filter stories assigned to the individual (both as an owner or as a pairing assignee) and show these on the board. Furthermore, the pairing field can provide an additional data point for reports and burndown rates.</p>"},{"location":"agile-development/advanced-topics/collaboration/add-pairing-field-azure-devops-cards/#prerequisites","title":"Prerequisites","text":"<p>Prior to customizing Azure DevOps, review Configure and customize Azure Boards.</p> <p>In order to add a custom field to user stories in Azure DevOps changes must be made as an Organization setting. This document therefore assumes use of an existing Organization in Azure DevOps and that the user account used to make these changes is a member of the Project Collection Administrators Group.</p>"},{"location":"agile-development/advanced-topics/collaboration/add-pairing-field-azure-devops-cards/#change-the-organization-settings","title":"Change the Organization Settings","text":"<ol> <li> <p>Duplicate the process currently in use.</p> <p>Navigate to the Organization Settings, within the Boards / Process tab.</p> <p></p> </li> <li> <p>Select the Process type, click on the icon with three dots ... and click Create inherited process.</p> <p></p> </li> <li> <p>Click on the newly created inherited process.</p> <p>As you can see in the example below, we called it 'Pairing'.</p> <p></p> </li> <li> <p>Click on the work item type User Story.</p> <p></p> </li> <li> <p>Click New Field.</p> <p></p> </li> <li> <p>Give it a Name and select Identity in Type. Click on Add Field.</p> <p></p> <p>This completes the change in Organization settings. The rest of the instructions must be completed under Project Settings.</p> </li> </ol>"},{"location":"agile-development/advanced-topics/collaboration/add-pairing-field-azure-devops-cards/#change-the-project-settings","title":"Change the Project Settings","text":"<ol> <li> <p>Go to the Project that is to be modified, select Project Settings.</p> <p></p> </li> <li> <p>Select Project configuration.</p> <p></p> </li> <li> <p>Click on process customization page.</p> <p></p> </li> <li> <p>Click on Projects then click on Change process.</p> <p></p> </li> <li> <p>Change the target process to Pairing then click Save.</p> <p></p> </li> <li> <p>Go to Boards.</p> <p></p> </li> <li> <p>Click on the Gear icon to open Settings.</p> <p></p> </li> <li> <p>Add field to card.</p> <p>Click on the green + icon to add select the Pairing field. Check the box to display fields, even when they are empty. Save and close.</p> <p></p> </li> <li> <p>View the modified the card.</p> <p>Notice the new Pairing field. The Story can now be assigned an Owner and a Pairing assignee!</p> <p></p> </li> </ol>"},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/","title":"Effortless Pair Programming with GitHub Codespaces and VSCode","text":"<p>Pair programming used to be a software development technique in which two programmers work together on a single computer, sharing one keyboard and mouse, to jointly design, code, test, and debug software. It is one of the patterns explored in the section why collaboration? of this playbook, however with teams that work mostly remotely, sharing a physical computer became a challenge, but opened the door to a more efficient approach of pair programming.</p> <p>Through the effective utilization of a range of tools and techniques, we have successfully implemented both pair and swarm programming methodologies. As such, we are eager to share some of the valuable insights and knowledge gained from this experience.</p>"},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/#how-to-make-pair-programming-a-painless-experience","title":"How to Make Pair Programming a Painless Experience?","text":""},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/#working-sessions","title":"Working Sessions","text":"<p>In order to enhance pair programming capabilities, you can create regular working sessions that are open to all team members. This facilitates smooth and efficient collaboration as everyone can simply join in and work together before branching off into smaller groups. This approach has proven particularly beneficial for new team members who may otherwise feel overwhelmed by a large codebase. It emulates the concept of the \"humble water cooler,\" which fosters a sense of connectedness among team members through their shared work.</p> <p>Additionally, scheduling these working sessions in advance ensures intentional collaboration and provides clarity on user story responsibilities. To this end, assign a single person to each user story to ensure clear ownership and eliminate ambiguity. By doing so, this could eliminate the common problem of engineers being hesitant to modify code outside of their assigned tasks due to the sentiment of lack of ownership. These working sessions are instrumental in promoting a cohesive team dynamic, allowing for effective knowledge sharing and collective problem-solving.</p>"},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/#github-codespaces","title":"GitHub Codespaces","text":"<p>GitHub Codespaces is a vital component in an efficient development environment, particularly in the context of pair programming. Prioritize setting up a Codespace as the initial step of the project, preceding tasks such as local machine project compilation or VSCode plugin installation. To this end, make sure to update the Codespace documentation before incorporating any quick start instructions for local environments. Additionally, consistently demonstrate demos in codespaces environment to ensure its prominent integration into our workflow.</p> <p>With its cloud-based infrastructure, GitHub Codespaces presents a highly efficient and simplified approach to real-time collaborative coding. As a result, new team members can easily access the GitHub project and begin coding within seconds, without requiring installation on their local machines. This seamless, integrated solution for pair programming offers a streamlined workflow, allowing you to direct your attention towards producing exemplary code, free from the distractions of cumbersome setup processes.</p>"},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/#vscode-live-share","title":"VSCode Live Share","text":"<p>VSCode Live Share is specifically designed for pair programming and enables you to work on the same codebase, in real-time, with your team members. The arduous process of configuring complex setups, grappling with confusing configurations, straining one's eyes to work on small screens, or physically switching keyboards is not a problem with LiveShare. This innovative solution enables seamless sharing of your development environment with your team members, facilitating smooth collaborative coding experiences.</p> <p>Fully integrated into Visual Studio Code and Visual Studio, LiveShare offers the added benefit of terminal sharing, debug session collaboration, and host machine control. When paired with GitHub Codespaces, it presents a potent tool set for effective pair programming.</p> <p>Tip: Share VSCode extensions (including Live Share) using a base devcontainer.json. This ensure all team members have available the same set of extensions, and allow them to focus in solving the business needs from day one.</p>"},{"location":"agile-development/advanced-topics/collaboration/pair-programming-tools/#resources","title":"Resources","text":"<ul> <li>GitHub Codespaces.</li> <li>VSCode Live Share.</li> <li>Create a Dev Container.</li> <li>How companies have optimized the humble office water cooler.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/social-question/","title":"Social Question of the Day","text":"<p>The social question of the day is an optional short question to follow the three project questions in the daily stand-up. It develops team cohesion and interpersonal trust over the course of an engagement by facilitating the sharing of personal preferences, lifestyle, or other context.</p> <p>The social question should be chosen before the stand-up. The facilitator should select the question either independently or from the team's asynchronous suggestions. This minimizes delays at the start of the stand-up.</p> <p>Tip: having the stand-up facilitator role rotate each sprint lets the facilitator choose the social question independently without burdening any one team member.</p>"},{"location":"agile-development/advanced-topics/collaboration/social-question/#properties-of-a-good-question","title":"Properties of a Good Question","text":"<p>A good question has a brief answer with small optional elaboration. A yes or no answer doesn't tell you very much about someone, while knowing that their favorite fruit is a durian is informative.</p> <p>Good questions are low in consequence but allow controversy. Watching someone strongly exclaim that salmon and lox on cinnamon-raisin is the best bagel order is endearing. As a corollary, a good question is one someone is likely to be passionate about. You know a little more about a team member's personality if their eyes light up when describing their favorite karaoke song.</p>"},{"location":"agile-development/advanced-topics/collaboration/social-question/#starter-list-of-questions","title":"Starter List of Questions","text":"<p>Potentially good questions include:</p> <ul> <li>What's your Starbucks order?</li> <li>What's your favorite operating system?</li> <li>What's your favorite version of Windows?</li> <li>What's your favorite plant, houseplant or otherwise?</li> <li>What's your favorite fruit?</li> <li>What's your favorite fast food?</li> <li>What's your favorite noodle?</li> <li>What's your favorite text editor?</li> <li>Mountains or beach?</li> <li>DC or Marvel?</li> <li>Coffee with one person from history: who?</li> <li>What's your silliest online purchase?</li> <li>What's your alternate career?</li> <li>What's the best bagel topping?</li> <li>What's your guilty TV pleasure?</li> <li>What's your go-to karaoke song?</li> <li>Would you rather see the past or the future?</li> <li>Would you rather be able to teleport or to fly?</li> <li>Would you rather live underwater or in space for a year?</li> <li>What's your favorite phone app?</li> <li>What's your favorite fish, to eat or otherwise?</li> <li>What was your best costume?</li> <li>Who is someone you admire (from history, from your personal life, etc.)? Give one reason why.</li> <li>What's the best compliment you've ever received?</li> <li>What's your favorite or most used emoji right now?</li> <li>What was your biggest DIY project?</li> <li>What's a spice that you use on everything?</li> <li>What's your top Spotify (or just your favorite) genre/artist for this year?</li> <li>What was your first computer?</li> <li>What's your favorite kind of taco?</li> <li>What's your favorite decade?</li> <li>What's the best way to eat potatoes?</li> <li>What was your best vacation (stay-cations acceptable)?</li> <li>Favorite cartoon?</li> <li>Pick someone in your family and tell us something awesome about them.</li> <li>What was your longest road trip?</li> <li>What thing do you remember learning when you were young that is taught differently now?</li> <li>What was your favorite toy as a child?</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/teaming-up/","title":"Engagement Team Development","text":"<p>In every ISE engagement, dynamics are different so are the team requirements. Based on transfer learning among teams, we aim to build right \"code-with\" environments in every team.</p> <p>This documentation gives a high-level template with some suggestions by aiming to accelerate team swarming phase to achieve a high speed agility however it has no intention to provide a list of \"must-do\" items.</p>"},{"location":"agile-development/advanced-topics/collaboration/teaming-up/#identification","title":"Identification","text":"<p>As it's stated in Tuckman's team phases, traditional team development has several stages. However those phases can be extremely fast or sometimes mismatched in teams due to external factors, what applies to ISE engagements.</p> <p>In order to minimize the risk and set the expectations on the right way for all parties, an identification phase is important to understand each other. Some potential steps in this phase may be as following (not limited):</p> <ul> <li>Working agreement</li> </ul> <ul> <li> <p>Identification of styles/preferences in communication, sharing, learning, decision making of each team member</p> <ul> <li>Talking about necessity of pair programming</li> <li>Decisions on backlog management &amp; refinement meetings, weekly design sessions, social time sessions...etc.</li> <li>Sync/Async communication methods, work hours/flexible times</li> </ul> </li> </ul> <ul> <li>Decisions and identifications of charts that will be helpful to provide transparent and true information to everyone</li> </ul> <ul> <li> <p>Identification of \"Software Craftspersonship\" areas which means the tools and methods will be widely used during the engagement and taking the required actions on team upskilling side if necessary.</p> <ul> <li>GitHub, VSCode LiveShare, AzDevOps, necessary development tools &amp; libraries ... more.</li> <li>If upskilling on certain topic(s) is needed, identifying the areas and arranging code spikes for increasing the team knowledge on the regarding topic(s).</li> </ul> </li> </ul> <ul> <li>Identification of communication channels, feedback loops and recurrent team call slots out of regular sprint meetings</li> </ul> <ul> <li>Introduction to Technical Agility Team Manifesto and planning the technical delivery by aiming to keep technical debt risk minimum.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/teaming-up/#following-the-plan-and-agile-debugging","title":"Following the Plan and Agile Debugging","text":"<p>Identification phase accelerates the process of building a safe environment for every individual in the team, later on team has the required assets to follow the plan. And it is team's itself responsibility (engineers,PO,Process Lead) to debug their Agility level.</p> <p>In every team stabilization takes time and pro-active agile debugging is the best accelerator to decrease the distraction away from sprint/engagement goal. Team is also responsible to keep the plan up-to-date based on team changes/needs and debugging results.</p> <p>Just as an example, agility debugging activities may include:</p> <ul> <li>Dashboards related with \"Goal\" such as burndown/burnout, Item/PR Aging, Mood Chart ..etc. are accessible to the team and team is always up-to-date</li> </ul> <ul> <li>Backlog Refinement meetings<ul> <li>Size of stories (Too big? Too small?)</li> <li>Are \"User Stories\" and \"Tasks\" clear ?</li> <li>Are Acceptance Criteria enough and right?</li> <li>Is everyone ready-to-go after taking the User Story/Task?</li> </ul> </li> </ul> <ul> <li>Running efficient retrospectives</li> </ul> <ul> <li>Is the Sprint Goal clear in every iteration ?</li> </ul> <ul> <li>Is the estimation process in the team improving over time or does it meet the delivery/workload prediction?</li> </ul> <p>Kindly check Scrum Values to have a better understanding to improve team commitment.</p> <p>Following that, above suggestions aim to remove agile/team disfunctionalities and provide a broader team understanding, potential time savings and full transparency.</p>"},{"location":"agile-development/advanced-topics/collaboration/teaming-up/#resources","title":"Resources","text":"<ul> <li>Tuckman's Stages of Group Development</li> <li>Scrum Values</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/","title":"Virtual Collaboration and Pair Programming","text":"<p>Pair programming is the de facto work method that most large engineering organizations use for \u201chands on keyboard\u201d coding. Two developers, working synchronously, looking at the same screen and attempting to code and design together, which often results in better and clearer code than either could produce individually.</p> <p>Pair programming works well under the correct circumstances, but it loses some of its charm when executed in a completely virtual setting. The virtual setup still involves two developers looking at the same screen and talking out their designs, but there are often logistical issues to deal with, including lag, microphone set up issues, workspace and personal considerations, and many other small, individually trivial problems that worsen the experience.</p> <p>Virtual work patterns are different from the in-person patterns we are accustomed to. Pair programming at its core is based on the following principles:</p> <ol> <li>Generating clarity through communication</li> <li>Producing higher quality through collaboration</li> <li>Creating ownership through equal contribution</li> </ol> <p>Pair programming is one way to achieve these results. Red Team Testing (RTT) is an alternate programming method that uses the same principles but with some of the advantages that virtual work methods provide.</p>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/#red-team-testing-rtt","title":"Red Team Testing (RTT)","text":"<p>Red Team Testing borrows its name from the \u201cRed Team\u201d and \u201cBlue Team\u201d paradigm of penetration testing, and is a collaborative, parallel way of working virtually. In Red Team Testing, two developers jointly decide on the interface, architecture, and design of the program, and then separate for the implementation phase. One developer writes tests using the public interface, attempting to perform edge case testing, input validation, and otherwise stress testing the interface. The second developer is simultaneously writing the implementation which will eventually be tested.</p> <p>Red Team Testing has the same philosophy as any other Test-Driven Development lifecycle: All implementation is separated from the interface, and the interface can be tested with no knowledge of the implementation.</p> <p></p>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/#steps","title":"Steps","text":"<ol> <li>Design Phase: Both developers design the interface together. This includes:     - Method signatures and names     - Writing documentation or docstrings for what the methods are intended to do.     - Architecture decisions that would influence testing (Factory patterns, etc.)</li> <li>Implementation Phase: The developers separate and parallelize work, while continuing to communicate.     - Developer A will design the implementation of the methods, adhering to the previously decided design.     - Developer B will concurrently write tests for the same method signatures, without knowing details of the implementation.</li> <li>Integration &amp; Testing Phase: Both developers commit their code and run the tests.     - Utopian Scenario: All tests run and pass correctly.     - Realistic Scenario: The tests have either broken or failed due to flaws in testing. This leads to further clarification of the design and a discussion of why the tests failed.</li> <li>The developers will repeat the three phases until the code is functional and tested.</li> </ol>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/#when-to-follow-the-rtt-strategy","title":"When to Follow the RTT Strategy","text":"<p>RTT works well under specific circumstances. If collaboration needs to happen virtually, and all communication is virtual, RTT reduces the need for constant communication while maintaining the benefits of a joint design session. This considers the human element: Virtual communication is more exhausting than in person communication.</p> <p>RTT also works well when there is complete consensus, or no consensus at all, on what purpose the code serves. Since creating the design jointly and agreeing to implement and test against it are part of the RTT method, RTT forcibly creates clarity through iteration and communication.</p>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/#benefits","title":"Benefits","text":"<p>RTT has many of the same benefits as Pair Programming and Test-Driven development but tries to update them for a virtual setting.</p> <ul> <li>Code implementation and testing can be done in parallel, over long distances or across time zones, which reduces the overall time taken to finish writing the code.</li> <li>RTT maintains the pair programming paradigm, while reducing the need for video communication or constant communication between developers.</li> <li>RTT allows detailed focus on design and engineering alignment before implementing any code, leading to cleaner and simpler interfaces.</li> <li>RTT encourages testing to be prioritized alongside implementation, instead of having testing follow or be influenced by the implementation of the code.</li> <li>Documentation is inherently a part of RTT, since both the implementer and the tester need correct, up to date documentation, in the implementation phase.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/virtual-collaboration/#what-you-need-for-rtt-to-work-well","title":"What You Need for RTT to Work Well","text":"<ul> <li>Demand for constant communication and good teamwork may pose a challenge; daily updates amongst team members are essential to maintain alignment on varying code requirements.</li> <li>Clarity of the code design and testing strategy must be established beforehand and documented as reference. Lack of an established design will cause misalignment between the two major pieces of work and a need for time-consuming refactoring.</li> <li>RTT does not work well if only one developer has knowledge of the overall design. Team communication is critical to ensuring that every developer involved in RTT is on the same page.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/","title":"Why Collaboration","text":""},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#why-is-collaboration-important","title":"Why is Collaboration Important","text":"<p>In engagements, we aim to be highly collaborative because when we code together, we perform better, have a higher sprint velocity, and have a greater degree of knowledge sharing across the team.</p> <p>There are two common patterns we use for collaboration: Pairing and swarming.</p> <p>Pair programming (\u201cpairing\u201d) - two software engineers assigned to, and working on, one shared story at a time during the sprint. The Dev Lead assigns a user story to two engineers -- one primary engineer (story owner) and one secondary engineer (pairing assignee).</p> <p>Swarm programming (\u201cswarming\u201d) - three or more software engineers collaborating on a high-priority item to bring it to completion.</p>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#how-to-pair-program","title":"How to Pair Program","text":"<p>As mentioned, every story is intentionally assigned to a pair. The pairing assignee may be in the process of upskilling, nevertheless, they are equal partners in the development effort. Below are some general guidelines for pairing:</p> <ul> <li>Upon assignment of the story/product backlog item (PBI), the pair needs to be deliberate about defining how to work together and have a firm definition of the work to be completed. This information should be expressed clearly in the story\u2019s description and acceptance criteria. The expectations about this need to be communicated and agreed upon by both engineers and should be done prior to any actual working sessions.</li> <li>The story owner and pairing assignee do not merely split the work up and sync regularly \u2013 they actively work together on the same tasks, and might share their screens via a Teams online session. Collaborative tools like VS Live Share can be preferable to sharing screens. Not all collaboration needs to be screen-share based.</li> <li>During the collaborative sessions, one engineer provides the development environment while the other actively views and comments verbally.</li> <li>Engineers trade places often from one session to the next so that everyone has time in control of the keyboard.</li> <li>Engineers leverage feature branches for the collaboration during the development of each story to have small Pull Requests (PRs) (as opposed to a single giant PR) at the end of the sprint.</li> <li>Code is committed to the repository by both members of the assigned pair where and when it makes sense as tasks were completed.</li> <li>The pairing assignee is the voice representing the pair during the daily standup while being supported by the story owner.</li> <li>Having the names of both individuals (owner and pair assignee) visible on the PBI can be helpful during sprint ceremonies and lead to greater accountability by the pairing assignee. An example of this using Azure DevOps cards can be found here.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#why-pair-programming-helps-collaboration","title":"Why Pair Programming Helps Collaboration","text":"<p>Pair programming helps collaboration because both engineers share equal responsibility for bringing the story to completion. This is a mutually beneficial exercise because, while the story owner often has more experience to lean on, the pairing assignee brings a fresh view that is unclouded by repetition.</p> <p>Some other benefits include:</p> <ul> <li>Fewer defects and increased accountability. Having two sets of eyes allows the engineers more opportunity to catch errors and to remember often-overlooked tasks such as writing unit and integration tests.</li> <li>Pairing allows engineers with different experience and expertise to learn from one another by collaborating and receiving feedback in real-time. Instead of having an engineer work alone on a task for long hours and hit an isolation breaking point, pairing allows the pair to check in with one another.</li> <li>Even something as simple as describing the problem out loud can help uncover issues or bugs in the code.</li> <li>Pairing can help brainstorming as well as validating details such as making the variable names consistent.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#when-to-swarm-program","title":"When to Swarm Program","text":"<p>It is important to know that not every PBI needs to use swarming. Some sprints may not even warrant swarming at all. Swarm when:</p> <ul> <li>The work is complex enough to have collective minds collaborating (not because the quantity of work is more than what would be completed in one sprint).</li> <li>The task that the swarm works on has become (or is in imminent danger of becoming) a blocker to other stories.</li> <li>An unknown is discovered that needs a collaborative effort to form a decision on how to move forward. The collective knowledge and expertise help move the story forward more quickly and ultimately produced better quality code.</li> <li>A conflict or unresolved difference of opinion arises during a pairing session. Promote the work to become a swarming session to help resolve the conflict.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#how-to-swarm-program","title":"How to Swarm Program","text":"<p>As soon the pair finds out that the PBI will warrant swarming, the pair brings it up to the rest of the team (via parking lot during stand-up or asynchronously). Members of the team agree or volunteer to assist.</p> <ul> <li>The story owner (or pairing assignee) sends Teams call invite to the interested parties. This allows the swarm to have dedicated focus time by blocking time in calendars.</li> <li>During a swarming session, an engineer can branch out if there is something that needs to be handled while the swarm tackles the main problem at hand, then reconnects and reports back. This allows the swarm to focus on a core aspect and to be all on the same page.</li> <li>The Teams call is repeated until resolution is found or alternative path forward is formulated.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#why-swarm-programming-helps-collaboration","title":"Why Swarm Programming Helps Collaboration","text":"<ul> <li>Swarming allows the collective knowledge and expertise of the team to come together in a focused and unified way.</li> <li>Not only does swarming help close out the item faster, but it also helps the team understand each other\u2019s strengths and weaknesses.</li> <li>Allows the team to build a higher level of trust and work as a cohesive unit.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#when-to-decide-to-swarm-pair-andor-split","title":"When to Decide to Swarm, Pair, and/or Split","text":"<ul> <li>While a lot of time can be spent on pair programming, it does make sense to split the work when folks understand how the work will be carried out, and the work to be done is largely prescriptive.</li> <li>Once the story has been jointly tasked out by both engineers, the engineers may choose to tackle some tasks separately and then combine the work together at the end.</li> <li>Pair programming is more helpful when the engineers do not have perfect clarity about what is needed to be done or how it can be done.</li> <li>Swarming is done when the two engineers assigned to the story need an additional sounding board or need expertise that other team members could provide.</li> </ul>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#benefits-of-increased-collaboration","title":"Benefits of Increased Collaboration","text":"<p>Knowledge sharing and bringing ISE and customer engineers together in a \u2018code-with\u2019 manner is an important aspect of ISE engagements. This grows both our customers\u2019 and our ISE team\u2019s capability to build on Azure. We are responsible for demonstrating engineering fundamentals and leaving the customer in a better place after we disengage. This can only happen if we collaborate and engage together as a team. In addition to improved software quality, this also adds a beneficial social aspect to the engagements.</p>"},{"location":"agile-development/advanced-topics/collaboration/why-collaboration/#resources","title":"Resources","text":"<ul> <li>How to add a pairing custom field in Azure DevOps User Stories - adding a custom field of type Identity in Azure DevOps for pairing</li> <li>On Pair Programming - Martin Fowler</li> <li>Pair Programming hands-on lessons - these can be used (and adapted) to support bringing pair programming into your team (MS internal or including customers)</li> <li>Effortless Pair Programming with GitHub Codespaces and VSCode</li> </ul>"},{"location":"agile-development/advanced-topics/effective-organization/delivery-plan/","title":"Delivery Plan","text":""},{"location":"agile-development/advanced-topics/effective-organization/delivery-plan/#goals","title":"Goals","text":"<p>While Scrum does not require and discourages planning more than one sprint at a time. Most of us work in enterprises where we are dependent outside teams (for example: marketing, sales, support).</p> <p>A rough assessment of the planned project scope is achievable within a reasonable time frame and resources. The goal is to have a rough plan and estimate as a starting point, not to implement \"Agilefall.\"</p> <p>Note that this is just a starting point to enable planning discussions. We expect the actual schedule to evolve and shift over time and that you will update the scope and timeline as you progress.</p> <p>Delivery Plans ensure your teams are aligning with your organizational goals.</p>"},{"location":"agile-development/advanced-topics/effective-organization/delivery-plan/#benefits","title":"Benefits","text":"<ul> <li>As you complete the assessment, you can push back on the scope, time frame or ask for more resources.</li> <li>As you progress in your project/product delivery, you can highlight risks to the scope, time frame, and resources.</li> </ul>"},{"location":"agile-development/advanced-topics/effective-organization/delivery-plan/#approach","title":"Approach","text":"<p>One approach you can take to accomplish is with stickies and a spreadsheet.</p> <ol> <li> <p>Stack rank the features for everything in your backlog</p> <p>- Functional Features   - Non-functional Features   - User Research and Design   - Testing   - Documentation   - Knowledge Transfer/Support Processes</p> </li> <li> <p>T-Shirt Features in terms of working weeks per person. In some scenarios, you have no idea how complex the work. In this situation, you can ask for time to conduct a spike (timebox the effort so you can get back on time).</p> </li> <li> <p>Calculate the capacity for the team based on the number of weeks person with his/her start and end date and minus holidays, vacation, conferences, training, and onboarding days. Also, minus time if the person is also working on defects and support.</p> </li> </ol> <p>Based on your capacity, you know have the options</p> <ul> <li>Ask for more resources. Caution: onboarding new resources take time.</li> <li>Reduce the scope to the most MVP.  Caution: as you trim more of the scope, it might not be valuable anymore to the customer. Consider a cupcake which is everything you need. You don't want to skim off the frosting.</li> <li>Ask for more time. Usually, this is the most flexible, but if there is a marketing date that you need to hit, this might be as flexible.</li> </ul>"},{"location":"agile-development/advanced-topics/effective-organization/delivery-plan/#tools","title":"Tools","text":"<p>You can also leverage one of these tools by creating your epics and features and add the weeks estimates.</p> <p>The Plans (Preview) feature on Azure DevOps will help you make a plan. Delivery Plans provide a schedule of stories or features your team plan to deliver. Delivery Plans show the scheduled work items by a sprint (iteration path) of selected teams against a calendar view.</p> <p>Confluence JIRA, Trello, Rally, Asana, Basecamp, and GitHub Issues are other similar tools in the market (some are free, others you pay a monthly fee, or you can install on-prem) that you can leverage.</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/","title":"Scrum of Scrums","text":"<p>Scrum of scrums is a technique used to scale Scrum to a larger group working towards the same project goal. In Scrum, we consider a team being too big when going over 10-12 individuals. This should be decided on a case by case basis. If the project is set up in multiple work streams that contain a fixed group of people and a common stand-up meeting is slowing down productivity: scrum of scrums should be considered. The team would identify the different subgroups that would act as a separate scrum teams with their own backlog, board and stand-up.</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/#goals","title":"Goals","text":"<p>The goal of the scrum of scrums ceremony is to give sub-teams the agility they need while not loosing visibility and coordination. It also helps to ensure that the sub-teams are achieving their sprint goals, and they are going in the right direction to achieve the overall project goal.</p> <p>The scrum of scrums ceremony happens every day and can be seen as a regular stand-up:</p> <ul> <li>What was done the day before by the sub-team.</li> <li>What will be done today by the sub-team.</li> <li>What are blockers or other issues for the sub-team.</li> <li>What are the blockers or issues that may impact other sub-teams.</li> </ul> <p>The outcome of the meeting will result in a list of impediments related to coordination of the whole project. Solutions could be: agreeing on interfaces between teams, discussing architecture changes, evolving responsibility boundaries, etc.</p> <p>This list of impediments is usually managed in a separate backlog but does not have to.</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/#participation","title":"Participation","text":"<p>The common guideline is to have on average one person per sub-team to participate in the scrum of scrums. Ideally, the Process Lead of each sub-team would represent them in this ceremony. In some instances, the representative for the day is selected at the end of each sub-team daily stand-up and could change every day. In practice, having a fixed representative tends to be more efficient in the long term.</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/#impact","title":"Impact","text":"<p>This practice is helpful in cases of longer projects and with a larger scope, requiring more people. When having more people, it is usually easier to divide the project in sub-teams. Having a daily scrum of scrums improves communication, lowers the risk of integration issues and increases the project chances of success.</p> <p>When choosing to implement Scrum of Scrums, you need to keep in mind that some team members will have additional meetings to coordinate and participate in. Also: all team members for each sub-team need to be updated on the decisions at a later point to ensure a good flow of information.</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/#measures","title":"Measures","text":"<p>The easiest way to measure the impact is by tracking the time to resolve issues in the scrum of scrums backlog. You can also track issues reported during the retrospective related to global coordination (is it well done? can it be improved?).</p>"},{"location":"agile-development/advanced-topics/effective-organization/scrum-of-scrums/#facilitation-guidance","title":"Facilitation Guidance","text":"<p>This should be facilitated like a regular stand-up.</p>"},{"location":"agile-development/team-agreements/definition-of-done/","title":"Definition of Done","text":"<p>To close a user story, a sprint, or a milestone it is important to verify that the tasks are complete.</p> <p>The development team should decide together what their Definition of Done is and document this in the project. Below are some examples of checks to verify that the user story, sprint, task is completed.</p>"},{"location":"agile-development/team-agreements/definition-of-done/#featureuser-story","title":"Feature/User Story","text":"<ul> <li> Acceptance criteria are met</li> <li> Refactoring is complete</li> <li> Code builds with no error</li> <li> Unit tests are written and pass</li> <li> Existing Unit Tests pass</li> <li> Sufficient diagnostics/telemetry are logged</li> <li> Code review is complete</li> <li> UX review is complete (if applicable)</li> <li> Documentation is updated</li> <li> The feature is merged into the develop branch</li> <li> The feature is signed off by the product owner</li> </ul>"},{"location":"agile-development/team-agreements/definition-of-done/#sprint-goal","title":"Sprint Goal","text":"<ul> <li> Definition of Done for all user stories included in the sprint are met</li> <li> Product backlog is updated</li> <li> Functional and Integration tests pass</li> <li> Performance tests pass</li> <li> End 2 End tests pass</li> <li> All bugs are fixed</li> <li> The sprint is signed off from developers, software architects, project manager, product owner etc.</li> </ul>"},{"location":"agile-development/team-agreements/definition-of-done/#releasemilestone","title":"Release/Milestone","text":"<ul> <li> Code Complete (goals of sprints are met)</li> <li> Release is marked as ready for production deployment by product owner</li> </ul>"},{"location":"agile-development/team-agreements/definition-of-ready/","title":"Definition of Ready","text":"<p>When the development team picks a user story from the top of the backlog, the user story needs to have enough detail to estimate the work needed to complete the story within the sprint. If it has enough detail to estimate, it is Ready to be developed.</p> <p>If a user story is not Ready in the beginning of the Sprint it increases the chance that the story will not be done at the end of this sprint.</p>"},{"location":"agile-development/team-agreements/definition-of-ready/#what-it-is","title":"What it is","text":"<p>Definition of Ready is the agreement made by the scrum team around how complete a user story should be in order to be selected as candidate for estimation in the sprint planning. These can be codified as a checklist in user stories using GitHub Issue Templates or Azure DevOps Work Item Templates.</p> <p>It can be understood as a checklist that helps the Product Owner to ensure that the user story they wrote contains all the necessary details for the scrum team to understand the work to be done.</p>"},{"location":"agile-development/team-agreements/definition-of-ready/#examples-of-ready-checklist-items","title":"Examples of Ready Checklist Items","text":"<ul> <li> Does the description have the details including any input values required to implement the user story?</li> <li> Does the user story have clear and complete acceptance criteria?</li> <li> Does the user story address the business need?</li> <li> Can we measure the acceptance criteria?</li> <li> Is the user story small enough to be implemented in a short amount of time, but large enough to provide value to the customer?</li> <li> Is the user story blocked? For example, does it depend on any of the following:<ul> <li>The completion of unfinished work</li> <li>A deliverable provided by another team (code artifact, data, etc...)</li> </ul> </li> </ul>"},{"location":"agile-development/team-agreements/definition-of-ready/#who-writes-it","title":"Who Writes it","text":"<p>The ready checklist can be written by a Product Owner in agreement with the development team and the Process Lead.</p>"},{"location":"agile-development/team-agreements/definition-of-ready/#when-should-a-definition-of-ready-be-updated","title":"When Should a Definition of Ready be Updated","text":"<p>Update or change the definition of ready anytime the scrum team observes that there are missing information in the user stories that recurrently impacts the planning.</p>"},{"location":"agile-development/team-agreements/definition-of-ready/#what-should-be-avoided","title":"What Should be Avoided","text":"<p>The ready checklist should contain items that apply broadly. Don't include items or details that only apply to one or two user stories. This may become an overhead when writing the user stories.</p>"},{"location":"agile-development/team-agreements/definition-of-ready/#how-to-get-stories-ready","title":"How to get Stories Ready","text":"<p>In the case that the highest priority work is not yet ready, it still may be possible to make forward progress. Here are some strategies that may help:</p> <ul> <li>Backlog Refinement sessions are a good time to validate that high priority user stories are verified to have a clear description, acceptance criteria and demonstrable business value. It is also a good time to breakdown large stories will likely not be completable in a single sprint.</li> <li>Prioritization sessions are a good time to prioritize user stories that unblock other blocked high priority work.</li> <li>Blocked user stories can often be broken down in a way that unblocks a portion of the original stories scope. This is a good way to make forward progress even when some work is blocked.</li> </ul>"},{"location":"agile-development/team-agreements/team-manifesto/","title":"Team Manifesto","text":""},{"location":"agile-development/team-agreements/team-manifesto/#introduction","title":"Introduction","text":"<p>ISE teams work with a new development team in each customer engagement which requires a phase of introduction &amp; knowledge transfer before starting an engagement.</p> <p>Completion of this phase of ice-breakers and discussions about the standards takes time, but is required to start increasing the learning curve of the new team.</p> <p>A team manifesto is a light-weight one page agile document among team members which summarizes the basic principles and values of the team and aiming to provide a consensus about technical expectations from each team member in order to deliver high quality output at the end of each engagement.</p> <p>It aims to reduce the time on setting the right expectations without arranging longer \"team document reading\" meetings and provide a consensus among team members to answer the question - \"How does the new team develop the software?\" - by covering all engineering fundamentals and excellence topics such as release process, clean coding, testing.</p> <p>Another main goal of writing the manifesto is to start a conversation during the \"manifesto building session\" to detect any differences of opinion around how the team should work.</p> <p>It also serves in the same way when a new team member joins to the team. New joiners can quickly get up to speed on the agreed standards.</p>"},{"location":"agile-development/team-agreements/team-manifesto/#how-to-build-a-team-manifesto","title":"How to Build a Team Manifesto","text":"<p>It can be said that the best time to start building it is at the very early phase of the engagement when teams meet with each other for swarming or during the preparation phase.</p> <p>It is recommended to keep team manifesto as simple as possible, so preferably, one-page simple document which doesn't include any references or links is a nice format for it. If there is a need for providing knowledge on certain topics, the way to do is delivering brown-bag sessions, technical katas, team practices, documentations and others later on.</p> <p>A few important points about the team manifesto</p> <ul> <li>The team manifesto is built by the development team itself</li> <li>It should cover all required technical engineering points for the excellence as well as behavioral agility mindset items that the team finds relevant</li> <li>It aims to give a common understanding about the desired expertise, practices and/or mindset within the team</li> <li>Based on the needs of the team and retrospective results, it can be modified during the engagement.</li> </ul> <p>In ISE, we aim for quality over quantity, and well-crafted software as well as to a comfortable/transparent environment where each team member can reach their highest potential.</p> <p>The difference between the team manifesto and other team documents is that it is used to give a short summary of expectations around the technical way of working and supported mindset in the team, before code-with sprints starts.</p> <p>Below, you can find some including, but not limited, topics many teams touch during engagements,</p> Topic What is it about ? Collective Ownership Does team own the code rather than individuals? What is the expectation? Respect Any preferred statement about it's a \"must-have\" team value Collaboration Any preferred statement about how does team want to collaborate ? Transparency A simple statement about it's a \"must-have\" team value and if preferred, how does this being provided by the team ? meetings, retrospective, feedback mechanisms etc. Craftspersonship Which tools such as Git, VS Code LiveShare, etc. are being used ? What is the definition of expected best usage of them? PR sizing What does team prefer in PRs ? Branching Team's branching strategy and standards Commit standards Preferred format in commit messages, rules and more Clean Code Does team follow clean code principles ? Pair/Mob Programming Will team apply pair/mob programming ? If yes, what programming styles are suitable for the team ? Release Process Principles around release process such as quality gates, reviewing process ...etc. Code Review Any rule for code reviewing such as min number of reviewers, team rules ...etc. Action Readiness How the backlog will be refined? How do we ensure clear Definition of Done and Acceptance Criteria ? TDD Will the team follow TDD ? Test Coverage Is there any expected number, percentage or measurement ? Dimensions in Testing Required tests for high quality software, eg : unit, integration, functional, performance, regression, acceptance Build process build for all? or not; The clear statement of where code and under what conditions code should work ? eg : OS, DevOps, tool dependency Bug fix The rules of bug fixing in the team ? eg: contact people, attaching PR to the issue etc. Technical debt How does team manage/follow it? Refactoring How does team manage/follow it? Agile Documentation Does team want to use diagrams and tables more rather than detailed KB articles ? Efficient Documentation When is it necessary ? Is it a prerequisite to complete tasks/PRs etc.? Definition of Fun How will we have fun for relaxing/enjoying the team spirit during the engagement?"},{"location":"agile-development/team-agreements/team-manifesto/#tools","title":"Tools","text":"<p>Generally team sessions are enough for building a manifesto and having a consensus around it, and if there is a need for improving it in a structured way, there are many blogs and tools online, any retrospective tool can be used.</p>"},{"location":"agile-development/team-agreements/team-manifesto/#resources","title":"Resources","text":"<p>Technical Agility*</p>"},{"location":"agile-development/team-agreements/working-agreement/","title":"Sections of a Working Agreement","text":"<p>A working agreement is a document, or a set of documents that describe how we work together as a team and what our expectations and principles are.</p> <p>The working agreement created by the team at the beginning of the project, and is stored in the repository so that it is readily available for everyone working on the project.</p> <p>The following are examples of sections and points that can be part of a working agreement but each team should compose their own, and adjust times, communication channels, branch naming policies etc. to fit their team needs.</p>"},{"location":"agile-development/team-agreements/working-agreement/#general","title":"General","text":"<ul> <li>We work as one team towards a common goal and clear scope</li> <li>We make sure everyone's voice is heard, listened to</li> <li>We show all team members equal respect</li> <li>We work as a team to have common expectations for technical delivery that are documented in a Team Manifesto.</li> <li>We make sure to spread our expertise and skills in the team, so no single person is relied on for one skill</li> <li>All times below are listed in CET</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#communication","title":"Communication","text":"<ul> <li>We communicate all information relevant to the team through the Project Teams channel</li> <li>We add all technical spikes, trade studies, and other technical documentation to the project repository through async design reviews in PRs</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#work-life-balance","title":"Work-life Balance","text":"<ul> <li>Our office hours, when we can expect to collaborate via Microsoft Teams, phone or face-to-face are Monday to Friday 10AM - 5PM</li> <li>We are not expected to answer emails past 6PM, on weekends or when we are on holidays or vacation.</li> <li>We work in different time zones and respect this, especially when setting up recurring meetings.</li> <li>We record meetings when possible, so that team members who could not attend live can listen later.</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#quality-and-not-quantity","title":"Quality and not Quantity","text":"<ul> <li>We agree on a Definition of Done for our user story's and sprints and live by it.</li> <li>We follow engineering best practices like the Engineering Fundamentals Engineering Playbook</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#scrum-rhythm","title":"Scrum Rhythm","text":"Activity When Duration Who Accountable Goal Project Standup Tue-Fri 9AM 15 min Everyone Process Lead What has been accomplished, next steps, blockers Sprint Demo Monday 9AM 1 hour Everyone Dev Lead Present work done and sign off on user story completion Sprint Retro Monday 10AM 1 hour Everyone Process Lead Dev Teams shares learnings and what can be improved Sprint Planning Monday 11AM 1 hour Everyone PO Size and plan user stories for the sprint Task Creation After Sprint Planning - Dev Team Dev Lead Create tasks to clarify and determine velocity Backlog refinement Wednesday 2PM 1 hour Dev Lead, PO PO Prepare for next sprint and ensure that stories are ready for next sprint."},{"location":"agile-development/team-agreements/working-agreement/#process-lead","title":"Process Lead","text":"<p>The Process Lead is responsible for leading any scrum or agile practices to enable the project to move forward.</p> <ul> <li>Facilitate standup meetings and hold team accountable for attendance and participation.</li> <li>Keep the meeting moving as described in the Project Standup page.</li> <li>Make sure all action items are documented and ensure each has an owner and a due date and tracks the open issues.</li> <li>Notes as needed after planning / stand-ups.</li> <li>Make sure that items are moved to the parking lot and ensure follow-up afterwards.</li> <li>Maintain a location showing team\u2019s work and status and removing impediments that are blocking the team.</li> <li>Hold the team accountable for results in a supportive fashion.</li> <li>Make sure that project and program documentation are up-to-date.</li> <li>Guarantee the tracking/following up on action items from retrospectives (iteration and release planning) and from daily standup meetings.</li> <li>Facilitate the sprint retrospective.</li> <li>Coach Product Owner and the team in the process, as needed.</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#backlog-management","title":"Backlog Management","text":"<ul> <li>We work together on a Definition of Ready and all user stories assigned to a sprint need to follow this</li> <li>We communicate what we are working on through the board</li> <li>We assign ourselves a task when we are ready to work on it (not before) and move it to active</li> <li>We capture any work we do related to the project in a user story/task</li> <li>We close our tasks/user stories only when they are done (as described in the Definition of Done)</li> <li>We work with the PM if we want to add a new user story to the sprint</li> <li>If we add new tasks to the board, we make sure it matches the acceptance criteria of the user story (to avoid scope creep).   If it doesn't match the acceptance criteria we should discuss with the PM to see if we need a new user story for the task or if we should adjust the acceptance criteria.</li> </ul>"},{"location":"agile-development/team-agreements/working-agreement/#code-management","title":"Code Management","text":"<ul> <li>We follow the git flow branch naming convention for branches and identify the task number e.g. <code>feature/123-add-working-agreement</code></li> <li>We merge all code into main branches through PRs</li> <li>All PRs are reviewed by one person from  and one from Microsoft (for knowledge transfer and to ensure code and security standards are met) <li>We always review existing PRs before starting work on a new task</li> <li>We look through open PRs at the end of stand-up to make sure all PRs have reviewers.</li> <li>We treat documentation as code and apply the same standards to Markdown as code</li>"},{"location":"automated-testing/","title":"Testing","text":""},{"location":"automated-testing/#why-testing","title":"Why Testing","text":"<ul> <li>Tests allow us to find flaws in our software</li> <li>Good tests document the code by describing the intent</li> <li>Automated tests saves time, compared to manual tests</li> <li>Automated tests allow us to safely change and refactor our code without introducing regressions</li> </ul>"},{"location":"automated-testing/#the-fundamentals","title":"The Fundamentals","text":"<ul> <li>We consider code to be incomplete if it is not accompanied by tests</li> <li>We write unit tests (tests without external dependencies) that can run before every PR merge to validate that we don\u2019t have regressions</li> <li>We write Integration tests/E2E tests that test the whole system end to end, and run them regularly</li> <li>We write our tests early and block any further code merging if tests fail.</li> <li>We run load tests/performance tests where appropriate to validate that the system performs under stress</li> </ul>"},{"location":"automated-testing/#build-for-testing","title":"Build for Testing","text":"<p>Testing is a critical part of the development process.  It is important to build your application with testing in mind.  Here are some tips to help you build for testing:</p> <ul> <li>Parameterize everything. Rather than hard-code any variables, consider making everything a configurable parameter with a reasonable default. This will allow you to easily change the behavior of your application during testing. Particularly during performance testing, it is common to test different values to see what impact that has on performance. If a range of defaults need to change together, consider one or more parameters which set \"modes\", changing the defaults of a group of parameters together.</li> </ul> <ul> <li>Document at startup. When your application starts up, it should log all parameters. This ensures the person reviewing the logs and application behavior know exactly how the application is configured.</li> </ul> <ul> <li>Log to console. Logging to external systems like Azure Monitor is desirable for traceability across services. This requires logs to be dispatched from the local system to the external system and that is a dependency that can fail. It is important that someone be able to console logs directly on the local system.</li> </ul> <ul> <li>Log to external system. In addition to console logs, logging to an external system like Azure Monitor is desirable for traceability across services and durability of logs.</li> </ul> <ul> <li>Log all activity. If the system is performing some activity (reading data from a database, calling an external service, etc.), it should log that activity. Ideally, there should be a log message saying the activity is starting and another log message saying the activity is complete. This allows someone reviewing the logs to understand what the application is doing and how long it is taking. Depending on how noisy this is, different messages can be associated with different log levels, but it is important to have the information available when it comes to debugging a deployed system.</li> </ul> <ul> <li>Correlate distributed activities. If the system is performing some activity that is distributed across multiple systems, it is important to correlate the activity across those systems. This can be done using a Correlation ID that is passed from system to system. This allows someone reviewing the logs to understand the entire flow of activity. For more information, please see Observability in Microservices.</li> </ul> <ul> <li>Log metadata. When logging, it is important to include metadata that is relevant to the activity. For example, a Tenant ID, Customer ID, or Order ID. This allows someone reviewing the logs to understand the context of the activity and filter to a manageable set of logs.</li> </ul> <ul> <li>Log performance metrics. Even if you are using App Insights to capture how long dependency calls are taking, it is often useful to know long certain functions of your application took. It then becomes possible to evaluate the performance characteristics of your application as it is deployed on different compute platforms with different limitations on CPU, memory, and network bandwidth. For more information, please see Metrics.</li> </ul>"},{"location":"automated-testing/#map-of-outcomes-to-testing-techniques","title":"Map of Outcomes to Testing Techniques","text":"<p>The table below maps outcomes (the results that you may want to achieve in your validation efforts) to one or more techniques that can be used to accomplish that outcome.</p> When I am working on... I want to get this outcome... ...so I should consider Development Prove backward compatibility with existing callers and clients Shadow testing Development Ensure telemetry is sufficiently detailed and complete to trace and diagnose malfunction in End-to-End testing flows Distributed Debug challenges; Orphaned call chain analysis Development Ensure program logic is correct for a variety of expected, mainline, edge and unexpected inputs Unit testing; Functional tests; Consumer-driven Contract Testing; Integration testing Development Prevent regressions in logical correctness; earlier is better Unit testing; Functional tests; Consumer-driven Contract Testing; Integration testing; Rings (each of these are expanding scopes of coverage) Development Quickly validate mainline correctness of a point of functionality (e.g. single API), manually Manual smoke testing Tools: postman, powershell, curl Development Validate interactions between components in isolation, ensuring that consumer and provider components are compatible and conform to a shared understanding documented in a contract Consumer-driven Contract Testing Development Validate that multiple components function together across multiple interfaces in a call chain, incl network hops Integration testing; End-to-end (End-to-End testing) tests; Segmented end-to-end (End-to-End testing) Development Prove disaster recoverability \u2013 recover from corruption of data DR drills Development Find vulnerabilities in service Authentication or Authorization Scenario (security) Development Prove correct RBAC and claims interpretation of Authorization code Scenario (security) Development Document and/or enforce valid API usage Unit testing; Functional tests; Consumer-driven Contract Testing Development Prove implementation correctness in advance of a dependency or absent a dependency Unit testing (with mocks); Unit testing (with emulators); Consumer-driven Contract Testing Development Ensure that the user interface is accessible Accessibility Development Ensure that users can operate the interface UI testing (automated) (human usability observation) Development Prevent regression in user experience UI automation; End-to-End testing Development Detect and prevent 'noisy neighbor' phenomena Load testing Development Detect availability drops Synthetic Transaction testing; Outside-in probes Development Prevent regression in 'composite' scenario use cases / workflows (e.g. an e-commerce system might have many APIs that used together in a sequence perform a \"shop-and-buy\" scenario) End-to-End testing; Scenario Development; Operations Prevent regressions in runtime performance metrics e.g. latency / cost / resource consumption; earlier is better Rings; Synthetic Transaction testing / Transaction; Rollback Watchdogs Development; Optimization Compare any given metric between 2 candidate implementations or variations in functionality Flighting; A/B testing Development; Staging Prove production system of provisioned capacity meets goals for reliability, availability, resource consumption, performance Load testing (stress); Spike; Soak; Performance testing Development; Staging Understand key user experience performance characteristics \u2013 latency, chattiness, resiliency to network errors Load; Performance testing; Scenario (network partitioning) Development; Staging; Operation Discover melt points (the loads at which failure or maximum tolerable resource consumption occurs) for each individual component in the stack Squeeze; Load testing (stress) Development; Staging; Operation Discover overall system melt point (the loads at which the end-to-end system fails) and which component is the weakest link in the whole stack Squeeze; Load testing (stress) Development; Staging; Operation Measure capacity limits for given provisioning to predict or satisfy future provisioning needs Squeeze; Load testing (stress) Development; Staging; Operation Create / exercise failover runbook Failover drills Development; Staging; Operation Prove disaster recoverability \u2013 loss of data center (the meteor scenario); measure MTTR DR drills Development; Staging; Operation Understand whether observability dashboards are correct, and telemetry is complete; flowing Trace Validation; Load testing (stress); Scenario; End-to-End testing Development; Staging; Operation Measure impact of seasonality of traffic Load testing Development; Staging; Operation Prove Transaction and alerts correctly notify / take action Synthetic Transaction testing (negative cases); Load testing Development; Staging; Operation; Optimizing Understand scalability curve, i.e. how the system consumes resources with load Load testing (stress); Performance testing Operation; Optimizing Discover system behavior over long-haul time Soak Optimizing Find cost savings opportunities Squeeze Staging; Operation Measure impact of failover / scale-out (repartitioning, increasing provisioning) / scale-down Failover drills; Scale drills Staging; Operation Create/Exercise runbook for increasing/reducing provisioning Scale drills Staging; Operation Measure behavior under rapid changes in traffic Spike Staging; Optimizing Discover cost metrics per unit load volume (what factors influence cost at what load points, e.g. cost per million concurrent users) Load (stress) Development; Operation Discover points where a system is not resilient to unpredictable yet inevitable failures (network outage, hardware failure, VM host servicing, rack/switch failures, random acts of the Malevolent Divine, solar flares, sharks that eat undersea cable relays, cosmic radiation, power outages, renegade backhoe operators, wolves chewing on junction boxes, \u2026) Chaos Development Perform unit testing on Power platform custom connectors Custom Connector Testing"},{"location":"automated-testing/#technology-specific-testing","title":"Technology Specific Testing","text":"<ul> <li>Using DevTest Pattern for building containers with AzDO</li> <li>Using Azurite to run blob storage tests in pipeline</li> </ul>"},{"location":"automated-testing/cdc-testing/","title":"Consumer-Driven Contract Testing (CDC)","text":"<p>Consumer-driven Contract Testing (or CDC for short) is a software testing methodology used to test components of a system in isolation while ensuring that provider components are compatible with the expectations that consumer components have of them.</p>"},{"location":"automated-testing/cdc-testing/#why-consumer-driven-contract-testing","title":"Why Consumer-Driven Contract Testing","text":"<p>CDC tries to overcome the several painful drawbacks of automated E2E tests with components interacting together:</p> <ul> <li>E2E tests are slow</li> <li>E2E tests break easily</li> <li>E2E tests are expensive and hard to maintain</li> <li>E2E tests of larger systems may be hard or impossible to run outside a dedicated testing environment</li> </ul> <p>Although testing best practices suggest to write just a few E2E tests compared to the cheaper, faster and more stable integration and unit tests as pictured in the testing pyramid below, experience shows many teams end up writing too many E2E tests. A reason for this is that E2E tests give developers the highest confidence to release as they are testing the \"real\" system.</p> <p></p> <p>CDC addresses these issues by testing interactions between components in isolation using mocks that conform to a shared understanding documented in a \"contract\". Contracts are agreed between consumer and provider, and are regularly verified against a real instance of the provider component. This effectively partitions a larger system into smaller pieces that can be tested individually in isolation of each other, leading to simpler, fast and stable tests that also give confidence to release.</p> <p>Some E2E tests are still required to verify the system as a whole when deployed in the real environment, but most functional interactions between components can be covered with CDC tests.</p> <p>CDC testing was initially developed for testing RESTful API's, but the pattern scales to all consumer-provider systems and tooling for other messaging protocols besides HTTP does exist.</p>"},{"location":"automated-testing/cdc-testing/#consumer-driven-contract-testing-design-blocks","title":"Consumer-Driven Contract Testing Design Blocks","text":"<p>In a consumer-driven approach the consumer drives changes to contracts between a consumer (the client) and a provider (the server). This may sound counterintuitive, but it helps providers create APIs that fit the real requirements of the consumers rather than trying to guess these in advance. Next we describe the CDC building blocks ordered by their occurrence in the development cycle.</p> <p></p>"},{"location":"automated-testing/cdc-testing/#consumer-tests-with-provider-mock","title":"Consumer Tests with Provider Mock","text":"<p>The consumers start by creating integration tests against a provider mock and running them as part of their CI pipeline. Expected responses are defined in the provider mock for requests fired from the tests. Through this, the consumer essentially defines the contract they expect the provider to fulfill.</p>"},{"location":"automated-testing/cdc-testing/#contract","title":"Contract","text":"<p>Contracts are generated from the expectations defined in the provider mock as a result of a successful test run. CDC frameworks like Pact provide a specification for contracts in json format consisting of the list of request/responses generated from the consumer tests plus some additional metadata.</p> <p>Contracts are not a replacement for a discussion between the consumer and provider team. This is the moment where this discussion should take place (if not already done before). The consumer tests and generated contract are refined with the feedback and cooperation of the provider team. Lastly the finalized contract is versioned and stored in a central place accessible by both consumer and provider.</p> <p>Contracts are complementary to API specification documents like OpenAPI. API specifications describe the structure and the format of the API. A contract instead specifies that for a given request, a given response is expected. An API specifications document is helpful in writing an API contract and can be used to validate that the contract conforms to the API specification.</p>"},{"location":"automated-testing/cdc-testing/#provider-contract-verification","title":"Provider Contract Verification","text":"<p>On the provider side tests are also executed as part of a separate pipeline which verifies contracts against real responses of the provider. Contract verification fails if real responses differ from the expected responses as specified in the contract. The cause of this can be:</p> <ol> <li>Invalid expectations on the consumer side leading to incompatibility with the current provider implementation</li> <li>Broken provider implementation due to some missing functionality or a regression</li> </ol> <p>Either way, thanks to CDC it is easy to pinpoint integration issues down to the consumer/provider of the affected interaction. This is a big advantage compared to the debugging pain this could have been with an E2E test approach.</p>"},{"location":"automated-testing/cdc-testing/#cdc-testing-frameworks-and-tools","title":"CDC Testing Frameworks and Tools","text":"<p>Pact is an implementation of CDC testing that allows mocking of responses in the consumer codebase, and verification of the interactions in the provider codebase, while defining a specification for contracts. It was originally written in Ruby but has available wrappers for multiple languages. Pact is the de-facto standard to use when working with CDC.</p> <p>Spring Cloud Contract is an implementation of CDC testing from Spring, and offers easy integration in the Spring ecosystem. Support for non-Spring and non-JVM providers and consumers also exists.</p>"},{"location":"automated-testing/cdc-testing/#conclusion","title":"Conclusion","text":"<p>CDC has several benefits that make it an approach worth considering when dealing with systems composed of multiple components interacting together.</p> <p>Maintenance efforts can be reduced by testing consumer-provider interactions in isolation without the need of a complex integrated environment, specially as the interactions between components grow in number and become more complex.</p> <p></p> <p>Additionally, a close collaboration between consumer and provider teams is strongly encouraged through the CDC development process, which can bring many other benefits. Contracts offer a formal way to document the shared understanding how components interact with each other, and serve as a base for the communication between teams. In a way, the contract repository serves as a live documentation of all consumer-provider interactions of a system.</p> <p>CDC has some drawbacks as well. An extra layer of testing is added requiring a proper investment in education for team members to understand and use CDC correctly.</p> <p>Additionally, the CDC test scope should be considered carefully to prevent blurring CDC with other higher level functional testing layers. Contract tests are not the place to verify internal business logic and correctness of the consumer.</p>"},{"location":"automated-testing/cdc-testing/#resources","title":"Resources","text":"<ul> <li>Testing pyramid from Kent C. Dodd's blog</li> <li>Pact, a code-first consumer-driven contract testing tool with support for several different programming languages</li> <li>Consumer-driven contracts from Ian Robinson</li> <li>Contract test from Martin Fowler</li> <li>A simple example of using Pact consumer-driven contract testing in a Java client-server application</li> <li>Pact dotnet workshop</li> </ul>"},{"location":"automated-testing/e2e-testing/","title":"E2E Testing","text":"<p>End-to-end (E2E) testing is a Software testing methodology to test a functional and data application flow consisting of several sub-systems working together from  start to end.</p> <p>At times, these systems are developed in different technologies by different teams or organizations. Finally, they come together to form a functional business application.  Hence, testing a single system would not suffice. Therefore, end-to-end testing verifies the application from start to end putting all its components together.</p> <p></p>"},{"location":"automated-testing/e2e-testing/#why-e2e-testing","title":"Why E2E Testing","text":"<p>In many commercial software application scenarios, a modern software system consists of its interconnection with multiple sub-systems. These sub-systems can be within the same organization or can be components of different organizations. Also, these sub-systems can have somewhat similar or different lifetime release cycle from the current system. As a result, if there is any failure or fault in any sub-system, it can adversely affect the whole software system leading to its collapse.</p> <p></p> <p>The above illustration is a testing pyramid from Kent C. Dodd's blog which is a combination of the pyramids from Martin Fowler\u2019s blog and the Google Testing Blog.</p> <p>The majority of your tests are at the bottom of the pyramid. As you move up the pyramid, the number of tests gets smaller. Also, going up the pyramid, tests get slower and more expensive to write, run, and maintain. Each type of testing vary for its purpose, application and the areas it's supposed to cover. For more information on comparison analysis of different testing types, please see this ## Unit vs Integration vs System vs E2E Testing document.</p>"},{"location":"automated-testing/e2e-testing/#e2e-testing-design-blocks","title":"E2E Testing Design Blocks","text":"<p>We will look into all the 3 categories one by one:</p>"},{"location":"automated-testing/e2e-testing/#user-functions","title":"User Functions","text":"<p>Following actions should be performed as a part of building user functions:</p> <ul> <li>List user initiated functions of the software systems, and their interconnected sub-systems.</li> <li>For any function, keep track of the actions performed as well as Input and Output data.</li> <li>Find the relations, if any between different Users functions.</li> <li>Find out the nature of different user functions i.e. if they are independent or are reusable.</li> </ul>"},{"location":"automated-testing/e2e-testing/#conditions","title":"Conditions","text":"<p>Following activities should be performed as a part of building conditions based on user functions:</p> <ul> <li>For each and every user functions, a set of conditions should be prepared.</li> <li>Timing, data conditions and other factors that affect user functions can be considered as parameters.</li> </ul>"},{"location":"automated-testing/e2e-testing/#test-cases","title":"Test Cases","text":"<p>Following factors should be considered for building test cases:</p> <ul> <li>For every scenario, one or more test cases should be created to test each and every functionality of the user functions. If possible, these test cases should be automated through the standard CI/CD build pipeline processes with the track of each successful and failed build in AzDO.</li> <li>Every single condition should be enlisted as a separate test case.</li> </ul>"},{"location":"automated-testing/e2e-testing/#applying-the-e2e-testing","title":"Applying the E2E Testing","text":"<p>Like any other testing, E2E testing also goes through formal planning, test execution, and closure phases.</p> <p>E2E testing is done with the following steps:</p>"},{"location":"automated-testing/e2e-testing/#planning","title":"Planning","text":"<ul> <li>Business and Functional Requirement analysis</li> <li>Test plan development</li> <li>Test case development</li> <li>Production like Environment setup for the testing</li> <li>Test data setup</li> <li>Decide exit criteria</li> <li>Choose the testing methods that most applicable to your system. For the definition of the various testing methods, please see Testing Methods document.</li> </ul>"},{"location":"automated-testing/e2e-testing/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>System Testing should be complete for all the participating systems.</li> <li>All subsystems should be combined to work as a complete application.</li> <li>Production like test environment should be ready.</li> </ul>"},{"location":"automated-testing/e2e-testing/#test-execution","title":"Test Execution","text":"<ul> <li>Execute the test cases</li> <li>Register the test results and decide on pass and failure</li> <li>Report the Bugs in the bug reporting tool</li> <li>Re-verify the bug fixes</li> </ul>"},{"location":"automated-testing/e2e-testing/#test-closure","title":"Test Closure","text":"<ul> <li>Test report preparation</li> <li>Evaluation of exit criteria</li> <li>Test phase closure</li> </ul>"},{"location":"automated-testing/e2e-testing/#test-metrics","title":"Test Metrics","text":"<p>The tracing the quality metrics gives insight about the current status of testing. Some common metrics of E2E testing are:</p> <ul> <li>Test case preparation status: Number of test cases ready versus the total number of test cases.</li> <li>Frequent Test progress: Number of test cases executed in the consistent frequent manner, e.g. weekly, versus a target number of the test cases in the same time period.</li> <li>Defects Status: This metric represents the status of the defects found during testing. Defects should be logged into defect tracking tool (e.g. AzDO backlog) and resolved as per their severity and priority. Therefore, the percentage of open and closed defects as per their severity and priority should be calculated to track this metric. The AzDO Dashboard Query can be used to track this metric.</li> <li>Test environment availability: This metric tracks the duration of the test environment used for end-to-end testing versus its scheduled allocation duration.</li> </ul>"},{"location":"automated-testing/e2e-testing/#e2e-testing-frameworks-and-tools","title":"E2E Testing Frameworks and Tools","text":""},{"location":"automated-testing/e2e-testing/#1-gauge-framework","title":"1. Gauge Framework","text":"<p>Gauge is a free and open source framework for writing and running E2E tests. Some key features of Gauge that makes it unique include:</p> <ul> <li>Simple, flexible and rich syntax based on Markdown.</li> <li>Consistent cross-platform/language support for writing test code.</li> <li>A modular architecture with plugins support.</li> <li>Supports data driven execution and external data sources.</li> <li>Helps you create maintainable test suites.</li> <li>Supports Visual Studio Code, Intellij IDEA, IDE Support.</li> <li>Supports html, json and XML reporting.</li> </ul> <p>Gauge Framework Website</p>"},{"location":"automated-testing/e2e-testing/#2-robot-framework","title":"2. Robot Framework","text":"<p>Robot Framework is a generic open source automation framework. The framework has easy syntax, utilizing human-readable keywords. Its capabilities can be extended by libraries implemented with Python or Java.</p> <p>Robot shares a lot of the same \"pros\" as Gauge, except the developer tooling and the syntax. In our usage, we found the VS Code Intellisense offered with Gauge to be much more stable than the offerings for Robot. We also found the syntax to be less readable than what Gauge offered. While both frameworks allow for markup based test case definitions, the Gauge syntax reads much more like an English sentence than Robot. Finally, Intellisense is baked into the markup files for Gauge test cases, which will create a function stub for the actual test definition if the developer allows it. The same cannot be said of the Robot Framework.</p> <p>Robot Framework Website</p>"},{"location":"automated-testing/e2e-testing/#3-testcraft","title":"3. TestCraft","text":"<p>TestCraft is a codeless Selenium test automation platform. Its revolutionary AI technology and unique visual modeling allow for faster test creation and execution while eliminating test maintenance overhead.</p> <p>The testers create fully automated test scenarios without coding. Customers find bugs faster, release more frequently, integrate with the CI/CD approach and improve the overall quality of their digital products. This all creates a complete end-to-end testing experience.</p> <p>Perfecto (TestCraft) Website or get it  from the Visual Studio Marketplace</p>"},{"location":"automated-testing/e2e-testing/#4-ranorex-studio","title":"4. Ranorex Studio","text":"<p>Ranorex Studio is a complete end-to-end test automation tool for desktop, web, and mobile applications. Create reliable tests fast without any coding at all, or using the full IDE. Use external CSV or Excel files, or a SQL database as inputs to your tests.</p> <p>Run tests in parallel or on a Selenium Grid with built-in Selenium WebDriver. Ranorex Studio integrates with your CI/CD process to shorten your release cycles without sacrificing quality.</p> <p>Ranorex Studio tests also integrate with Azure DevOps (AzDO), which can be run as part of a build pipeline in AzDO.</p> <p>Ranorex Studio Website</p>"},{"location":"automated-testing/e2e-testing/#5-katalon-studio","title":"5. Katalon Studio","text":"<p>Katalon Studio is an excellent end-to-end automation solution for web, API, mobile, and desktop testing with DevOps support.</p> <p>With Katalon Studio, automated testing can be easily integrated into any CI/CD pipeline to release products faster while guaranteeing high quality. Katalon Studio customizes for users from beginners to experts. Robust functions such as Spying, Recording, Dual-editor interface and Custom Keywords make setting up, creating and maintaining tests possible for users.</p> <p>Built on top of Selenium and Appium, Katalon Studio helps standardize your end-to-end tests standardized. It also complies with the most popular frameworks to work seamlessly with other tools in the automated testing ecosystem.</p> <p>Katalon is endorsed by Gartner, IT professionals, and a large testing community.</p> <p>Note: At the time of this writing, Katalon Studio extension for AzDO was NOT available for Linux.</p> <p>Katalon Studio Website or read about its integration with AzDO</p>"},{"location":"automated-testing/e2e-testing/#6-bugbugio","title":"6. BugBug.io","text":"<p>BugBug is an easy way to automate tests for web applications. The tool focuses on simplicity, yet allows you to cover all essential test cases without coding. It's an all-in-one solution - you can easily create tests and use the built-in cloud to run them on schedule or from your CI/CD, without changes to your own infrastructure.</p> <p>BugBug is an interesting alternative to Selenium because it's actually a completely different technology. It is based on a Chrome extension that allows BugBug to record and run tests faster than old-school frameworks.</p> <p>The biggest advantage of BugBug is its user-friendliness. Most tests created with BugBug simply work out of the box. This makes it easier for non-technical people to maintain tests - with BugBug you can save money on hiring a QA engineer.</p> <p>BugBug Website</p>"},{"location":"automated-testing/e2e-testing/#conclusion","title":"Conclusion","text":"<p>Hope you learned various aspects of E2E testing like its processes, metrics, the difference between Unit, Integration  and E2E testing, and the various recommended E2E test frameworks and tools.</p> <p>For any commercial release of the software, E2E test verification plays an important role as it tests the entire application in an environment that exactly imitates real-world users like network communication, middleware and backend services interaction, etc.</p> <p>Finally, the E2E test is often performed manually as the cost of automating such test cases is too high to be afforded by any organization. Having said that, the ultimate goal of each organization is to make the e2e testing as streamlined as possible adding full and semi-automation testing components into the process. Hence, the various E2E testing frameworks and tools listed in this article come to the rescue.</p>"},{"location":"automated-testing/e2e-testing/#resources","title":"Resources","text":"<ul> <li>Wikipedia: Software testing</li> <li>Wikipedia: Unit testing</li> <li>Wikipedia: Integration testing</li> <li>Wikipedia: System testing</li> </ul>"},{"location":"automated-testing/e2e-testing/testing-comparison/","title":"Unit vs Integration vs System vs E2E Testing","text":"<p>The table below illustrates the most critical characteristics and differences among Unit, Integration, System, and End-to-End Testing, and when to apply each methodology in a project.</p> Unit Test Integration Test System Testing E2E Test Scope Modules, APIs Modules, interfaces Application, system All sub-systems, network dependencies, services and databases Size Tiny Small to medium Large X-Large Environment Development Integration test QA test Production like Data Mock data Test data Test data Copy of real production data System Under Test Isolated unit test Interfaces and flow data between the modules Particular system as a whole Application flow from start to end Scenarios Developer perspectives Developers and IT Pro tester perspectives Developer and QA tester perspectives End-user perspectives When After each build After Unit testing Before E2E testing and after Unit and Integration testing After System testing Automated or Manual Automated Manual or automated Manual or automated Manual"},{"location":"automated-testing/e2e-testing/testing-methods/","title":"E2E Testing Methods","text":""},{"location":"automated-testing/e2e-testing/testing-methods/#horizontal-test","title":"Horizontal Test","text":"<p>This method is used very commonly. It occurs horizontally across the context of multiple applications. Take an example of a data ingest management system.</p> <p></p> <p>The inbound data may be  injected from various sources, but it then \"flatten\" into a horizontal processing pipeline that may include various components, such as a gateway API, data transformation, data validation, storage, etc... Throughout the entire Extract-Transform-Load (ETL) processing, the data flow can be tracked and monitored under the horizontal spectrum with little sprinkles of optional, and thus not important for the overall E2E test case, services, like logging, auditing, authentication.</p>"},{"location":"automated-testing/e2e-testing/testing-methods/#vertical-test","title":"Vertical Test","text":"<p>In this method, all most critical transactions of any application are verified and evaluated right from the start to finish. Each individual layer of the application is tested starting from top to bottom. Take an example of a web-based application that uses middleware services for reaching back-end resources.</p> <p></p> <p>In such case, each layer (tier) is required to be fully tested in conjunction with the \"connected\" layers above and beneath, in which services \"talk\" to each other during the end to end data flow. All these complex testing scenarios will require proper validation and dedicated automated testing. Thus, this method is much more difficult.</p>"},{"location":"automated-testing/e2e-testing/testing-methods/#e2e-test-cases-design-guidelines","title":"E2E Test Cases Design Guidelines","text":"<p>Below enlisted are few guidelines that should be kept in mind while designing the test cases for performing E2E testing:</p> <ul> <li>Test cases should be designed from the end user\u2019s perspective.</li> <li>Should focus on testing some existing features of the system.</li> <li>Multiple scenarios should be considered for creating multiple test cases.</li> <li>Different sets of test cases should be created to focus on multiple scenarios of the system.</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/","title":"Gauge Framework","text":"<p>Gauge is a free and open source framework for writing and running E2E tests. Some key features of Gauge that makes it unique include:</p> <ul> <li>Simple, flexible and rich syntax based on Markdown.</li> <li>Consistent cross-platform/language support for writing test code.</li> <li>A modular architecture with plugins support</li> <li>Extensible through plugins and hackable.</li> <li>Supports data driven execution and external data sources</li> <li>Helps you create maintainable test suites</li> <li>Supports Visual Studio Code, Intellij IDEA, IDE Support</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#what-is-a-specification","title":"What is a Specification","text":"<p>Gauge specifications are written using a Markdown syntax. For example</p> <pre><code># Search for the data blob\n\n## Look for file\n* Goto Azure blob\n</code></pre> <p>In this specification Search for the data blob is the specification heading, Look for file is a scenario with a step Goto Azure blob</p>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#what-is-an-implementation","title":"What is an Implementation","text":"<p>You can implement the steps in a specification using a programming language, for example:</p> <pre><code>from getgauge.python import step\nimport os\nfrom step_impl.utils.driver import Driver\n@step(\"Goto Azure blob\")\ndef gotoAzureStorage():\n  URL = os.getenv('STORAGE_ENDPOINT')\n  Driver.driver.get(URL)\n</code></pre> <p>The Gauge runner reads and runs steps and its implementation for every scenario in the specification and generates a report of passing or failing scenarios.</p> <pre><code># Search for the data blob\n\n## Look for file  \u2714\n\nSuccessfully generated html-report to =&gt; reports/html-report/index.html\nSpecifications:       1 executed      1 passed        0 failed        0 skipped\nScenarios:    1 executed      1 passed        0 failed        0 skipped\n</code></pre>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#re-using-steps","title":"Re-using Steps","text":"<p>Gauge helps you focus on testing the flow of an application. Gauge does this by making steps as re-usable as possible. With Gauge, you don\u2019t need to build custom frameworks using a programming language.</p> <p>For example, Gauge steps can pass parameters to an implementation by using a text with quotes.</p> <pre><code># Search for the data blob\n\n## Look for file\n* Goto Azure blob\n* Search for \"store_data.csv\"\n</code></pre> <p>The implementation can now use \u201cstore_data.csv\u201d as follows</p> <pre><code>from getgauge.python import step\nimport os\n@step(\"Search for &lt;query&gt;\")\ndef searchForQuery(query):\n  write(query)\n  press(\"Enter\")\n\nstep(\"Search for &lt;query&gt;\", (query) =&gt; {\n  write(query);\n  press(\"Enter\");\n</code></pre> <p>You can then re-use this step within or across scenarios with different parameters:</p> <pre><code># Search for the data blob\n\n## Look for Store data #1\n* Goto Azure blob\n* Search for \"store_1.csv\"\n\n## Look for Store data #2\n* Goto Azure blob\n* Search for \"store_2.csv\"\n</code></pre> <p>Or combine more than one step into concepts</p> <pre><code># Search Azure Storage for &lt;query&gt;\n* Goto Azure blob\n* Search for \"store_1.csv\"\n</code></pre> <p>The concept, Search Azure Storage for <code>&lt;query&gt;</code> can be used like a step in a specification</p> <pre><code># Search for the data blob\n\n## Look for Store data #1\n* Search Azure Storage for \"store_1.csv\"\n\n## Look for Store data #2\n* Search Azure Storage for \"store_2.csv\"\n</code></pre>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#data-driven-testing","title":"Data-Driven Testing","text":"<p>Gauge also supports data driven testing using Markdown tables as well as external csv files for example</p> <pre><code># Search for the data blob\n\n| query   |\n|---------|\n| store_1 |\n| store_2 |\n| store_3 |\n\n## Look for stores data\n* Search Azure Storage for &lt;query&gt;\n</code></pre> <p>This will execute the scenario for all rows in the table.</p> <p>In the examples above, we refactored a specification to be concise and flexible without changing the implementation.</p>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#other-features","title":"Other Features","text":"<p>This is brief introduction to a few Gauge features. Please refer to the Gauge documentation for additional features such as:</p> <ul> <li>Reports</li> <li>Tags</li> <li>Parallel execution</li> <li>Environments</li> <li>Screenshots</li> <li>Plugins</li> <li>And much more</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#installing-gauge","title":"Installing Gauge","text":"<p>This getting started guide takes you through the core features of Gauge. By the end of this guide, you\u2019ll be able to install Gauge and learn how to create your first Gauge test automation project.</p>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#installation-instructions-for-windows-os","title":"Installation Instructions for Windows OS","text":""},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#step-1-installing-gauge-on-windows","title":"Step 1: Installing Gauge on Windows","text":"<p>This section gives specific instructions on setting up Gauge in a Microsoft Windows environment. Download the following installation bundle to get the latest stable release of Gauge.</p>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#step-2-installing-gauge-extension-for-visual-studio-code","title":"Step 2: Installing Gauge Extension for Visual Studio Code","text":"<p>Follow the steps to add the Gauge Visual Studio Code plugin from the IDE</p> <ol> <li>Install the following Gauge extension for Visual Studio Code.</li> </ol>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#troubleshooting-installation","title":"Troubleshooting Installation","text":"<p>If, when you run your first gauge spec you receive the error of missing python packages, open the command line terminal window and run this command:</p> <pre><code>python.exe -m pip install getgauge==0.3.7 --user\n</code></pre>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#installation-instructions-for-macos","title":"Installation Instructions for macOS","text":""},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#step-1-installing-gauge-on-macos","title":"Step 1: Installing Gauge on macOS","text":"<p>This section gives specific instructions on setting up Gauge in a macOS environment.</p> <ol> <li>Install brew if you haven\u2019t already: Go to the brew website, and follow the directions there.</li> <li> <p>Run the brew command to install Gauge</p> <pre><code>&gt; brew install gauge\n</code></pre> <p>if HomeBrew is working properly, you should see something similar to the following:</p> </li> </ol> <pre><code>==&gt; Fetching gauge\n==&gt; Downloading https://ghcr.io/v2/homebrew/core/gauge/manifests/1.4.3\n######################################################################## 100.0%\n==&gt; Downloading https://ghcr.io/v2/homebrew/core/gauge/blobs/sha256:05117bb3c0b2efeafe41e817cd3ad86307c1d2ea7e0e835655c4b51ab2472893\n==&gt; Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:05117bb3c0b2efeafe41e817cd3ad86307c1d2ea7e0e835655c4b51ab2472893?se=2022-12-13T12%3A35%3A00Z&amp;sig=I78SuuwNgSMFoBTT\n######################################################################## 100.0%\n==&gt; Pouring gauge--1.4.3.ventura.bottle.tar.gz\n    /usr/local/Cellar/gauge/1.4.3: 6 files, 18.9MB\n</code></pre>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#step-2-installing-gauge-extension-for-visual-studio-code_1","title":"Step 2 : Installing Gauge Extension for Visual Studio Code","text":"<p>Follow the steps to add the Gauge Visual Studio Code plugin from the IDE</p> <ol> <li>Install the following Gauge extension for Visual Studio Code.</li> </ol>"},{"location":"automated-testing/e2e-testing/recipes/gauge-framework/#post-installation-troubleshooting","title":"Post-Installation Troubleshooting","text":"<p>If, when you run your first gauge spec you receive the error of missing python packages, open the command line terminal window and run this command:</p> <pre><code>python.exe -m pip install getgauge==0.3.7 --user\n</code></pre>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/","title":"Postman Testing","text":"<p>This purpose of this document is to provide guidance on how to use Newman in your CI/CD pipeline to run End-to-end (E2E) tests defined in Postman Collections while following security best practices.</p> <p>First, we'll introduce Postman and Newman and then outline several Postman testing use cases that answer why you may want to go beyond local testing with Postman Collections.</p> <p>In the final use case, we are looking to use a shell script that references the Postman Collection file path and Environment file path as inputs to Newman. Below is a flow diagram representing the outcome of the final use case:</p> <p></p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#postman-and-newman","title":"Postman and Newman","text":"<p>Postman is a free API platform for testing APIs. Key features highlighted in this guidance include:</p> <ul> <li>Postman Collections</li> <li>Postman Environment Files</li> <li>Postman Scripts</li> </ul> <p>Newman is a command-line Collection Runner for Postman. It enables you to run and test a Postman Collection directly from the command line. Key features highlighted in this guidance include:</p> <ul> <li>Newman Run Command</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#what-is-a-collection","title":"What is a Collection","text":"<p>A Postman Collection is a group of executable saved requests. A collection can be exported as a json file.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#what-is-an-environment-file","title":"What is an Environment File","text":"<p>A Postman Environment file holds environment variables that can be referenced by a valid Postman Collection.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#what-is-a-postman-script","title":"What is a Postman Script","text":"<p>A Postman Script is Javascript hosted within a Postman Collection that can be written to execute against your Postman Collection and Environment File.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#what-is-the-newman-run-command","title":"What is the Newman Run Command","text":"<p>A Newman CLI command that allows you to specify a Postman Collection to be run.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#installing-postman-and-newman","title":"Installing Postman and Newman","text":"<p>For specific instruction on installing Postman, visit the Downloads Postman page.</p> <p>For specific instruction on installing Newman, visit the NPMJS Newman package page.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#implementing-automated-end-to-end-e2e-tests-with-postman-collections","title":"Implementing Automated End-to-end (E2E) Tests With Postman Collections","text":"<p>In order to provide guidance on implementing automated E2E tests with Postman, the section below begins with a use case that explains the trade-offs a dev or QA analyst might face when intending to use Postman for early testing. Each use case represents scenarios that facilitate the end goal of automated E2E tests.</p>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#use-case-hands-on-functional-testing-of-endpoints","title":"Use Case - Hands-on Functional Testing Of Endpoints","text":"<p>A developer or QA analyst would like to locally test input data against API services all sharing a common oauth2 token. As a result, they use Postman to craft an API test suite of Postman Collections that can be locally executed against individual endpoints across environments. After validating that their Postman Collection works, they share it with their team.</p> <p>Steps may look like the following:</p> <ol> <li> <p>For each of your existing API services, use the Postman IDE's import feature to import its OpenAPI Spec (Swagger) as a Postman Collection.</p> <p>If a service is not already using Swagger, look for language specific guidance on how to use Swagger to generate an OpenAPI Spec for your service. Finally, if your service only has a few endpoints, read Postman docs for guidance on how to manually build a Postman Collection.</p> </li> <li> <p>Provide extra clarity about a request in a Postman Collection by using Postman's Example feature to save its responses as examples. You can also simply add an example manually. Please read Postman docs for guidance on how to specify examples.</p> </li> <li>Combine each Postman Collection into a centralized Postman Collection.</li> <li>Build Postman Environment files (local, Dev and/or QA) and parameterize all saved requests of the Postman Collection in a way that references the Postman Environment files.</li> <li> <p>Use the Postman Script feature to create a shared prefetch script that automatically refreshes expired auth tokens per saved request. This would require referencing secrets from a Postman Environment file.</p> <pre><code>// Please treat this as pseudocode, and adjust as necessary.\n\n/* The request to an oauth2 authorization endpoint that will issue a token \nbased on provided credentials.*/\nconst oauth2Request = POST {...};\nvar getToken = true;\nif (pm.environment.get('ACCESS_TOKEN_EXPIRY') &lt;= (new Date()).getTime()) {\n    console.log('Token is expired')\n} else {\n    getToken = false;\n    console.log('Token and expiry date are all good');\n}\nif (getToken === true) {\n    pm.sendRequest(oauth2Request, function (_, res) {\n            console.log('Save the token')\n            var responseJson = res.json();\n            pm.environment.set('token', responseJson.access_token)\n            console.log('Save the expiry date')\n            var expiryDate = new Date();\n            expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\n            pm.environment.set('ACCESS_TOKEN_EXPIRY', expiryDate.getTime());\n    });\n}\n</code></pre> </li> <li> <p>Use Postman IDE to exercise endpoints.</p> </li> <li>Export collection and environment files then remove any secrets before committing to your repo.</li> </ol> <p>Starting with this approach has the following upsides:</p> <ul> <li>You've set yourself up for the beginning stages of an E2E postman collection by aggregating the collections into a single file and using environment files to make it easier to switch environments.</li> <li>Token is refreshed automatically on every call in the collection. This saves you time normally lost from manually having to request a token that expired.</li> <li>Grants QA/Dev granular control of submitting combinations of input data per endpoint.</li> <li>Grants developers a common experience via Postman IDE features.</li> </ul> <p>Ending with this approach has the following downsides:</p> <ul> <li>Promotes unsafe sharing of secrets. Credentials needed to request JWT token in the prefetch script are being manually shared.</li> <li>Secrets may happen to get exposed in the git commit history for various reasons (ex. Sharing the exported Postman Environment files).</li> <li>Collections can only be used locally to hit APIs (local or deployed). Not CI based.</li> <li>Each developer has to keep both their Postman Collection and Postman environment file(s) updated in order to keep up with latest changes to deployed services.</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#use-case-hands-on-functional-testing-of-endpoints-with-azure-key-vault-and-azure-app-config","title":"Use Case - Hands-on Functional Testing Of Endpoints with Azure Key Vault and Azure App Config","text":"<p>A developer or QA analyst may have an existing API test suite of Postman Collections, however, they now want to discourage unsafe sharing of secrets. As a result, they build a script that connects to both Key Vault and Azure App Config in order to automatically generate Postman Environment files instead of checking them into a shared repository.</p> <p>Steps may look like the following:</p> <ol> <li>Create an Azure Key Vault and store authentication secrets per environment:     - <code>\"Key:value\"</code> (ex. <code>\"dev-auth-password:12345\"</code>)     - <code>\"Key:value\"</code> (ex. <code>\"qa-auth-password:12345\"</code>)</li> <li>Create a shared Azure App Configuration instance and save all your Postman environment variables. This instance will be dedicated to holding all your Postman environment variables:     &gt; NOTE: Use the Label feature to delineate between environments.     - <code>\"Key:value\" -&gt; \"apiRoute:url\"</code> (ex. <code>\"servicename:https://servicename.net\" &amp; Label = \"QA\"</code>)     - <code>\"Key:value\" -&gt; \"Header:value\"</code>(ex. <code>\"token: \" &amp; Label = \"QA\"</code>)     - <code>\"Key:value\" -&gt; \"KeyVaultKey:KeyVaultSecret\"</code> (ex. <code>\"authpassword:qa-auth-password\" &amp; Label = \"QA\"</code>)</li> <li>Install Powershell or Bash. Powershell works for both Azure Powershell and Azure CLI.</li> <li> <p>Download Azure CLI, login to the appropriate subscription and ensure you have access to the appropriate resources. Some helpful commands are below:</p> <pre><code># login to the appropriate subscription\naz login\n# validate login\naz account show\n# validate access to Key Vault\naz keyvault secret list --vault-name \"$KeyvaultName\"\n# validate access to App Configuration\naz appconfig kv list --name \"$AppConfigName\"\n</code></pre> </li> <li> <p>Build a script that automatically generates your environment files.     &gt; Note: App Configuration references Key Vault, however, your script is responsible for authenticating properly to both App Configuration and Key Vault. The two services don't communicate directly.</p> <p>```powershell (CreatePostmanEnvironmentFiles.ps1)   # Please treat this as pseudocode, and adjust as necessary.   ############################################################</p> <p>env = $arg1   # 1. list app config vars for an environment   envVars = az appconfig kv list --name PostmanAppConfig --label $env | ConvertFrom-Json   # 2. step through envVars array to get Key Vault uris   keyvaultURI = \"\"   $envVars | % {if($.key -eq 'password'){keyvaultURI = $.value}}    # 3. parse uris for Key Vault name and secret names   # 4. get secret from Key Vault   kvsecret = az keyvault secret show --name $secretName --vault-name $keyvaultName --query \"value\"   # 5. set password value to returned Key Vault secret   $envVars | % {if($.key -eq 'password'){$.value=$kvsecret}}   # 6. create environment file   envFile = @{ \"_postman_variable_scope\" = \"environment\", \"name\" = $env, values = @() }   foreach($var in $envVars){           $envFile.values += @{ key = $var.key; value = $var.value; }   }   $envFile | ConvertTo-Json -depth 50 | Out-File -encoding ASCII -FilePath .\\$env.postman_environment.json   ```</p> </li> <li> <p>Use Postman IDE to import the Postman Environment files to be referenced by your collection.</p> </li> </ol> <p>This approach has the following upsides:</p> <ul> <li>Inherits all the upsides of the previous case.</li> <li>Discourages unsafe sharing of secrets. Secrets are now pulled from Key Vault via Azure CLI. Key Vault Uri also no longer needs to be shared for access to auth tokens.</li> <li>Single source of truth for Postman Environment files. There's no longer a need to share them via repo.</li> <li>Developer only has to manage a single Postman Collection.</li> </ul> <p>Ending with this approach has the following downsides:</p> <ul> <li>Secrets may happen to get exposed in the git commit history if .gitIgnore is not updated to ignore Postman Environment files.</li> <li>Collections can only be used locally to hit APIs (local or deployed). Not CI based.</li> </ul>"},{"location":"automated-testing/e2e-testing/recipes/postman-testing/#use-case-e2e-testing-with-continuous-integration-and-newman","title":"Use Case - E2E Testing with Continuous Integration and Newman","text":"<p>A developer or QA analyst may have an existing API test suite of local Postman Collections that follow security best practices for development, however, they now want E2E tests to run as part of automated CI pipeline. With the advent of Newman, you can now more readily use Postman to craft an API test suite executable in your CI.</p> <p>Steps may look like the following:</p> <ol> <li>Update your Postman Collection to use the Postman Test feature in order to craft test assertions that will cover all saved requests E2E. Read Postman docs for guidance on how to use the Postman Test feature.</li> <li> <p>Locally use Newman to validate tests are working as intended</p> <pre><code>newman run tests\\e2e_Postman_collection.json -e qa.postman_environment.json\n</code></pre> </li> <li> <p>Build a script that automatically executes Postman Test assertions via Newman and Azure CLI.     &gt; NOTE: An Azure Service Principal must be setup to continue using azure cli in this CI pipeline example.</p> <p>```powershell (RunPostmanE2eTests.ps1)   # Please treat this as pseudocode, and adjust as necessary.   ############################################################</p> <p># 1. login to Azure using a Service Principal   az login --service-principal -u $APP_ID -p $AZURE_SECRET --tenant $AZURE_TENANT   # 2. list app config vars for an environment   envVars = az appconfig kv list --name PostmanAppConfig --label $env | ConvertFrom-Json   # 3. step through envVars array to get Key Vault uris   keyvaultURI = \"\"   @envVars | % {if($.key -eq 'password'){keyvaultURI = $.value}}   # 4. parse uris for Key Vault name and secret names   # 5. get secret from Key Vault   kvsecret = az keyvault secret show --name $secretName --vault-name $keyvaultName --query \"value\"   # 6. set password value to returned Key Vault secret   $envVars | % {if($.key -eq 'password'){$.value=$kvsecret}}   # 7. create environment file   envFile = @{ \"_postman_variable_scope\" = \"environment\", \"name\" = $env, values = @() }   foreach($var in $envVars){           $envFile.values += @{ key = $var.key; value = $var.value; }   }   $envFile | ConvertTo-Json -depth 50 | Out-File -encoding ASCII $env.postman_environment.json   # 8. install Newman   npm install --save-dev newman   # 9. run automated E2E tests via Newman   node_modules.bin\\newman run tests\\e2e_Postman_collection.json -e $env.postman_environment.json   ```</p> </li> <li> <p>Create a yaml file and define a step that will run your test script. (ex. A yaml file targeting Azure Devops that runs a Powershell script.)</p> <pre><code># Please treat this as pseudocode, and adjust as necessary.\n############################################################\ndisplayName: 'Run Postman E2E tests'\ninputs:\n    targetType: 'filePath'\n    filePath: RunPostmanE2eTests.ps1\nenv:\n    APP_ID: $(environment.appId) # credentials for az cli\n    AZURE_SECRET: $(environment.secret)\n    AZURE_TENANT: $(environment.tenant)\n</code></pre> </li> </ol> <p>This approach has the following upside:</p> <ul> <li>E2E tests can now be run automatically as part of a CI pipeline.</li> </ul> <p>Ending with this approach has the following downside:</p> <ul> <li>Postman Environment files are no longer being output to a local environment for hands-on manual testing. However, this can be solved by managing 2 scripts.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/","title":"Fault Injection Testing","text":"<p>Fault injection testing is the deliberate introduction of errors and faults to a system to validate and harden its stability and reliability. The goal is to improve the system's design for resiliency and performance under intermittent failure conditions over time.</p>"},{"location":"automated-testing/fault-injection-testing/#when-to-use","title":"When To Use","text":""},{"location":"automated-testing/fault-injection-testing/#problem-addressed","title":"Problem Addressed","text":"<p>Systems need to be resilient to the conditions that caused inevitable production disruptions. Modern applications are built with an increasing number of dependencies; on infrastructure, platform, network, 3rd party software or APIs, etc. Such systems increase the risk of impact from dependency disruptions. Each dependent component may fail. Furthermore, its interactions with other components may propagate the failure.</p> <p>Fault injection methods are a way to increase coverage and validate software robustness and error handling, either at build-time or at run-time, with the intention of \"embracing failure\" as part of the development lifecycle. These methods assist engineering teams in designing and continuously validating for failure, accounting for known and unknown failure conditions, architect for redundancy, employ retry and back-off mechanisms, etc.</p>"},{"location":"automated-testing/fault-injection-testing/#applicable-to","title":"Applicable to","text":"<ul> <li>Software - Error handling code paths, in-process memory management.<ul> <li>Example tests: Edge-case unit/integration tests and/or load tests (i.e. stress and soak).</li> </ul> </li> <li>Protocol - Vulnerabilities in communication interfaces such as command line parameters or APIs.<ul> <li>Example tests: Fuzzing provides invalid, unexpected, or random data as input we can assess the level of protocol stability of a component.</li> </ul> </li> <li>Infrastructure - Outages, networking issues, hardware failures.<ul> <li>Example tests: Using different methods to cause fault in the underlying infrastructure such as Shut down virtual machine (VM) instances, crash processes, expire certificates, introduce network latency, etc. This level of testing relies on statistical metrics observations over time and measuring the deviations of its observed behavior during fault, or its recovery time.</li> </ul> </li> </ul>"},{"location":"automated-testing/fault-injection-testing/#how-to-use","title":"How to Use","text":""},{"location":"automated-testing/fault-injection-testing/#architecture","title":"Architecture","text":""},{"location":"automated-testing/fault-injection-testing/#terminology","title":"Terminology","text":"<ul> <li>Fault - The adjudged or hypothesized cause of an error.</li> <li>Error - That part of the system state that may cause a subsequent failure.</li> <li>Failure - An event that occurs when the delivered service deviates from correct state.</li> <li>Fault-Error-Failure cycle - A key mechanism in dependability: A fault may cause an error. An error may cause further errors within the system boundary; therefore each new error acts as a fault. When error states are observed at the system boundary, they are termed failures.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#fault-injection-testing-basics","title":"Fault Injection Testing Basics","text":"<p>Fault injection is an advanced form of testing where the system is subjected to different failure modes, and where the testing engineer may know in advance what is the expected outcome, as in the case of release validation tests, or in an exploration to find potential issues in the product, which should be mitigated.</p>"},{"location":"automated-testing/fault-injection-testing/#fault-injection-and-chaos-engineering","title":"Fault Injection and Chaos Engineering","text":"<p>Fault injection testing is a specific approach to testing one condition. It introduces a failure into a system to validate its robustness. Chaos engineering, coined by Netflix, is a practice for generating new information. There is an overlap in concerns and often in tooling between the terms, and many times chaos engineering uses fault injection to introduce the required effects to the system.</p>"},{"location":"automated-testing/fault-injection-testing/#high-level-step-by-step","title":"High-level Step-by-Step","text":""},{"location":"automated-testing/fault-injection-testing/#fault-injection-testing-in-the-development-cycle","title":"Fault injection testing in the development cycle","text":"<p>Fault injection is an effective way to find security bugs in software, so much so that the Microsoft Security Development Lifecycle requires fuzzing at every untrusted interface of every product and penetration testing which includes introducing faults to the system, to uncover potential vulnerabilities resulting from coding errors, system configuration faults, or other operational deployment weaknesses.</p> <p>Automated fault injection coverage in a CI pipeline promotes a Shift-Left approach of testing earlier in the lifecycle for potential issues. Examples of performing fault injection during the development lifecycle:</p> <ul> <li>Using fuzzing tools in CI.</li> <li>Execute existing end-to-end scenario tests (such as integration or stress tests), which are augmented with fault injection.</li> <li>Write regression and acceptance tests based on issues that were found and fixed or based on resolved service incidents.</li> <li>Ad-hoc (manual) validations of fault in the dev environment for new features.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#fault-injection-testing-in-the-release-cycle","title":"Fault Injection Testing in the Release Cycle","text":"<p>Much like Synthetic Monitoring Tests, fault injection testing in the release cycle is a part of Shift-Right testing approach, which uses safe methods to perform tests in a production or pre-production environment. Given the nature of distributed, cloud-based applications, it is very difficult to simulate the real behavior of services outside their production environment. Testers are encouraged to run tests where it really matters, on a live system with customer traffic.</p> <p>Fault injection tests rely on metrics observability and are usually statistical; The following high-level steps provide a sample of practicing fault injection and chaos engineering:</p> <ul> <li>Measure and define a steady (healthy) state for the system's interoperability.</li> <li>Create hypotheses based on predicted behavior when a fault is introduced.</li> <li>Introduce real-world fault-events to the system.</li> <li>Measure the state and compare it to the baseline state.</li> <li>Document the process and the observations.</li> <li>Identify and act on the result.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#fault-injection-testing-in-kubernetes","title":"Fault Injection Testing in Kubernetes","text":"<p>With the advancement of kubernetes (k8s) as the infrastructure platform, fault injection testing in kubernetes has become inevitable to ensure that system behaves in a reliable manner in the event of a fault or failure. There could be different type of workloads running within a k8s cluster which are written in different languages. For eg. within a K8s cluster, you can run a micro service, a web app and/or a scheduled job. Hence you need to have mechanism to inject fault into any kind of workloads running within the cluster. In addition, kubernetes clusters are managed differently from traditional infrastructure. The tools used for fault injection testing within kubernetes should have compatibility with k8s infrastructure. These are the main characteristics which are required:</p> <ul> <li>Ease of injecting fault into kubernetes pods.</li> <li>Support for faster tool installation within the cluster.</li> <li>Support for YAML based configurations which works well with kubernetes.</li> <li>Ease of customization to add custom resources.</li> <li>Support for workflows to deploy various workloads and faults.</li> <li>Ease of maintainability of the tool</li> <li>Ease of integration with telemetry</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#best-practices-and-advice","title":"Best Practices and Advice","text":"<p>Experimenting in production has the benefit of running tests against a live system with real user traffic, ensuring its health, or building confidence in its ability to handle errors gracefully. However, it has the potential to cause unnecessary customer pain. A test can either succeed or fail. In the event of failure, there will likely be some impact on the production environment. Thinking about the Blast Radius of the effect, should the test fail, is a crucial step to conduct beforehand. The following practices may help minimize such risk:</p> <ul> <li>Run tests in a non-production environment first. Understand how the system behaves in a safe environment, using synthetic workload, before introducing potential risk to customer traffic.</li> <li>Use fault injection as gates in different stages through the CD pipeline.</li> <li>Deploy and test on Blue/Green and Canary deployments. Use methods such as traffic shadowing (a.k.a. Dark Traffic) to get customer traffic to the staging slot.</li> <li>Strive to achieve a balance between collecting actual result data while affecting as few production users as possible.</li> <li>Use defensive design principles such as circuit breaking and the bulkhead patterns.</li> <li>Agreed on a budget (in terms of Service Level Objective (SLO)) as an investment in chaos and fault injection.</li> <li>Grow the risk incrementally - Start with hardening the core and expand out in layers. At each point, progress should be locked in with automated regression tests.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#fault-injection-testing-frameworks-and-tools","title":"Fault Injection Testing Frameworks and Tools","text":""},{"location":"automated-testing/fault-injection-testing/#fuzzing","title":"Fuzzing","text":"<ul> <li>OneFuzz - is a Microsoft open-source self-hosted fuzzing-as-a-service platform which is easy to integrate into CI pipelines.</li> <li>AFL and WinAFL - Popular fuzz tools by Google's project zero team which is used locally to target binaries on Linux or Windows.</li> <li>WebScarab - A web-focused fuzzer owned by OWASP which can be found in Kali linux distributions.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#chaos","title":"Chaos","text":"<ul> <li>Azure Chaos Studio - An in-preview tool for orchestrating controlled fault injection experiments on Azure resources.</li> <li>Chaos toolkit - A declarative, modular chaos platform with many extensions, including the Azure actions and probes kit.</li> <li>Kraken - An Openshift-specific chaos tool, maintained by Redhat.</li> <li>Chaos Monkey - The Netflix platform which popularized chaos engineering (doesn't support Azure OOTB).</li> <li>Simmy - A .NET library for chaos testing and fault injection integrated with the Polly library for resilience engineering.</li> <li>Litmus - A CNCF open source tool for chaos testing and fault injection for kubernetes cluster.</li> <li>This ISE dev blog post provides code snippets as an example of how to use Polly and Simmy to implement a hypothesis-driven approach to resilience and chaos testing.</li> </ul>"},{"location":"automated-testing/fault-injection-testing/#conclusion","title":"Conclusion","text":"<p>From the principals of chaos: \"The harder it is to disrupt the steady-state, the more confidence we have in the behavior of the system. If a weakness is uncovered, we now have a target for improvement before that behavior manifests in the system at large\".</p> <p>Fault injection techniques increase resilience and confidence in the products we ship. They are used across the industry to validate applications and platforms before and while they are delivered to customers. Fault injection is a powerful tool and should be used with caution. Cases such as the Cloudflare 30 minute global outage, which was caused due to a deployment of code that was meant to be \u201cdark launched\u201d, entail the importance of curtailing the blast radius in the system during experiments.</p>"},{"location":"automated-testing/fault-injection-testing/#resources","title":"Resources","text":"<ul> <li>Mark Russinovich's fault injection and chaos engineering blog post</li> <li>Cindy Sridharan's Testing in production blog post</li> <li>Cindy Sridharan's Testing in production blog post cont.</li> <li>Fault injection in Azure Search</li> <li>Azure Architecture Framework - Chaos engineering</li> <li>Azure Architecture Framework - Testing resilience</li> <li>Landscape of Software Failure Cause Models</li> </ul>"},{"location":"automated-testing/integration-testing/","title":"Integration Testing","text":"<p>Integration testing is a software testing methodology used to determine how well individually developed components, or modules of a system communicate with each other. This method of testing confirms that an aggregate of a system, or sub-system, works together correctly or otherwise exposes erroneous behavior between two or more units of code.</p>"},{"location":"automated-testing/integration-testing/#why-integration-testing","title":"Why Integration Testing","text":"<p>Because one component of a system may be developed independently or in isolation of another it is important to verify the interaction of some or all components. A complex system may be composed of databases, APIs, interfaces, and more, that all interact with each other or additional external systems. Integration tests expose system-level issues such as broken database schemas or faulty third-party API integration. It ensures higher test coverage and serves as an important feedback loop throughout development.</p>"},{"location":"automated-testing/integration-testing/#integration-testing-design-blocks","title":"Integration Testing Design Blocks","text":"<p>Consider a banking application with three modules: login, transfers, and current balance, all developed independently. An integration test may verify when a user logs in they are re-directed to their current balance with the correct amount for the specific mock user. Another integration test may perform a transfer of a specified amount of money. The test may confirm there are sufficient funds in the account to perform the transfer, and after the transfer the current balance is updated appropriately for the mock user. The login page may be mocked with a test user and mock credentials if this module is not completed when testing the transfers module.</p> <p>Integration testing is done by the developer or QA tester. In the past, integration testing always happened after unit and before system and E2E testing. Compared to unit-tests, integration tests are fewer in quantity, usually run slower, and are more expensive to set up and develop. Now, if a team is following agile principles, integration tests can be performed before or after unit tests, early and often, as there is no need to wait for sequential processes. Additionally, integration tests can utilize mock data in order to simulate a complete system. There is an abundance of language-specific testing frameworks that can be used throughout the entire development lifecycle.</p> <p>It is important to note the difference between integration and acceptance testing. Integration testing confirms a group of components work together as intended from a technical perspective, while acceptance testing confirms a group of components work together as intended from a business scenario.</p>"},{"location":"automated-testing/integration-testing/#applying-integration-testing","title":"Applying Integration Testing","text":"<p>Prior to writing integration tests, the engineers must identify the different components of the system, and their intended behaviors and inputs and outputs. The architecture of the project must be fully documented or specified somewhere that can be readily referenced (e.g., the architecture diagram).</p> <p>There are two main techniques for integration testing.</p>"},{"location":"automated-testing/integration-testing/#big-bang","title":"Big Bang","text":"<p>Big Bang integration testing is when all components are tested as a single unit. This is best for small system as a system too large may be difficult to localize for potential errors from failed tests. This approach also requires all components in the system under test to be completed which may delay when testing begins.</p> <p></p>"},{"location":"automated-testing/integration-testing/#incremental-testing","title":"Incremental Testing","text":"<p>Incremental testing is when two or more components that are logically related are tested as a unit. After testing the unit, additional components are combined and tested all together. This process repeats until all necessary components are tested.</p>"},{"location":"automated-testing/integration-testing/#top-down","title":"Top Down","text":"<p>Top down testing is when higher level components are tested following the control flow of a software system. In the scenario, what is commonly referred to as stubs are used to emulate the behavior of lower level modules not yet complete or merged in the integration test.</p> <p></p>"},{"location":"automated-testing/integration-testing/#bottom-up","title":"Bottom Up","text":"<p>Bottom up testing is when lower level modules are tested together. In the scenario, what is commonly referred to as drivers are used to emulate the behavior of higher level modules not yet complete or included in the integration test.</p> <p></p> <p>A third approach known as the sandwich or hybrid model combines the bottom up and town down approaches to test lower and higher level components at the same time.</p>"},{"location":"automated-testing/integration-testing/#things-to-avoid","title":"Things to Avoid","text":"<p>There is a tradeoff a developer must make between integration test code coverage and engineering cycles. With mock dependencies, test data, and multiple environments at test, too many integration tests are infeasible to maintain and become increasingly less meaningful. Too much mocking will slow down the test suite, make scaling difficult, and may be a sign the developer should consider other tests for the scenario such as acceptance or E2E.</p> <p>Integration tests of complex systems require high maintenance. Avoid testing business logic in integration tests by keeping test suites separate. Do not test beyond the acceptance criteria of the task and be sure to clean up any resources created for a given test. Additionally, avoid writing tests in a production environment. Instead, write them in a scaled-down copy environment.</p>"},{"location":"automated-testing/integration-testing/#integration-testing-frameworks-and-tools","title":"Integration Testing Frameworks and Tools","text":"<p>Many tools and frameworks can be used to write both unit and integration tests. The following tools are for automating integration tests.</p> <ul> <li>JUnit</li> <li>Robot Framework</li> <li>moq</li> <li>Cucumber</li> <li>Selenium</li> <li>Behave (Python)</li> </ul>"},{"location":"automated-testing/integration-testing/#conclusion","title":"Conclusion","text":"<p>Integration testing demonstrates how one module of a system, or external system, interfaces with another. This can be a test of two components, a sub-system, a whole system, or a collection of systems. Tests should be written frequently and throughout the entire development lifecycle using an appropriate amount of mocked dependencies and test data. Because integration tests prove that independently developed modules interface as technically designed, it increases confidence in the development cycle providing a path for a system that deploys and scales.</p>"},{"location":"automated-testing/integration-testing/#resources","title":"Resources","text":"<ul> <li>Integration testing approaches</li> <li>Integration testing pros and cons</li> <li>Integration tests mocks and stubs</li> <li>Software Testing: Principles and Practices</li> <li>Integration testing Behave test quick start</li> </ul>"},{"location":"automated-testing/performance-testing/","title":"Performance Testing","text":"<p>Performance Testing is an overloaded term that is used to refer to several subcategories of performance related testing, each of which has different purpose.</p> <p>A good description of overall performance testing is as follows:</p> <p>Performance testing is a type of testing intended to determine the responsiveness, throughput, reliability, and/or scalability of a system under a given workload. Performance Testing Guidance for Web Applications.</p> <p>Before getting into the different subcategories of performance tests let us understand why performance testing is typically done.</p>"},{"location":"automated-testing/performance-testing/#why-performance-testing","title":"Why Performance Testing","text":"<p>Performance testing is commonly conducted to accomplish one or more the following:</p> <ul> <li> <p>Tune the system's performance</p> <ul> <li>Identifying bottlenecks and issues with the system at different load   levels.</li> </ul> <ul> <li>Comparing performance characteristics of the system for different system   configurations.</li> </ul> <ul> <li>Come up with a scaling strategy for the system.</li> </ul> </li> </ul> <ul> <li> <p>Assist in capacity planning</p> <ul> <li>Capacity planning is the process of determining what type of hardware and   software resources are required to run an application to support pre-defined performance goals.</li> </ul> <ul> <li>Capacity planning involves identifying business   expectations, the periodic fluctuations of application usage, considering   the cost of running the hardware and software infrastructure.</li> </ul> </li> </ul> <ul> <li> <p>Assess the system's readiness for release:</p> <ul> <li>Evaluating the system's performance characteristics (response time, throughput) in a production-like environment. The goal is to ensure that performance goals can be achieved upon release.</li> </ul> </li> </ul> <ul> <li> <p>Evaluate the performance impact of application changes</p> <ul> <li>Comparing the performance characteristics of an application after a change   to the values of performance characteristics during previous runs (or   baseline values), can provide an indication of performance issues (performance regression) or   enhancements introduced due to a change</li> </ul> </li> </ul>"},{"location":"automated-testing/performance-testing/#key-performance-testing-categories","title":"Key Performance Testing Categories","text":"<p>Performance testing is a broad topic. There are many areas where you can perform tests. In broad strokes you can perform tests on the backend and on the front end. You can test the performance of individual components as well as testing the end-to-end functionality.</p> <p>There are several categories of tests as well:</p>"},{"location":"automated-testing/performance-testing/#load-testing","title":"Load Testing","text":"<p>This is the subcategory of performance testing that focuses on validating the performance characteristics of a system, when the system faces the load volumes which are expected during production operation. An Endurance Test or a Soak Test is a load test carried over a long duration ranging from several hours to days.</p>"},{"location":"automated-testing/performance-testing/#stress-testing","title":"Stress Testing","text":"<p>This is the subcategory of performance testing that focuses on validating the performance characteristics of a system when the system faces extreme load. The goal is to evaluate how does the system handles being pressured to its limits, does it recover (i.e., scale-out) or does it just break and fail?</p>"},{"location":"automated-testing/performance-testing/#endurance-testing","title":"Endurance Testing","text":"<p>The goal of endurance testing is to make sure that the system can maintain good performance under extended periods of load.</p>"},{"location":"automated-testing/performance-testing/#spike-testing","title":"Spike Testing","text":"<p>The goal of Spike testing is to validate that a software system can respond well to large and sudden spikes.</p>"},{"location":"automated-testing/performance-testing/#chaos-testing","title":"Chaos Testing","text":"<p>Chaos testing or Chaos engineering is the practice of experimenting on a system to build confidence that the system can withstand turbulent conditions in production. Its goal is to identify weaknesses before they manifest system wide. Developers often implement fallback procedures for service failure. Chaos testing arbitrarily shuts down different parts of the system to validate that fallback procedures function correctly.</p>"},{"location":"automated-testing/performance-testing/#best-practices","title":"Best Practices","text":"<p>Consider the following best practices for performance testing:</p> <ul> <li>Make one change at a time. Don't make multiple changes to the system   between tests. If you do, you won't know which change caused the performance   to improve or degrade.</li> </ul> <ul> <li>Automate testing. Strive to automate the setup and teardown of resources   for a performance run as much as possible. Manual execution can lead to   misconfigurations.</li> </ul> <ul> <li>Use different IP addresses. Some systems will throttle requests from a   single IP address. If you are testing a system that has this type of   restriction, you can use different IP addresses to simulate multiple users.</li> </ul>"},{"location":"automated-testing/performance-testing/#performance-monitor-metrics","title":"Performance Monitor Metrics","text":"<p>When executing the various types of testing approaches, whether it is stress, endurance, spike, or chaos testing, it is important to capture various metrics to see how the system performs.</p> <p>At the basic hardware level, there are four areas to consider.</p> <ul> <li>Physical disk</li> <li>Memory</li> <li>Processor</li> <li>Network</li> </ul> <p>These four areas are inextricably linked, meaning that poor performance in one area will lead to poor performance in another area. Engineers concerned with understanding application performance, should focus on these four core areas.</p> <p>The classic example of how performance in one area can affect performance in another area is memory pressure.</p> <p>If an application's available memory is running low, the operating system will try to compensate for shortages in memory by transferring pages of data from memory to disk, thus freeing up memory. But this work requires help from the CPU and the physical disk.</p> <p>This means that when you look at performance when there are low amounts of memory, you will also notice spikes in disk activity as well as CPU.</p>"},{"location":"automated-testing/performance-testing/#physical-disk","title":"Physical Disk","text":"<p>Almost all software systems are dependent on the performance of the physical disk. This is especially true for the performance of databases. More modern approaches to using SSDs for physical disk storage can dramatically improve the performance of applications. Here are some of the metrics that you can capture and analyze:</p> Counter Description Avg. Disk Queue Length This value is derived using the (Disk Transfers/sec)*(Disk sec/Transfer) counters. This metric describes the disk queue over time, smoothing out any quick spikes. Having any physical disk with an average queue length over 2 for prolonged periods of time can be an indication that your disk is a bottleneck. % Idle Time This is a measure of the percentage of time that the disk was idle. ie. there are no pending disk requests from the operating system waiting to be completed. A low number here is a positive sign that disk has excess capacity to service or write requests from the operating system. Avg. Disk sec/Read and Avg. Disk sec/Write These both measure the latency of your disks. Latency is defined as the average time it takes for a disk transfer to complete. You obviously want is low numbers as possible but need to be careful to account for inherent speed differences between SSD and traditional spinning disks. For this counter is important to define a baseline after the hardware is installed. Then use this value going forward to determine if you are experiencing any latency issues related to the hardware. Disk Reads/sec and Disk Writes/sec These counters each measure the total number of IO requests completed per second. Similar to the latency counters, good and bad values for these counters depend on your disk hardware but values higher than your initial baseline don't normally point to a hardware issue in this case. This counter can be useful to identify spikes in disk I/O."},{"location":"automated-testing/performance-testing/#processor","title":"Processor","text":"<p>It is important to understand the amount of time spent in kernel or privileged mode. In general, if code is spending too much time executing operating system calls, that could be an area of concern because it will not allow you to run your user mode applications, such as your databases, Web servers/services, etc.</p> <p>The guideline is that the CPU should only spend about 20% of the total processor time running in kernel mode.</p> Counter Description % Processor time This is the percentage of total elapsed time that the processor was busy executing. This counter can either be too high or too low. If your processor time is consistently below 40%, then there is a question as to whether you have over provisioned your CPU. 70% is generally considered a good target number and if you start going higher than 70%, you may want to explore why there is high CPU pressure. % Privileged (Kernel Mode) time This measures the percentage of elapsed time the processor spent executing in kernel mode. Since this counter takes into account only kernel operations a high percentage of privileged time (greater than 25%) may indicate driver or hardware issue that should be investigated. % User time The percentage of elapsed time the processor spent executing in user mode (your application code). A good guideline is to be consistently below 65% as you want to have some buffer for both the kernel operations mentioned above as well as any other bursts of CPU required by other applications. Queue Length This is the number of threads that are ready to execute but waiting for a core to become available. On single core machines a sustained value greater than 2-3 can mean that you have some CPU pressure. Similarly, for a multicore machine divide the queue length by the number of cores and if that is continuously greater than 2-3 there might be CPU pressure."},{"location":"automated-testing/performance-testing/#network-adapter","title":"Network Adapter","text":"<p>Network speed is often a hidden culprit of poor performance. Finding the root cause to poor network performance is often difficult. The source of issues can originate from bandwidth hogs such as videoconferencing, transaction data, network backups, recreational videos.</p> <p>In fact, the three most common reasons for a network slow down are:</p> <ul> <li>Congestion</li> <li>Data corruption</li> <li>Collisions</li> </ul> <p>Some of the tools that can help include:</p> <ul> <li>ifconfig</li> <li>netstat</li> <li>iperf</li> <li>tcpretrans</li> <li>tcpdump</li> <li>WireShark</li> </ul> <p>Troubleshooting network performance usually begins with checking the hardware. Typical things to explore is whether there are any loose wires or checking that all routers are powered up. It is not always possible to do so, but sometimes a simple case of power recycling of the modem or router can solve many problems.</p> <p>Network specialists often perform the following sequence of troubleshooting steps:</p> <ul> <li>Check the hardware</li> <li>Use IP config</li> <li>Use ping and tracert</li> <li>Perform DNS Check</li> </ul> <p>More advanced approaches often involve looking at some of the networking performance counters, as explained below.</p>"},{"location":"automated-testing/performance-testing/#network-counters","title":"Network Counters","text":"<p>The table above gives you some reference points to better understand what you can expect out of your network. Here are some counters that can help you understand where the bottlenecks might exist:</p> Counter Description Bytes Received/sec The rate at which bytes are received over each network adapter. Bytes Sent/sec The rate at which bytes are sent over each network adapter. Bytes Total/sec The number of bytes sent and received over the network. Segments Received/sec The rate at which segments are received for the protocol Segments Sent/sec The rate at which segments are sent. % Interrupt Time The percentage of time the processor spends receiving and servicing hardware interrupts. This value is an indirect indicator of the activity of devices that generate interrupts, such as network adapters. <p>There is an important distinction between latency and throughput. Latency measures the time it takes for a packet to be transferred across the network, either in terms of a one-way transmission or a round-trip transmission. Throughput is different and attempts to measure the quantity of data being sent and received within a unit of time.</p>"},{"location":"automated-testing/performance-testing/#memory","title":"Memory","text":"Counter Description Available MBs This counter represents the amount of memory that is available to applications that are executing. Low memory can trigger Page Faults, whereby additional pressure is put on the CPU to swap memory to and from the disk. if the amount of available memory dips below 10%, more memory should be obtained. Pages/sec This is actually the sum of \"Pages Input/sec\" and \"Pages Output/sec\" counters which is the rate at which pages are being read and written as a result of pages faults. Small spikes with this value do not mean there is an issue but sustained values of greater than 50 can mean that system memory is a bottleneck. Paging File(_Total)\\% Usage The percentage of the system page file that is currently in use. This is not directly related to performance, but you can run into serious application issues if the page file does become completely full and additional memory is still being requested by applications."},{"location":"automated-testing/performance-testing/#key-performance-testing-activities","title":"Key Performance Testing Activities","text":"<p>Performance testing activities vary depending on the subcategory of performance testing and the system's requirements and constraints. For specific guidance you can follow the link to the subcategory of performance tests listed above. The following activities might be included depending on the performance test subcategory:</p>"},{"location":"automated-testing/performance-testing/#identify-the-acceptance-criteria-for-the-tests","title":"Identify the Acceptance Criteria for the Tests","text":"<p>This will generally include identifying the goals and constraints for the performance characteristics of the system</p>"},{"location":"automated-testing/performance-testing/#plan-and-design-the-tests","title":"Plan and Design the Tests","text":"<p>In general we need to consider the following points:</p> <ul> <li>Defining the load the application should be tested with</li> </ul> <ul> <li>Establishing the metrics to be collected</li> </ul> <ul> <li>Establish what tools will be used for the tests</li> </ul> <ul> <li>Establish the performance test frequency: whether the performance tests be   done as a part of the feature development sprints, or only prior to release to   a major environment?</li> </ul>"},{"location":"automated-testing/performance-testing/#implementation","title":"Implementation","text":"<ul> <li>Implement the performance tests according to the designed approach.</li> </ul> <ul> <li>Instrument the system and ensure that is emitting the needed performance metrics.</li> </ul>"},{"location":"automated-testing/performance-testing/#test-execution","title":"Test Execution","text":"<ul> <li>Execute the tests and collect performance metrics.</li> </ul>"},{"location":"automated-testing/performance-testing/#result-analysis-and-re-testing","title":"Result Analysis and Re-testing","text":"<ul> <li>Analyze the results/performance metrics from the tests.</li> </ul> <ul> <li>Identify needed changes to tweak the system (i.e., code, infrastructure) to better accommodate the test objectives.</li> </ul> <ul> <li>Then test again. This cycle continues until the test objective is achieved.</li> </ul> <p>The Iterative Performance Test Template can be used to capture details about the test result for every iterations.</p>"},{"location":"automated-testing/performance-testing/#resources","title":"Resources","text":"<ul> <li>Patters and Practices: Performance Testing Guidance for Web Applications</li> </ul>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/","title":"Performance Test Iteration Template","text":"<p>This document provides template for capturing results of performance tests. Performance tests are done in iterations and each iteration should have a clear goal. The results of any iteration is immutable regardless whether the goal was achieved or not. If the iteration failed or the goal is not achieved then a new iteration of testing is carried out with appropriate fixes. It is recommended to keep track of the recorded iterations to maintain a timeline of how system evolved and which changes affected the performance in what way. Feel free to modify this template as needed.</p>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#iteration-template","title":"Iteration Template","text":""},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#goal","title":"Goal","text":"<p>Mention in bullet points the goal for this iteration of test. The goal should be small and measurable within this iteration.</p>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#test-details","title":"Test Details","text":"<ul> <li>Date: Date and time when this iteration started and ended</li> <li>Duration: Time it took to complete this iteration.</li> <li>Application Code: Commit id and link to the commit for the code(s) which are being tested in this iteration</li> <li>Benchmarking Configuration:<ul> <li>Application Configuration: In bullet points mention the configuration for application that should be recorded</li> <li>System Configuration: In bullet points mention the configuration of the infrastructure</li> </ul> </li> </ul> <p>Record different types of configurations. Usually application specific configuration changes between iterations whereas system or infrastructure configurations rarely change</p>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#work-items","title":"Work Items","text":"<p>List of links to relevant work items (task, story, bug) being tested in this iteration.</p>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#results","title":"Results","text":"<pre><code>In bullet points document the results from the test.\n- Attach any documents supporting the test results.\n- Add links to the dashboard for metrics and logs such as Application Insights.\n- Capture screenshots for metrics and include it in the results. Good candidate for this is CPU/Memory/Disk usage.\n</code></pre>"},{"location":"automated-testing/performance-testing/iterative-perf-test-template/#observations","title":"Observations","text":"<p>Observations are insights derived from test results. Keep the observations brief and as bullet points. Mention outcomes supporting the goal of the iteration. If any of the observation results in a work item (task, story, bug) then add the link to the work item together with the observation.</p>"},{"location":"automated-testing/performance-testing/load-testing/","title":"Load Testing","text":"<p>\"Load testing is performed to determine a system's behavior under both normal and anticipated peak load conditions.\" - Load testing - Wikipedia</p> <p>A load test is designed to determine how a system behaves under expected normal and peak workloads. Specifically its main purpose is to confirm if a system can handle the expected load level. Depending on the target system this could be concurrent users, requests per second or data size.</p>"},{"location":"automated-testing/performance-testing/load-testing/#why-load-testing","title":"Why Load Testing","text":"<p>The main objective is to prove the system can behave normally under the expected normal load before releasing it to production. The criteria that define \"behave normally\" will depend on your target, this may be as simple as \"the system remains available\", but it could also include meeting a response time SLA or error rate.</p> <p>Additionally, the results of a load test can also be used as data to help with capacity planning and calculating scalability.</p>"},{"location":"automated-testing/performance-testing/load-testing/#load-testing-design-blocks","title":"Load Testing Design Blocks","text":"<p>There are a number of basic components that are required to carry out a load test.</p> <ol> <li> <p>In order to have meaningful results the system needs to be tested in a production-like environment with a network and hardware which closely resembles the expected deployment environment.</p> </li> <li> <p>The load test will consist of a module which simulates user activity. Of course the composition of this \"user activity\" will vary based on the type of application being tested. For example, an e-commerce website might simulate user browsing and purchasing items, but an IoT data ingestion pipeline would simulate a stream of device readings. Please ensure the simulation is as close to real activity as possible, and consider not just volume but also patterns and variability. For example, if the simulator data is too uniform or predictable, then cache/hit ratios may impact your results.</p> </li> <li> <p>The load test will be initiated from a component external to the target system which can control the amount of load applied. This can be a single agent, but may need to scaled to multiple agents in order to achieve higher levels of activity.</p> </li> <li> <p>Although not required to run a load test, it is advisable to have monitoring and/or logging in place to be able to measure the impact of the test and discover potential bottlenecks.</p> </li> </ol>"},{"location":"automated-testing/performance-testing/load-testing/#applying-the-load-testing","title":"Applying the Load Testing","text":""},{"location":"automated-testing/performance-testing/load-testing/#planning","title":"Planning","text":"<ol> <li>Identify key scenarios to measure - Gather these scenarios from Product Owner, they should provide a representative sample of real world traffic. The key activity of this phase is to agree on and define the load test cases.</li> <li>Determine expected normal and peak load for the scenarios - Determine a load level such as concurrent users or requests per second to find the size of the load test you will run.</li> <li>Identify success criteria metrics - These may be on testing side such as response time and error rate, or they may be on the system side such as CPU and memory usage.</li> <li>Agree on test matrix - Which load test cases should be run for which combinations of input parameters.</li> <li>Select the right tool - Many frameworks exist for load testing so consider if features and limitations are suitable for your needs (Some popular tools are listed below). This may also include development of a custom load test client, see Preparation phase below.</li> <li>Observability - Determine which metrics need to gathered to gain insight into throughput, latency, resource utilization, etc.</li> <li>Scalability - Determine the amount of scale needed by load generator, workload application, CPU, Memory, and network components needed to achieve testing goals. The use of kubernetes on the cloud can be used to make testing infinitely scalable.</li> </ol>"},{"location":"automated-testing/performance-testing/load-testing/#preparation","title":"Preparation","text":"<p>The key activity is to replace the end user client with a test bench that simulates one or more instances of the original client. For standard 3rd party tools it may suffice to configure the existing test UI before initiating the load tests.  </p> <p>If a custom client is used, code development will be required:</p> <ol> <li>Custom development - Design for minimal impact/overhead. Be sure to capture only those features of the production client that are relevant from a load perspective. Does it matter if the same test is duplicated, or must the workload be unique for each test? Can all tests be run under the same user context?</li> <li>Test environment - Create test environment that resembles production environment. This includes the platform as well as external systems, e.g., data sources.</li> <li>Security contexts - Be sure to have all requisite security contexts for the test environment. Automation like pipelines may require special setup, e.g., OAuth2 client credential flow instead of auth code flow, because interactive login is replaced by non-interactive. Allow planning leeway in case admin approval is required for new security contexts.</li> <li>Test data strategy - Make sure that output data format (ascii/binary/...) is compatible with whatever analysis tool is used in the analysis phase. This also includes storage areas (local/cloud/...), which may trigger new security contexts. Bear in mind that it may be necessary to collect data from sources external to the application to correlate potential performance issues with the application behavior. This includes platform and network metrics. Make sure to collect data that covers analysis needs (statistical measures, distributions, graphs, etc.).</li> <li>Automation - Repeatability is critical. It must be possible to re-run a given test multiple times to verify consistency and resilience of the application itself and the underlying platform.  Pipelines are recommended whenever possible. Evaluate whether load tests should be run as part of the PR strategy.</li> <li>Test client debugging - All test modules should be carefully debugged to ensure that the execution phase progresses smoothly.</li> <li>Test client validation - All test modules should be validated for extreme values of the input parameters. This reduces the risk of running into unexpected difficulties when stepping through the full test matrix during the execution phase.</li> </ol>"},{"location":"automated-testing/performance-testing/load-testing/#execution","title":"Execution","text":"<p>It is recommended to use an existing testing framework (see below). These tools will provide a method of both specifying the user activity scenarios and how to execute those at load. Depending on the situation, it may be advisable to coordinate testing activities with the platform operations team.</p> <p>It is common to slowly ramp up to your desired load to better replicate real world behavior. Once you have reached your defined workload, maintain this level long enough to see if your system stabilizes. To finish up the test you should also ramp to see record how the system slows down as well.</p> <p>You should also consider the origin of your load test traffic. Depending on the scope of the target system you may want to initiate from a different location to better replicate real world traffic such as from a different region.</p> <p>Note: Before starting please be aware of any restrictions on your network such as DDOS protection where you may need to notify a network administrator or apply for an exemption.</p> <p>Note: In general, the preferred approach to load testing would be the usage of a standard test framework such as the ones discussed below.  There are cases, however, where a custom test client may be advantageous. Examples include batch oriented workloads that can be run under a single security context and the same test data can be re-used for multiple load tests.  In such a scenario it may be beneficial to develop a custom script that can be used interactively as well as non-interactively.</p>"},{"location":"automated-testing/performance-testing/load-testing/#analysis","title":"Analysis","text":"<p>The analysis phase represents the work that brings all previous activities together:</p> <ul> <li>Set aside time to allow for collection of new test data based on the analysis of the load tests.</li> <li>Correlate application metrics and platform metrics to identify potential pitfalls and bottlenecks.</li> <li>Include business stakeholders early in the analysis phase to validate application findings. Include platform operations to validate platform findings.</li> </ul>"},{"location":"automated-testing/performance-testing/load-testing/#report-writing","title":"Report Writing","text":"<p>Summarize your findings from the analysis phase. Be sure to include application and platform enhancement suggestions, if any.</p>"},{"location":"automated-testing/performance-testing/load-testing/#further-testing","title":"Further Testing","text":"<p>After completing your load test you should be set up to continue on to additional related testing such as;</p> <ul> <li>Soak Testing - Also known as Endurance Testing. Performing a load test over an extended period of time to ensure long term stability.</li> <li>Stress Testing - Gradually increasing the load to find the limits of the system and identify the maximum capacity.</li> <li>Spike Testing - Introduce a sharp short-term increase into the load scenarios.</li> <li>Scalability Testing - Re-testing of a system as your expand horizontally or vertically to measure how it scales.</li> <li>Distributed Testing - Distributed testing allows you to leverage the power of multiple machines to perform larger or more in-depth tests faster. Is necessary when a fully optimized node cannot produce the load required by your extremely large test.</li> </ul>"},{"location":"automated-testing/performance-testing/load-testing/#load-generation-testing-frameworks-and-tools","title":"Load Generation Testing Frameworks and Tools","text":"<p>Here are a few popular load testing frameworks you may consider, and the languages used to define your scenarios.</p> <ul> <li>Azure Load Testing (https://learn.microsoft.com/en-us/azure/load-testing/) - Managed platform for running load tests on Azure. It allows to run and monitor tests automatically, source secrets from the KeyVault, generate traffic at scale, and load test Azure private endpoints. In the simple case, it executes load tests with HTTP GET traffic to a given endpoint. For the more complex cases, you can upload your own JMeter scenarios.</li> <li>JMeter (https://github.com/apache/jmeter) - Has built in patterns to test without coding, but can be extended with Java.</li> <li>Artillery (https://artillery.io/) - Write your scenarios in Javascript, executes a node application.</li> <li>Gatling (https://gatling.io/) -  Write your scenarios in Scala with their DSL.</li> <li>Locust (https://locust.io/) - Write your scenarios in Python using the concept of concurrent user activity.</li> <li>K6 (https://k6.io/) - Write your test scenarios in Javascript, available as open source kubernetes operator, open source Docker image, or as SaaS. Particularly useful for distributed load testing. Integrates easily with prometheus.</li> <li>NBomber (https://nbomber.com/) - Write your test scenarios in C# or F#, available integration with test runners (NUnit/xUnit).</li> <li>WebValidate (https://github.com/microsoft/webvalidate) - Web request validation tool used to run end-to-end tests and long-running performance and availability tests.</li> </ul>"},{"location":"automated-testing/performance-testing/load-testing/#sample-workload-applications","title":"Sample Workload Applications","text":"<p>In the case where a specific workload application is not being provided and the focus is instead on the system, here are a few popular sample workload applications you may consider.</p> <ul> <li>HttpBin (Python, GoLang) - Supports variety of endpoint types and language implementations. Can echo data used in request.</li> </ul> <ul> <li>NGSA (Java, C#) - Intended for Kubernetes Platform and Monitoring Testing. Built on top of IMDB data store with many CRUD endpoints available. Does not need to have a live database connection.</li> <li>MockBin (https://github.com/Kong/mockbin) - Allows you to generate custom endpoints to test, mock, and track HTTP requests &amp; responses between libraries, sockets and APIs.</li> </ul>"},{"location":"automated-testing/performance-testing/load-testing/#conclusion","title":"Conclusion","text":"<p>A load test is critical step to understand if a target system will be reliable under the expected real world traffic.</p> <p>Of course, it's only as good as your ability to predict the expected load, so it's important to follow up with other further testing to truly understand how your system behaves in different situations.</p>"},{"location":"automated-testing/performance-testing/load-testing/#resources","title":"Resources","text":"<p>List additional readings about this test type for those that would like to dive deeper.</p> <ul> <li>Microsoft Azure Well-Architected Framework &gt; Load Testing</li> </ul>"},{"location":"automated-testing/shadow-testing/","title":"Shadow Testing","text":"<p>Shadow testing is one approach to reduce risks before going to production. Shadow testing is also known as \"Shadow Deployment\" or \"Shadowing Traffic\" and similarities with \"Dark launching\".</p>"},{"location":"automated-testing/shadow-testing/#when-to-use","title":"When to Use","text":"<p>Shadow Testing reduces risks when you consider replacing the current environment (V-Current) with candidate environment with new feature (V-Next). This approach is monitoring and capturing differences between two environments then compare and reduces all risks before you introduce a new feature/release.</p> <p>In our test cases, code coverage is very important however sometimes providing code coverage can be tricky to replicate real-life combinations and possibilities. In this approach, to test V-Next environment we have side by side deployment, we're replicating the same traffic with V-Current environment and directing same traffic to V-Next environment, the only difference is we don't return any response from V-Next environment to users, but we collect those responses to compare with V-Current responses.</p> <p></p> <p>Referencing back to one of the Principles of Chaos Engineering, mentions importance of sampling real traffic like below:</p> <p>Systems behave differently depending on environment and traffic patterns. Since the behavior of utilization can change at any time, sampling real traffic is the only way to reliably capture the request path. To guarantee both authenticity of the way in which the system is exercised and relevance to the current deployed system, Chaos strongly prefers to experiment directly on production traffic.</p> <p>With this Shadow Testing approach we're leveraging real customer behavior in V-Next environment with sampling real traffic and mitigating the risks which users may face on production. At the same time we're testing V-Next environment infrastructure for scaling with real sampled traffic. V-Next should scale with the same way V-Current does. We're testing actual behavior of the product and this cause zero impact to production to test new features since traffic is replicated to V-next environment.</p> <p>There are some similarities with Dark Launching, Dark Launching proposes to integrate new feature into production code, but users can't use the feature. On the backend you can test your feature and improve the performance until it's acceptable. It is also similar to Feature Toggles which provides you with an ability to enable/disable your new feature in production on a UI level. With this approach your new feature will be visible to users, and you can collect feedback. Using Dark Launching with Feature Toggles can be very useful for introducing a new feature.</p>"},{"location":"automated-testing/shadow-testing/#applicable-to","title":"Applicable to","text":"<ul> <li>Production deployments: V-Next in Shadow testing always working separately and not effecting production. Users are not effected with this test.</li> <li>Infrastructure: Shadow testing replicating the same traffic, in test environment you can have the same traffic on the production. It helps to produce real life test scenarios</li> <li>Handling Scale: All traffic is replicated, and you have a chance to see how your system scaling.</li> </ul>"},{"location":"automated-testing/shadow-testing/#shadow-testing-frameworks-and-tools","title":"Shadow Testing Frameworks and Tools","text":"<p>There are some tools to implement shadow testing. The main purpose of these tools is to compare responses of V-Current and V-Next then find the differences.</p> <ul> <li>Diffy</li> <li>Envoy</li> <li>McRouter</li> <li>Scientist</li> <li>Keploy</li> </ul> <p>One of the most popular tools is Diffy. It was created and used at Twitter. Now the original author and a former Twitter employee maintains their own version of this project, called Opendiffy. Twitter announced this tool on their engineering blog as \"Testing services without writing tests\".</p> <p>As of today Diffy is used in production by Twitter, Airbnb, Baidu and Bytedance companies. Diffy explains the shadow testing feature like this:</p> <p>Diffy finds potential bugs in your service using running instances of your new code, and your old code side by side. Diffy behaves as a proxy and multicasts whatever requests it receives to each of the running instances. It then compares the responses, and reports any regressions that may surface from those comparisons. The premise for Diffy is that if two implementations of the service return \u201csimilar\u201d responses for a sufficiently large and diverse set of requests, then the two implementations can be treated as equivalent, and the newer implementation is regression-free.</p> <p></p> <p>Diffy architecture</p>"},{"location":"automated-testing/shadow-testing/#conclusion","title":"Conclusion","text":"<p>Shadow Testing is a useful approach to reduce risks when you consider replacing the current environment with candidate environment using new feature(s). Shadow testing replicates traffic of the production to candidate environment for testing, so you get same production use case scenarios in the test environment. You can compare differences on both environments and validate your candidate environment to be ready for releasing.</p> <p>Some advantages of shadow testing are:</p> <ul> <li>Zero impact to production environment</li> <li>No need to generate test scenarios and test data</li> <li>We can test real-life scenarios with real-life data.</li> <li>We can simulate scale with replicated production traffic.</li> </ul>"},{"location":"automated-testing/shadow-testing/#resources","title":"Resources","text":"<ul> <li>Martin Fowler - Dark Launching</li> <li>Martin Fowler - Feature Toggle</li> <li>Traffic Shadowing/Mirroring</li> </ul>"},{"location":"automated-testing/smoke-testing/","title":"Smoke Testing","text":"<p>Smoke tests, sometimes named Sanity, Acceptance, or Build/Release Verification tests, are a sub-type of system/functional tests that are usually used as gates that verify the application's readiness as a preliminary step. If an application passes the smoke tests, it is acceptable, or in a stable-enough state, for the next stages of testing or deployment.</p>"},{"location":"automated-testing/smoke-testing/#when-to-use","title":"When To Use","text":""},{"location":"automated-testing/smoke-testing/#problem-addressed","title":"Problem Addressed","text":"<p>Smoke tests are meant to find, as early as possible, if an application is working or not. The goal of smoke tests is to save time; if the current version of the application does not pass smoke tests, then the rest of the integration or deployment chain for it can be abandoned. Smoke tests do not aim to provide full functionality coverage but instead focus on a few quick acceptance invocations for which the application should, at all times, respond correctly to.</p>"},{"location":"automated-testing/smoke-testing/#roi-tipping-point","title":"ROI Tipping Point","text":"<p>Smoke tests cover only the most critical application path, and should not be used to actually test the application's behavior, keeping execution time and complexity to minimum. The tests can be formed of a subset of the application's integration or e2e tests, and they cover as much of the functionality with as little depth as required.</p> <p>The golden rule of a good smoke test is that it saves time on validating that the application is acceptable to a stage where better, more thorough testing will begin.</p>"},{"location":"automated-testing/smoke-testing/#applicable-to","title":"Applicable to","text":"<ul> <li> Local dev desktop - Example: Applying manual smoke testing to verify that the application is OK.</li> <li> Build pipelines - Example: Running a small set of the integration test suite before running the full coverage of tests, which may take a long time.</li> <li> Non-production and Production deployments - Example: Running a curl command to the product's API and asserting the response is 200 before running load test which consume resources.</li> <li> PR Validation - Example: - Deploying the application chart to a test namespace and validating the release is successful and no immediate regressions are merged.</li> </ul>"},{"location":"automated-testing/smoke-testing/#conclusion","title":"Conclusion","text":"<p>Smoke testing is a low-effort, high-impact step to ship more reliable software. It should be considered amongst the first stages to implement when planning continuously integrated and delivered systems.</p>"},{"location":"automated-testing/smoke-testing/#resources","title":"Resources","text":"<ul> <li>Wikipedia - Smoke Testing</li> <li>Google SRE Book - System Tests</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/","title":"Synthetic Monitoring Tests","text":"<p>Synthetic Monitoring Tests are a set of functional tests that target a live system in production. The focus of these tests, which are sometimes named \"watchdog\", \"active monitoring\" or \"synthetic transactions\", is to verify the product's health and resilience continuously.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#why-synthetic-monitoring-tests","title":"Why Synthetic Monitoring Tests","text":"<p>Traditionally, software providers rely on testing through CI/CD stages in the well known testing pyramid (unit, integration, e2e) to validate that the product is healthy and without regressions. Such tests will run on the build agent or in the test/stage environment before being deployed to production and released to live user traffic. During the services' lifetime in the production environment, they are safeguarded by monitoring and alerting tools that rely on Real User Metrics/Monitoring (RUM).</p> <p>However, as more organizations today provide highly-available (99.9+ SLA) products, they find that the nature of long-lived distributed applications, which typically rely on several hardware and software components, is to fail. Frequent releases (sometimes multiple times per day) of various components of the system can create further instability. This rapid rate of change to the production environment tends to make testing during CI/CD stages not hermetic and actually not representative of the end user experience and how the production system actually behaves.</p> <p>For such systems, the ambition of service engineering teams is to reduce to a minimum the time it takes to fix errors, or the MTTR - Mean Time To Repair. It is a continuous effort, performed on the live/production system. Synthetic Monitors can be used to detect the following issues:</p> <ul> <li>Availability - Is the system or specific region available.</li> <li>Transactions and customer journeys - Known good requests should work, while known bad requests should error.</li> <li>Performance - How fast are actions and is that performance maintained through high loads and through version releases.</li> <li>3rd Party components - Cloud or software components used by the system may fail.</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/#shift-right-testing","title":"Shift-Right Testing","text":"<p>Synthetic Monitoring tests are a subset of tests that run in production, sometimes named Test-in-Production or Shift-Right tests. With Shift-Left paradigms that are so popular, the approach is to perform testing as early as possible in the application development lifecycle (i.e., moved left on the project timeline). Shift right compliments and adds on top of Shift-Left. It refers to running tests late in the cycle, during deployment, release, and post-release when the product is serving production traffic. They provide modern engineering teams a broader set of tools to assure high SLAs over time.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#synthetic-monitoring-tests-design-blocks","title":"Synthetic Monitoring Tests Design Blocks","text":"<p>A synthetic monitoring test is a test that uses synthetic data and real testing accounts to inject user behaviors to the system and validates their effect, usually by passively relying on existing monitoring and alerting capabilities. Components of synthetic monitoring tests include Probes, test code/ accounts which generates data, and Monitoring tools placed to validate both the system's behavior under test and the health of the probes themselves.</p> <p></p>"},{"location":"automated-testing/synthetic-monitoring-tests/#probes","title":"Probes","text":"<p>Probes are the source of synthetic user actions that drive testing. They target the product's front-end or publicly-facing APIs and are running on their own production environment. A Synthetic Monitoring test is, in fact, very related to black-box tests and would usually focus on end-to-end scenarios from a user's perspective. It is not uncommon for the same code for e2e or integration tests to be used to implement the probe.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#monitoring","title":"Monitoring","text":"<p>Given that Synthetic Monitoring tests are continuously running, at intervals, in a production environment, the assertion of system behavior through analysis relies on existing monitoring pillars used in live system (Logging, Metrics, Distributed Tracing). There would usually be a finite set of tests, and key metrics that are used to build monitors and alerts to assert against the known SLO, and verify that the OKR for that system are maintained. The monitoring tools are effectively capturing both RUMs and synthetic data generated by the probes.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#applying-synthetic-monitoring-tests","title":"Applying Synthetic Monitoring Tests","text":""},{"location":"automated-testing/synthetic-monitoring-tests/#asserting-the-system-under-test","title":"Asserting the System under Test","text":"<p>Synthetic monitoring tests are usually statistical. Test metrics are compared against some historical or running average with a time dimension (Example: Over the last 30 days, for this time of day, the mean average response time is 250ms for AddToCart operation with a standard deviation from the mean of +/- 32ms). So if an observed measurement is within a deviation of the norm at any time, the services are probably healthy.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#building-a-synthetic-monitoring-solution","title":"Building a Synthetic Monitoring Solution","text":"<p>At a high level, building synthetic monitors usually consists of the following steps:</p> <ul> <li>Determine the metric to be validated (functional result, latency, etc.)</li> <li>Build a piece of automation that measures that metric against the system, and gathers telemetry into the system's existing monitoring infrastructure.</li> <li>Set up monitoring alarms/actions/responses that detect the failure of the system to meet the desired goal of the metric.</li> <li>Run the test case automation continuously at an appropriate interval.</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/#monitoring-the-health-of-tests","title":"Monitoring the Health of Tests","text":"<p>Probes runtime is a production environment on its own, and the health of tests is critical. Many providers offer cloud-based systems that host such runtimes, while some organizations use existing production environments to run these tests on. In either way, a monitor-the-monitor strategy should be a first-class citizen of the production environment's alerting systems.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#synthetic-monitoring-and-real-user-monitoring","title":"Synthetic Monitoring and Real User Monitoring","text":"<p>Synthetic monitoring does not replace the need for RUM. Probes are predictable code that verifies specific scenarios, and they do not 100% completely and truly represent how a user session is handled. On the other hand, prefer not to use RUMs to test for site reliability because:</p> <ul> <li>As the name implies, RUM requires user traffic. The site may be down, but since no user visited the monitored path, no alerts were triggered yet.</li> <li>Inconsistent Traffic and usage patterns make it hard to gauge for benchmarks.</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/#risks","title":"Risks","text":"<p>Testing in production, in general, has a risk factor attached to it, which does not exist tests executed during CI/CD stages. Specifically, in synthetic monitoring tests, the following may affect the production environment:</p> <ul> <li>Corrupted or invalid data - Tests inject test data which may be in some ways corrupt. Consider using a testing schema.</li> <li>Protected data leakage - Tests run in a production environment and emit logs or trace that may contain protected data.</li> <li>Overloaded systems - Synthetic tests may cause errors or overload the system.</li> <li>Unintended side effects or impacts on other production systems.</li> <li>Skewed analytics (traffic funnels, A/B test results, etc.)</li> <li>Auth/AuthZ - Tests are required to run in production where access to tokens and secrets may be restricted or more challenging to retrieve.</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/#synthetic-monitoring-tests-frameworks-and-tools","title":"Synthetic Monitoring Tests Frameworks and Tools","text":"<p>Most key monitoring/APM players have an enterprise product that supports synthetic monitoring built into their systems (see list below). Such offerings make some of the risks raised above irrelevant as the integration and runtime aspects of the solution are OOTB. However, such solutions are typically pricey.</p> <p>Some organizations prefer running probes on existing infrastructure using known tools such as Postman, Wrk, JMeter, Selenium or even custom code to generate the synthetic data. Such solutions must account for isolating and decoupling the probe's production environment from the core product's as well as provide monitoring, geo-distribution, and maintaining test health.</p> <ul> <li>Application Insights availability - Simple availability tests that allow some customization using Multi-step web test</li> <li>DataDog Synthetics</li> <li>Dynatrace Synthetic Monitoring</li> <li>New Relic Synthetics</li> <li>Checkly</li> </ul>"},{"location":"automated-testing/synthetic-monitoring-tests/#conclusion","title":"Conclusion","text":"<p>The value of production tests, in general, and specifically Synthetic monitoring, is only there for particular engagement types, and there is associated risk and cost to them. However, when applicable, they provide continuous assurance that there are no system failures from a user's perspective. When developing a PaaS/SaaS solution, Synthetic monitoring is key to the success of service reliability teams, and they are becoming an integral part of the quality assurance stack of highly available products.</p>"},{"location":"automated-testing/synthetic-monitoring-tests/#resources","title":"Resources","text":"<ul> <li>Google SRE book - Testing Reliability</li> <li>Microsoft DevOps Architectures - Shift Right to Test in Production</li> <li>Martin Fowler - Synthetic Monitoring</li> </ul>"},{"location":"automated-testing/tech-specific-samples/building-containers-with-azure-devops/","title":"Building Containers with Azure DevOps Using the DevTest Pattern","text":"<p>In this documents, we highlight learnings from applying the DevTest pattern to container development in Azure DevOps through pipelines.</p> <p>The pattern enabled as to build container for development, testing and releasing the container for further reuse (production ready).</p> <p>We will dive into tools needed to build, test and push a container, our environment and go through each step separately.</p> <p>Follow this link to dive deeper or revisit the DevTest pattern.</p>"},{"location":"automated-testing/tech-specific-samples/building-containers-with-azure-devops/#build-the-container","title":"Build the Container","text":"<p>The first step in container development, after creating the necessary Dockerfiles and source code, is building the container. Even the Dockerfile itself can include some basic testing. Code tests are performed when pushing the code to the repository origin, where it is then used to build the container.</p> <p>The first step in our pipeline is to run the <code>docker build</code> command with a temporary tag and the required build arguments:</p> <pre><code>- task: Bash@3\n  name: BuildImage\n  displayName: 'Build the image via docker'\n  inputs:\n    workingDirectory: \"$(System.DefaultWorkingDirectory)${{ parameters.buildDirectory }}\"\n    targetType: 'inline'\n    script: |\n      docker build -t ${{ parameters.imageName }} --build-arg YOUR_BUILD_ARG -f ${{ parameters.dockerfileName }} .\n  env:\n    PredefinedPassword: $(Password)\n    NewVariable: \"newVariableValue\"\n</code></pre> <p>This task includes the parameters <code>buildDirectory</code>, <code>imageName</code> and <code>dockerfileName</code>, which have to be set beforehand. This task can for example be used in a template for multiple containers to improve code reuse.</p> <p>It is also possible to pass environment variables directly to the Dockerfile through the <code>env</code> section of the task.</p> <p>If this task succeeds, the Dockerfile was build without errors and we can continue to testing the container itself.</p>"},{"location":"automated-testing/tech-specific-samples/building-containers-with-azure-devops/#test-the-container","title":"Test the Container","text":"<p>To test the container, we are using the tox environment. For more details on tox please visit the tox section of this repository or visit the official tox documentation page.</p> <p>Before we test the container, we are checking for exposed credentials in the docker image history. If known passwords, used to access our internal resources, are exposed here, the build step will fail:</p> <pre><code>- task: Bash@3\n  name: CheckIfPasswordInDockerHistory\n  displayName: 'Check for password in docker history'\n  inputs:\n    workingDirectory: \"$(System.DefaultWorkingDirectory)\"\n    targetType: 'inline'\n    failOnStdErr: true\n    script: |\n      if docker image history --no-trunc ${{ parameters.imageName }} | grep -qF $PredefinedPassword; then\n        exit 1;\n      fi\n      exit 0;\n  env:\n    PredefinedPassword: $(Password)\n</code></pre> <p>After the credential test, the container is tested through the pytest extension testinfra. Testinfra is a Python-based tool which can be used to start a container, gather prerequisites, test the container and shut it down again, without any effort besides writing the tests. These tests can for example include:</p> <ul> <li>if files exist</li> <li>if environment variables are set correctly</li> <li>if certain processes are running</li> <li>if the correct host environment is used</li> </ul> <p>For a complete collection of capabilities and requirements, please visit the testinfra project on GitHub.</p> <p>A few methods of a Linux-based container test can look like this:</p> <pre><code>def test_dependencies(host):\n    '''\n    Check all files needed to run the container properly.\n    '''\n    env_file = \"/app/environment.sh.env\"\n    assert host.file(env_file).exists\n\n    activate_sh_path = \"/app/start.sh\"\n    assert host.file(activate_sh_path).exists\n\n\ndef test_container_running(host):\n    process = host.process.get(comm=\"start.sh\")\n    assert process.user == \"root\"\n\n\ndef test_host_system(host):\n    system_type = 'linux'\n    distribution = 'ubuntu'\n    release = '18.04'\n\n    assert system_type == host.system_info.type\n    assert distribution == host.system_info.distribution\n    assert release == host.system_info.release\n\n\ndef extract_env_var(file_content):\n    import re\n\n    regex = r\"ENV_VAR=\\\"(?P&lt;s&gt;[^\\\"]*)\\\"\"\n\n    match = re.match(regex, file_content)\n    return match.group('s')\n\n\ndef test_ports_exposed(host):\n    port1 = \"9010\"\n    st1 = f\"grep -q {port1} /app/Dockerfile &amp;&amp; echo 'true' || echo 'false'\"\n    cmd1 = host.run(st1)\n    assert cmd1.stdout\n\n\ndef test_listening_simserver_sockets(host):\n    assert host.socket(\"tcp://0.0.0.0:32512\").is_listening\n    assert host.socket(\"tcp://0.0.0.0:32513\").is_listening\n</code></pre> <p>To start the test, a pytest command is executed through tox.</p> <p>A task containing the tox command can look like this:</p> <pre><code>- task: Bash@3\n  name: RunTestCommands\n  displayName: \"Test - Run test commands\"\n  inputs:\n    workingDirectory: \"$(System.DefaultWorkingDirectory)\"\n    targetType: 'inline'\n    script: |\n      tox -e testinfra-${{ parameters.makeTarget }} -- ${{ parameters.imageName }}\n    failOnStderr: true\n</code></pre> <p>Which could trigger the following pytest code, which is contained in the tox.ini file:</p> <pre><code>pytest -vv tests/{env:CONTEXT} --container-image={posargs:{env:IMAGE_TAG}} --volume={env:VOLUME}\n</code></pre> <p>As a last task of this pipeline to build and test the container, we set a variable called <code>testsPassed</code> which is only <code>true</code>, if the previous tasks succeeded:</p> <pre><code>- task: Bash@3\n  name: UpdateTestResultVariable\n  condition: succeeded()\n  inputs:\n    targetType: 'inline'\n    script: |\n      echo '##vso[task.setvariable variable=testsPassed]true'\n</code></pre>"},{"location":"automated-testing/tech-specific-samples/building-containers-with-azure-devops/#push-the-container","title":"Push the Container","text":"<p>After building and testing, if our container runs as expected, we want to release it to our Azure Container Registry (ACR) to be used by our larger application. Before that, we want to automate the push behavior and define a meaningful tag.</p> <p>As a developer it is often helpful to have containers pushed to ACR, even if they are failing. This can be done by checking for the <code>testsPassed</code> variable we introduced at the end of our testing.</p> <p>If the test failed, we want to add a failed suffix at the end of the tag:</p> <pre><code>- task: Bash@3\n  name: SetFailedSuffixTag\n  displayName: \"Set failed suffix, if the tests failed.\"\n  condition: and(eq(variables['testsPassed'], false), ne(variables['Build.SourceBranchName'], 'main'))\n  # if this is not a release and failed -&gt; retag the image to add failedSuffix\n  inputs:\n    targetType: inline\n    script: |\n      docker tag ${{ parameters.containerRegistry }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }} ${{ parameters.containerRegistry }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }}$(failedSuffix)\n</code></pre> <p>The condition checks, if the value of <code>testsPassed</code> is <code>false</code> and also if we are not on the main branch, as we don't want to push failed containers from main. This helps us to keep our production environment clean.</p> <p>The value for imageRepository was defined in another template, along with the <code>failedSuffix</code> and <code>testsPassed</code>:</p> <pre><code>parameters:\n  - name: component\n\nvariables:\n  testsPassed: false\n  failedSuffix: \"-failed\"\n  # the imageRepo will changed based on dev or release\n  ${{ if eq( variables['Build.SourceBranchName'], 'main' ) }}:\n    imageRepository: 'stable/${{ parameters.component }}'\n  ${{ if ne( variables['Build.SourceBranchName'], 'main' ) }}:\n    imageRepository: 'dev/${{ parameters.component }}'\n</code></pre> <p>The imageTag is open to discussion, as it depends highly on how your team wants to use the container. We went for <code>Build.SourceVersion</code> which is the commit ID of the branch the container was developed in. This allows you to easily track the origin of the container and aids debugging.</p> <p>A link to Azure DevOps predefined variables can be found in the Azure Docs on Azure DevOps</p> <p>After a tag was added to the container, the image must be pushed. This can be done with the following task:</p> <pre><code>- task: Docker@1\n  name: pushFailedDockerImage\n  displayName: 'Pushes failed image via Docker'\n  condition: and(eq(variables['testsPassed'], false), ne(variables['Build.SourceBranchName'], 'main'))\n  # if this is not a release and failed -&gt; push the image with the failed tag\n  inputs:\n    containerregistrytype: 'Azure Container Registry'\n    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}\n    azureContainerRegistry: ${{ parameters.containerRegistry }}\n    command: 'Push an image'\n    imageName: '${{ parameters.imageRepository }}:${{ parameters.imageTag }}$(failedSuffix)'\n</code></pre> <p>Similarly, these are the steps to publish the container to the ACR, if the tests succeeded:</p> <pre><code>- task: Bash@3\n  name: SetLatestSuffixTag\n  displayName: \"Set latest suffix, if the tests succeed.\"\n  condition:  eq(variables['testsPassed'], true)\n  inputs:\n    targetType: inline\n    script: |\n      docker tag ${{ parameters.containerRegistry }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }} ${{ parameters.containerRegistry }}/${{ parameters.imageRepository }}:latest\n- task: Docker@1\n  name: pushSuccessfulDockerImageSha\n  displayName: 'Pushes successful image via Docker'\n  condition: eq(variables['testsPassed'], true)\n  inputs:\n    containerregistrytype: 'Azure Container Registry'\n    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}\n    azureContainerRegistry: ${{ parameters.containerRegistry }}\n    command: 'Push an image'\n    imageName: '${{ parameters.imageRepository }}:${{ parameters.imageTag }}'\n- task: Docker@1\n  name: pushSuccessfulDockerImageLatest\n  displayName: 'Pushes successful image as latest'\n  condition: eq(variables['testsPassed'], true)\n  inputs:\n    containerregistrytype: 'Azure Container Registry'\n    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}\n    azureContainerRegistry: ${{ parameters.containerRegistry }}\n    command: 'Push an image'\n    imageName: '${{ parameters.imageRepository }}:latest'\n</code></pre> <p>If you don't want to include the <code>latest</code> tag, you can also remove the steps involving latest (SetLatestSuffixTag &amp; pushSuccessfulDockerImageLatest).</p>"},{"location":"automated-testing/tech-specific-samples/building-containers-with-azure-devops/#resources","title":"Resources","text":"<ul> <li>DevTest pattern</li> <li>Azure Docs on Azure DevOps</li> <li>official tox documentation page</li> <li>Testinfra</li> <li>Testinfra project on GitHub</li> <li>pytest</li> </ul>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/","title":"Using Azurite to Run Blob Storage Tests in a Pipeline","text":"<p>This document determines the approach for writing automated tests with a short feedback loop (i.e. unit tests) against security considerations (private endpoints) for the Azure Blob Storage functionality.</p> <p>Once private endpoints are enabled for the Azure Storage accounts, the current tests will fail when executed locally or as part of a pipeline because this connection will be blocked.</p>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#utilize-an-azure-storage-emulator-azurite","title":"Utilize an Azure Storage Emulator - Azurite","text":"<p>To emulate a local Azure Blob Storage, we can use Azure Storage Emulator. The Storage Emulator currently runs only on Windows. If you need a Storage Emulator for Linux, one option is the community maintained, open-source Storage Emulator Azurite.</p> <p>The Azure Storage Emulator is no longer being actively developed. Azurite is the Storage Emulator platform going forward. Azurite supersedes the Azure Storage Emulator. Azurite will continue to be updated to support the latest versions of Azure Storage APIs. For more information, see Use the Azurite emulator for local Azure Storage development.</p> <p>Some differences in functionality exist between the Storage Emulator and Azure storage services. For more information about these differences, see the Differences between the Storage Emulator and Azure Storage.</p> <p>There are several ways to install and run Azurite on your local system as listed here. In this document we will cover <code>Install and run Azurite using NPM</code> and <code>Install and run the Azurite Docker image</code>.</p>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#1-install-and-run-azurite","title":"1. Install and Run Azurite","text":""},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#a-using-npm","title":"a. Using NPM","text":"<p>In order to run Azurite V3 you need Node.js &gt;= 8.0 installed on your system. Azurite works cross-platform on Windows, Linux, and OS X.</p> <p>After the Node.js installation, you can install Azurite simply with npm which is the Node.js package management tool included with every Node.js installation.</p> <pre><code># Install Azurite\nnpm install -g azurite\n\n# Create azurite directory\nmkdir c:/azurite\n\n# Launch Azurite for Windows\nazurite --silent --location c:\\azurite --debug c:\\azurite\\debug.log\n</code></pre> <p>If you want to avoid any disk persistence and destroy the test data when the Azurite process terminates, you can pass the <code>--inMemoryPersistence</code> option, as of Azurite 3.28.0.</p> <p>The output will be:</p> <pre><code>Azurite Blob service is starting at http://127.0.0.1:10000\nAzurite Blob service is successfully listening at http://127.0.0.1:10000\nAzurite Queue service is starting at http://127.0.0.1:10001\nAzurite Queue service is successfully listening at http://127.0.0.1:10001\n</code></pre>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#b-using-a-docker-image","title":"b. Using a Docker Image","text":"<p>Another way to run Azurite is using docker, using default <code>HTTP</code> endpoint</p> <pre><code>docker run -p 10000:10000 mcr.microsoft.com/azure-storage/azurite azurite-blob --blobHost 0.0.0.0\n</code></pre> <p>Docker Compose is another option and can run the same docker image using the <code>docker-compose.yml</code> file below.</p> <pre><code>version: '3.4'\nservices:\n  azurite:\n    image: mcr.microsoft.com/azure-storage/azurite\n    hostname: azurite\n    volumes:\n      - ./cert/azurite:/data\n    command: \"azurite-blob --blobHost 0.0.0.0 -l /data --cert /data/127.0.0.1.pem --key /data/127.0.0.1-key.pem --oauth basic\"\n    ports:\n      - \"10000:10000\"\n      - \"10001:10001\"\n</code></pre>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#2-run-tests-on-your-local-machine","title":"2. Run Tests on Your Local Machine","text":"<p>Python 3.8.7 is used for this, but it should be fine on other 3.x versions as well.</p> <ol> <li> <p>Install and run Azurite for local tests:</p> <p>Option 1: using npm:</p> <pre><code># Install Azurite\nnpm install -g azurite\n# Create azurite directory\nmkdir c:/azurite\n# Launch Azurite for Windows\nazurite --silent --location c:\\azurite --debug c:\\azurite\\debug.log\n</code></pre> <p>Option 2: using docker</p> <pre><code>docker run -p 10000:10000 mcr.microsoft.com/azure-storage/azurite azurite-blob --blobHost 0.0.0.0\n</code></pre> </li> <li> <p>In Azure Storage Explorer, select <code>Attach to a local emulator</code></p> <p></p> </li> <li> <p>Provide a Display name and port number, then your connection will be ready, and you can use Storage Explorer to manage your local blob storage.</p> <p></p> <p>To test and see how these endpoints are running you can attach your local blob storage to the Azure Storage Explorer.</p> </li> <li> <p>Create a virtual python environment    <code>python -m venv .venv</code></p> </li> <li> <p>Container name and initialize env variables: Use conftest.py for test integration.</p> <pre><code>from azure.storage.blob import BlobServiceClient\nimport os\n\ndef pytest_generate_tests(metafunc):\n   os.environ['STORAGE_CONNECTION_STRING'] = 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;'\n   os.environ['STORAGE_CONTAINER'] = 'test-container'\n\n   # Crete container for Azurite for the first run\n   blob_service_client = BlobServiceClient.from_connection_string(os.environ.get(\"STORAGE_CONNECTION_STRING\"))\n   try:\n      blob_service_client.create_container(os.environ.get(\"STORAGE_CONTAINER\"))\n   except Exception as e:\n      print(e)\n</code></pre> <p>*Note: value for <code>STORAGE_CONNECTION_STRING</code> is default value for Azurite, it's not a private key</p> </li> <li> <p>Install the dependencies</p> <p><code>pip install -r requirements_tests.txt</code></p> </li> <li> <p>Run tests:</p> <pre><code>python -m pytest ./tests\n</code></pre> </li> </ol> <p>After running tests, you can see the files in your local blob storage</p> <p></p>"},{"location":"automated-testing/tech-specific-samples/blobstorage-unit-tests/#3-run-tests-on-azure-pipelines","title":"3. Run Tests on Azure Pipelines","text":"<p>After running tests locally we need to make sure these tests pass on Azure Pipelines too. We have 2 options here, we can use docker image as hosted agent on Azure or install an npm package in the Pipeline steps.</p> <pre><code>trigger:\n- master\n\nsteps:\n- task: UsePythonVersion@0\n  displayName: 'Use Python 3.7'\n  inputs:\n    versionSpec: 3.7\n\n- bash: |\n    pip install -r requirements_tests.txt\n  displayName: 'Setup requirements for tests'\n\n- bash: |\n    sudo npm install -g azurite\n    sudo mkdir azurite\n    sudo azurite --silent --location azurite --debug azurite\\debug.log &amp;\n  displayName: 'Install and Run Azurite'\n\n- bash: |\n    python -m pytest --junit-xml=unit_tests_report.xml --cov=tests --cov-report=html --cov-report=xml ./tests\n  displayName: 'Run Tests'\n\n- task: PublishCodeCoverageResults@1\n  inputs:\n    codeCoverageTool: Cobertura\n    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'\n    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'\n\n- task: PublishTestResults@2\n  inputs:\n    testResultsFormat: 'JUnit'\n    testResultsFiles: '**/*_tests_report.xml'\n    failTaskOnFailedTests: true\n</code></pre> <p>Once we set up our pipeline in Azure Pipelines, result will be like below</p> <p></p>"},{"location":"automated-testing/templates/case-study-template/","title":"Case study template","text":"<p>[Customer Project] Case Study</p>"},{"location":"automated-testing/templates/case-study-template/#background","title":"Background","text":"<p>Describe the customer and business requirements with the explicit problem statement.</p>"},{"location":"automated-testing/templates/case-study-template/#system-under-test-sut","title":"System Under Test (SUT)","text":"<p>Include the system's conceptual architecture and highlight the architecture components that were included in the E2E testing.</p>"},{"location":"automated-testing/templates/case-study-template/#problems-and-limitations","title":"Problems and Limitations","text":"<p>Describe about the problems of the overall SUT solution that prevented from testing specific (or any) part of the solution. Describe limitation of the testing tools and framework(s) used in this implementation</p>"},{"location":"automated-testing/templates/case-study-template/#e2e-testing-framework-and-tools","title":"E2E Testing Framework and Tools","text":"<p>Describe what testing framework and/or tools were used to implement E2E testing in the SUT.</p>"},{"location":"automated-testing/templates/case-study-template/#test-cases","title":"Test Cases","text":"<p>Describe the E2E test cases were created to E2E test the SUT</p>"},{"location":"automated-testing/templates/case-study-template/#test-metrics","title":"Test Metrics","text":"<p>Describe any architecture solution were used to monitor, observe and track the various service states that were used as the E2E testing metrics. Also, include the list of test cases were build to measure the progress of E2E testing.</p>"},{"location":"automated-testing/templates/case-study-template/#e2e-testing-architecture","title":"E2E Testing Architecture","text":"<p>Describe any testing architecture were built to run E2E testing.</p>"},{"location":"automated-testing/templates/case-study-template/#e2e-testing-implementation-code-samples","title":"E2E Testing Implementation (Code Samples)","text":"<p>Include sample test cases and their implementation in the programming language of choice. Include any common reusable code implementation blocks that could be leveraged in the future project's E2E testing implementation.</p>"},{"location":"automated-testing/templates/case-study-template/#e2e-testing-reporting-and-results","title":"E2E Testing Reporting and Results","text":"<p>Include sample of E2E testing reports and results obtained from the E2E testing runs in this project.</p>"},{"location":"automated-testing/templates/test-type-template/","title":"Test Type Template","text":"<p>[Test Technique Name Here]</p> <p>Put a 2-3 sentence overview about the test technique here.</p>"},{"location":"automated-testing/templates/test-type-template/#when-to-use","title":"When To Use","text":""},{"location":"automated-testing/templates/test-type-template/#problem-addressed","title":"Problem Addressed","text":"<p>Describing the problem that this test type addresses, this should focus on the motivation behind the test type/technique to help the reader correlate this technique to their problem.</p>"},{"location":"automated-testing/templates/test-type-template/#when-to-avoid","title":"When to Avoid","text":"<p>Describe when NOT to use, if applicable.</p>"},{"location":"automated-testing/templates/test-type-template/#roi-tipping-point","title":"ROI Tipping Point","text":"<p>How much is enough?  For example, some opine that unit test ROI drops significantly at 80% block coverage and when the codebase is well-exercised by real traffic in production.</p>"},{"location":"automated-testing/templates/test-type-template/#applicable-to","title":"Applicable to","text":"<ul> <li> Local dev 'desktop'</li> <li> Build pipelines</li> <li> Non-production deployments</li> <li> Production deployments</li> </ul>"},{"location":"automated-testing/templates/test-type-template/#note-if-there-is-great-clear-succinct-documentation-for-the-technique-on-the-web-supply-a-pointer-and-skip-the-rest-of-this-template-no-need-to-re-type-content","title":"NOTE: If there is great (clear, succinct) documentation for the technique on the web, supply a pointer and skip the rest of this template.  No need to re-type content","text":""},{"location":"automated-testing/templates/test-type-template/#how-to-use","title":"How to Use","text":""},{"location":"automated-testing/templates/test-type-template/#architecture","title":"Architecture","text":"<p>Describe the components of the technique and how they interact with each other and the subject of the test technique.  Add a simple diagram of how the technique's parts are organized, if helpful to illustrate.</p>"},{"location":"automated-testing/templates/test-type-template/#pre-requisites","title":"Pre-requisites","text":"<p>Anything required in advance?</p>"},{"location":"automated-testing/templates/test-type-template/#high-level-step-by-step","title":"High-level Step-by-Step","text":"<p>1. 1. 1.</p>"},{"location":"automated-testing/templates/test-type-template/#best-practices-and-advice","title":"Best Practices and Advice","text":"<p>Describe what good testing looks like for this technique, best practices, pitfalls.</p>"},{"location":"automated-testing/templates/test-type-template/#anti-patterns","title":"Anti patterns","text":"<p>e.g. unit tests should never require off-box or even out-of-process dependencies.  Are there similar things to avoid when applying this technique?</p>"},{"location":"automated-testing/templates/test-type-template/#frameworks-tools-templates","title":"Frameworks, Tools, Templates","text":"<p>Describe known good (i.e. actually used and known to provide good results) frameworks, tools, templates, their pros and cons, with links.</p>"},{"location":"automated-testing/templates/test-type-template/#resources","title":"Resources","text":"<p>Provide links to further readings about this technique to dive deeper.</p>"},{"location":"automated-testing/ui-testing/","title":"User Interface Testing","text":"<p>This section is primarily geared towards web-based UIs, but the guidance is similar for mobile and OS based applications.  </p>"},{"location":"automated-testing/ui-testing/#applicability","title":"Applicability","text":"<p>UI Testing is not always going to be applicable, for example applications without a UI or parts of an application that require no human interaction.  In those cases unit, functional and integration/e2e testing would be the primary means.  UI Testing is going to be mainly applicable when dealing with a public facing UI that is used in a diverse environment or in a mission critical UI that requires higher fidelity.  With something like an admin UI that is used by just a handful of people, UI Testing is still valuable but not as high priority.</p>"},{"location":"automated-testing/ui-testing/#goals","title":"Goals","text":"<p>UI testing provides the ability to ensure that users have a consistent visual user experience across a variety of means of access and that the user interaction is consistent with the function requirements.</p> <ul> <li>Ensure the UI appearance and interaction satisfy the functional and non-functional requirements</li> <li>Detect changes in the UI both across devices and delivery platforms and between code changes</li> <li>Provide confidence to designers and developers the user experience is consistent</li> <li>Support fast code evolution and refactoring while reducing the risk of regressions</li> </ul>"},{"location":"automated-testing/ui-testing/#evidence-and-measures","title":"Evidence and Measures","text":"<p>Integrating UI Tests in to your CI/CD is necessary but more challenging than unit tests.  The increased challenge is that UI tests either need to run in headless mode with something like Puppeteer or there needs to be more extensive orchestration with Azure DevOps or GitHub that would handle the full testing integration for you like BrowserStack</p> <p>Integrations like <code>BrowserStack</code> are nice since they provide Azure DevOps reports as part of the test run.</p> <p>That said, Azure DevOps supports a variety of test adapters, so you can use any UI Testing framework that supports outputting the test results to one of the output formats listed at Publish Test Results task.</p> <p>If you're using an Azure DevOps pipeline to run UI tests, consider using a self hosted agent in order to manage framework versions and avoid unexpected updates.</p>"},{"location":"automated-testing/ui-testing/#general-guidance","title":"General Guidance","text":"<p>The scope of UI testing should be strategic. UI tests can take a significant amount of time to both implement and run, and it's challenging to test every type of user interaction in a production application due to the large number of possible interactions.</p> <p>Designing the UI tests around the functional tests makes sense.  For example, given an input form, a UI test would ensure that the visual representation is consistent across devices, is accessible and easy to interact with, and is consistent across code changes.</p> <p>UI Tests will catch 'runtime' bugs that unit and functional tests won't.  For example if the submit button for an input form is rendered but not clickable due to a positioning bug in the UI, then this could be considered a runtime bug that would not have been caught by unit or functional tests.</p> <p>UI Tests can run on mock data or snapshots of production data, like in QA or staging.</p>"},{"location":"automated-testing/ui-testing/#writing-tests","title":"Writing Tests","text":"<p>Good UI tests follow a few general principles:</p> <ul> <li>Choose a UI testing framework that enables quick feedback and is easy to use</li> <li>Design the UI to be easily testable.  For example, add CSS selectors or set the id on elements in a web page to allow easier selecting.</li> <li>Test on all primary devices that the user uses, don't just test on a single device or OS.</li> <li>When a test mutates data ensure that data is created on demand and cleaned up after.  The consequence of not doing this would be inconsistent testing.</li> </ul>"},{"location":"automated-testing/ui-testing/#common-issues","title":"Common Issues","text":"<p>UI Testing can get very challenging at the lower level, especially with a testing framework like Selenium.  If you choose to go this route, then you'll likely encounter timeouts, missing elements, and you'll have significant friction with the testing framework itself.  Due to many issues with UI testing there have been a number of free and paid solutions that help alleviate certain issues with frameworks like Selenium.  This is why you'll find Cypress in the recommended frameworks as it solves many of the known issues with Selenium.</p> <p>This is an important point though.  Depending on the UI testing framework you choose will result in either a smoother test creation experience, or a very frustrating and time-consuming one.  If you were to choose just Selenium the development costs and time costs would likely be very high.  It's better to use either a framework built on top of Selenium or one that attempts to solve many of the problems with something like Selenium.</p> <p>Note there that there are further considerations as when running in headless mode the UI can render differently than what you may see on your development machine, particularly with web applications.  Furthermore, note that when rendering in different page dimensions elements may disappear on the page due to CSS rules, therefore not be selectable by certain frameworks with default options out of the box.  All of these issues can be resolved and worked around, but the rendering demonstrates another particular challenge of UI testing.</p>"},{"location":"automated-testing/ui-testing/#specific-guidance","title":"Specific Guidance","text":"<p>Recommended testing frameworks:</p> <ul> <li>Web<ul> <li>BrowserStack</li> <li>Cypress</li> <li>Jest</li> <li>Selenium</li> <li>Appium</li> </ul> </li> </ul> <ul> <li>OS/Mobile Applications<ul> <li>Coded UI tests (CUITs)</li> <li>Xamarin.UITest</li> <li>BrowserStack</li> <li>Appium</li> </ul> </li> </ul> <p>Note that the framework listed above that is paid is BrowserStack, it's listed as it's an industry standard, the rest are open source and free.</p>"},{"location":"automated-testing/ui-testing/teams-tests/","title":"Automated UI Tests for a Teams Application","text":""},{"location":"automated-testing/ui-testing/teams-tests/#overview","title":"Overview","text":"<p>This is an overview on how you can implement UI tests for a custom Teams application. The insights provided can also be applied to automated end-to-end testing.</p>"},{"location":"automated-testing/ui-testing/teams-tests/#general-observations","title":"General Observations","text":"<ul> <li>Testing in a web browser is easier than on a native app.</li> <li>Testing a Teams app on a mobile device in an automated way is more challenging due to the fact that you are testing an app within an app:<ul> <li>There is no Android Application Package (APK) / iOS App Store Package (IPA) publicly available for Microsoft Teams app itself.</li> <li>Mobile testing frameworks are designed with the assumption that you own the APK/IPA of the app under test.</li> <li>Workarounds need to be found to first automate the installation of Teams.</li> </ul> </li> <li>Should you choose working with emulators, testing in a local Windows box is more stable than in a CI/CD. The latter involves a CI/CD agent and an emulator in a VM.</li> <li>When deciding whether to implement such tests, consider the project requirements as well as the advantages and disadvantages. Manual UI tests are often an acceptable solution due to their low effort requirements.</li> </ul> <p>The following are learnings from various engagements:</p>"},{"location":"automated-testing/ui-testing/teams-tests/#web-based-ui-tests","title":"Web Based UI Tests","text":"<p>To implement web-based UI tests for your Teams application, follow the same approach as you would for testing any other web application with a UI. UI testing provides valuable guidance in this regard. Your starting point for the test would be to automatically launch a browser (using Selenium or similar frameworks) and navigate to https://teams.microsoft.com.</p> <p>If you want to test a Teams app that hasn\u2019t been published in the Teams store yet or if you\u2019d like to test the DEV/QA version of your app, you can use the Teams Toolkit and package your app based on the manifest.json.</p> <pre><code>npx teamsfx package --env dev --manifest-path ...\n</code></pre> <p>Once the app is installed, implement selectors to access your custom app and to perform various actions within the app.</p>"},{"location":"automated-testing/ui-testing/teams-tests/#pipeline","title":"Pipeline","text":"<p>If you are using Selenium and Edge as the browser, consider leveraging the selenium/standalone-edge Docker image which contains a standalone Selenium server with the Microsoft Edge browser installed. By default, it will run in headless mode, but by setting <code>START_XVFB</code> variable to <code>True</code>, you can control whether to start a virtual framebuffer server (Xvfb) that allows GUI applications to run without a display. Below is a code snippet which illustrates the usage of the image in a Gitlab pipeline:</p> <pre><code>...\nrun-tests-dev:\n  allow_failure: false\n  image: ...\n  environment:\n    name: dev\n  stage: tests\n  services:\n    - name: selenium/standalone-edge:latest\n      alias: selenium\n      variables:\n        START_XVFB: \"true\"\n        description: \"Start Xvfb server\"\n...\n</code></pre> <p>When running a test, you need to use the Selenium server URL for remote execution. With the definition from above, the URL is: <code>http://selenium:4444/wd/hub</code>.</p> <p>The code snippet below illustrates how you can initialize the Selenium driver to point to the remote Selenium server using JavaScript:</p> <pre><code>var { Builder } = require(\"selenium-webdriver\");\nconst edge = require(\"selenium-webdriver/edge\");\n\nvar buildEdgeDriver = function () {\n  let builder = new Builder().forBrowser(\"MicrosoftEdge\");\n  builder = builder.usingServer(\"http://selenium:4444/wd/hub\");\n  builder.setEdgeOptions(new edge.Options().addArguments(\"--inprivate\"));\n  return builder.build();\n};\n</code></pre>"},{"location":"automated-testing/ui-testing/teams-tests/#mobile-based-ui-tests","title":"Mobile Based UI Tests","text":"<p>Testing your custom Teams application on mobile devices is a bit more difficult than using the web-based approach as it requires usage of actual or simulated devices. Running such tests in a CI/CD pipeline can be more difficult and resource-intensive.</p> <p>One approach is to use real devices or cloud-based emulators from vendors such as BrowserStack which requires a license. Alternatively, you can use virtual devices hosted in Azure Virtual Machines.</p>"},{"location":"automated-testing/ui-testing/teams-tests/#option-1-using-android-virtual-devices-avd","title":"Option 1: Using Android Virtual Devices (AVD)","text":"<p>This approach enables the creation of Android UI tests using virtual devices. It comes with the advantage of not requiring paid licenses to certain vendors. However, due to the nature of emulators, compared to real devices, it may prove to be less stable. Always choose the solution that best fits your project requirements and resources.</p> <p>Overall setup:</p> <p>AVD - Android Virtual Devices - which are virtual representation of physical Android devices.</p> <p>Appium is an open-source project designed to facilitate UI automation of many app platforms, including mobile.</p> <ul> <li>Appium is based on the W3C WebDriver specification. <p>Note: If you look at these commands in the WebDriver specification, you will notice that they are not defined in terms of any particular programming language. They are not Java commands, or JavaScript commands, or Python commands. Instead, they form part of an HTTP API which can be accessed from within any programming language.</p> </li> </ul> <ul> <li> <p>Appium implements a client-server architecture:</p> <ul> <li>The server (consisting of Appium itself along with any drivers or plugins you are using for automation) is connected to the devices under test, and is actually responsible for making automation happen on those devices. UiAutomator driver is compatible with Android platform.</li> <li> <p>The client is responsible for sending commands to the server over the network, and receiving responses from the server as a result. You can choose the language of your choice to write the commands. For example, for Javascript WebDriverIO can be used as client.</p> <p>Here you can read more about Appium ecosystem</p> </li> </ul> <ul> <li>The advantage of this architecture is that it opens the possibility of running the server in a VM, and the client in a pipeline, enabling the tests to be ran automatically on scheduled basis as part of CI/CD pipelines.</li> </ul> </li> </ul>"},{"location":"automated-testing/ui-testing/teams-tests/#how-to-run-mobile-tests-locally-on-a-windows-machine-using-avd","title":"How to Run Mobile Tests Locally on a Windows Machine Using AVD?","text":"<p>This approach involves:</p> <ul> <li>An emulator (AVD - Android Virtual Devices), which will represent the physical device.</li> <li>Appium server, which will redirect the commands from the test to your virtual device.</li> </ul>"},{"location":"automated-testing/ui-testing/teams-tests/#creating-an-android-virtual-device","title":"Creating an Android Virtual Device","text":"<ol> <li> <p>Install Android Studio from official link.</p> <p>Note: At the time of writing the documentation, the latest version available was Android Studio Giraffe, 2022.3.1 Patch 2 for Window.</p> <p>Set ANDROID_HOME environment variable to point to the installation path of Android SDK. i.e. <code>C:Users\\&lt;user-name&gt;\\AppData\\Local\\Android\\Sdk</code></p> </li> <li> <p>Install Java Development Kit (JDK) from official link. For the most recent devices JDK 9 is required, otherwise JDK 8 is required. Make sure you get the JDK and not the JRE.</p> <p>Set JAVA_HOME environment variable to the installation path, i.e.<code>C:\\Program Files\\Java\\jdk-11</code></p> </li> <li> <p>Create an AVD (Android Virtual Device): - Open Android Studio. From the Android Studio welcome screen, select More Action -&gt; Virtual Device Manager, as instructed here - Click Create Device. - Choose a device definition with Play Store enabled. This is important, otherwise Teams cannot be installed on the device. - Choose a System image from the Recommended tab which includes access to Google Play services. You may need to install it before selecting it. - Start the emulator by clicking on the Run button from the Device Manage screen. - Manually install Microsoft Teams from Google Playstore on the device.</p> </li> </ol>"},{"location":"automated-testing/ui-testing/teams-tests/#setting-up-appium","title":"Setting up Appium","text":"<p>Install <code>appium</code>:</p> <ol> <li>Download NodeJs, if it is not already installed on your machine: Download | Node.js (nodejs.org)</li> <li>Install Appium globally: Install Appium - Appium Documentation</li> <li>Install the UiAutomator2 driver: Install the UiAutomator2 Driver - Appium Documentation. Go through the <code>Set up Android automation requirements</code> in the documentation, to make sure you have set up everything correctly. Read more about Appium Drivers here. - Start appium server by running <code>appium</code> command in a command prompt.</li> </ol>"},{"location":"automated-testing/ui-testing/teams-tests/#useful-commands","title":"Useful commands","text":"<p>List emulators that you have previously created, without opening Android Studio:</p> <pre><code>emulator -list-avds\n</code></pre>"},{"location":"automated-testing/ui-testing/teams-tests/#how-to-run-teams-mobile-tests-in-a-pipeline-using-an-azure-vm","title":"How to run Teams mobile tests in a pipeline using an Azure VM?","text":"<p>This approach leverages the fact that Appium implements a client-server architecture. In this approach, the Appium server as well as the AVD run on an Azure VM, while the client operates within a pipeline and sends commands to be executed on the device.</p>"},{"location":"automated-testing/ui-testing/teams-tests/#configure-the-vm","title":"Configure the VM","text":"<p>This approach involves hosting a virtual device within a virtual machine. To set up the emulator (Android Virtual Device) in an Azure VM, the VM must support nested virtualization. Azure VM configuration which, at the time of writing the documentation, worked successfully with AVD and appium:</p> <ul> <li>Operating system: Windows (Windows-10 Pro)</li> <li>VM generation: V1</li> <li>Size: Standard D4ds v5 16 GiB memory</li> </ul>"},{"location":"automated-testing/ui-testing/teams-tests/#enable-connection-from-outside-to-appium-server-on-the-vm","title":"Enable connection from outside to Appium server on the VM","text":"<p>Note: By default appium server runs on port 4723. The rest of the steps will assume that this is the port where your appium server runs.</p> <p>In order to be able to reach appium server which runs on the VM from outside:</p> <ol> <li>Create an Inbound Rule for port 4723 from within the VM.</li> <li>Create an Inbound Security Rule in the NSG (Network Security Group) of the VM to be able to connect from that IP address to port 4723: - Find out the IP of the machine on which the tests will run on. - Replace the Source IP Address with the IP of your machine.</li> </ol>"},{"location":"automated-testing/ui-testing/teams-tests/#installing-android-studio-and-create-avd-inside-the-vm","title":"Installing Android Studio and create AVD inside the VM","text":"<ol> <li>Follow the instructions under the end to end tests on a Windows machine section to install Android Studio and create an Android Virtual Device.</li> <li>When you launch the emulator, it may show a warning as below and will eventually crash: </li> </ol> <p>Solution to fix it: 1. Enable Windows Hypervisor Platform 1. Enable Hyper-V (if not enabled by default) 1. Restart the VM. 1. Restart the AVD.</p>"},{"location":"automated-testing/ui-testing/teams-tests/#how-to-inspect-the-teams-app-in-an-azure-virtual-device-avd","title":"How to inspect the Teams app in an Azure Virtual Device (AVD)?","text":"<p>Inspecting the app is highly valuable when writing new tests, as it enables you to identify the unique IDs of various elements displayed on the screen. This process is similar to using DevTools, which allows you to navigate through the Document Object Model (DOM) of a web page.</p> <p>Appium Inspector is a very useful tool that allows you to inspect an app runing on an emulator.</p> <p>Note: This section assumes that you have already performed the prerequisites from How to run mobile test locally on a Windows machine using AVD?</p>"},{"location":"automated-testing/ui-testing/teams-tests/#steps","title":"Steps","text":"<ol> <li> <p>Run the appium server with --alow-cors flag by running the following command in a terminal:</p> <pre><code>appium --allow-cors\n</code></pre> </li> <li> <p>Go to https://inspector.appiumpro.com and type in the following properties:</p> <pre><code>{\n\"appium:deviceName\": \"your-emulator-name\",\n\"appium:appPackage\": \"com.microsoft.teams\",\n\"appium:appActivity\": \"com.microsoft.skype.teams.Launcher\",\n\"appium:automationName\": \"UiAutomator2\",\n\"platformName\": \"Android\"\n}\n</code></pre> </li> </ol> <ul> <li>\"appium:deviceName\" - is the name of your emulator. In Useful commands sections from above, you can see how to get the name of your AVD.</li> <li>\"appium:appPackage\" - is the name of the package, should be kept to \"com.microsoft.teams\".</li> <li>\"appium:appActivity\"-  is the name of the activity in the app that you want to launch, should be kept to \"com.microsoft.skype.teams.Launcher\"</li> <li>\"appium:automationName\" - is the name of the driver you are using, in this case, \"UiAutomator2\"</li> </ul> <p>If the appium server runs on your local machine at the default portal, then Remote Host and Remote Port can be kept to the default values.</p> <p>The configuration should look similar to the printscren below: </p> <ol> <li>Press on Start Session. - In the browser, you should see a similar view as below: </li> </ol> <ul> <li>You can do any action on the emulator, and if you press on the \"Refresh\" button in the browser, the left hand side of the Appium Inspector will reflect your app. In the App Source you will be able to see the IDs of the elements, so you can write relevant selectors in your tests.</li> </ul> <p>Connecting to Appium server</p> <p>Below it is outlined how this can be achieved with JavaScript. A similar approach can be followed for other languages. Assuming you are using webdriverio as the client, you would need to initialize the remote connection as follows:</p> <pre><code> const opts = {\n      port: 4723,\n      hostname: \"your-hostname\",\n      capabilities: {\n        platformName: \"android\",\n        \"appium:deviceName\": \"the-name-of-the-virtual-device\",\n        \"appium:appPackage\": \"com.microsoft.teams\",\n        \"appium:appActivity\": \"com.microsoft.skype.teams.Launcher\",\n        \"appium:automationName\": \"the-name-of-the-driver\",\n      },\n    };\n\n    // Create a new WebDriverIO instance with the Appium server URL and capabilities\n    await wdio.remote(opts);\n</code></pre> <ul> <li>\"port\": the port on which the Appium server runs on. By default, it is 4723.</li> <li>\"hostname\": the IP of the machine where the Appium sever runs on. If it is running locally, that is 127.0.0.1. If it runs in an Azure VM, it would be the public IP address of the VM. Note: ensure you have followed the steps from 2. Enable connection from outside to Appium server on the VM.</li> <li>\"platformName\": Appium can be used to connect to different platforms (Windows, iOS, Android). In our case, it would be \"android\".</li> <li>\"appium:deviceName\": the name of the Android Virtual Device. See Useful commands on how to find the name of the device.</li> <li>\"appium:appPackage\": the name of the app's package that you would like to launch. Teams' package name is \"com.microsoft.teams\".</li> <li>\"appium:appActivity\": the activity within Teams that you would like to launch on the device. In our case, we would like just to launch the app. The activity name for launching Teams is called \"com.microsoft.skype.teams.Launcher\".</li> <li>\"appium:automationName\": the name of the driver you are using. Note: Appium can communicate to different platforms. This is achieved by installing a dedicated driver, designed for each platform. In our case, it would be UiAutomator2 or Espresso, since they are both designed for Android platform.</li> </ul>"},{"location":"automated-testing/ui-testing/teams-tests/#option-2-using-browserstack","title":"Option 2: Using BrowserStack","text":"<p>BrowserStack serves as a cloud-based platform that enables developers to test both the web and mobile application across various browsers, operating systems, and real mobile devices. This can be seen as an alternative solution to the approach described earlier. The specific insights provided below relate to implementing such tests for a custom Microsoft Teams application:</p> <ul> <li>BrowserStack does not support out of the box the installation of Teams from the App Store or Play Store. However, there is a workaround, described in their documentation. Therefore, if you choose to go this way, you would first need to implement a step that installs Teams on the cloud-based device, by implementing the workaround described above.</li> <li>You may encounter issues with Google login, as it requires a newly created Google account, in order to log in to the store. To overcome this, make sure to disable 2FA from Google, further described in Troubleshooting Google login issues.</li> </ul>"},{"location":"automated-testing/unit-testing/","title":"Unit Testing","text":"<p>Unit testing is a fundamental tool in every developer's toolbox. Unit tests not only help us test our code, they encourage good design practices, reduce the chances of bugs reaching production, and can even serve as examples or documentation on how code functions. Properly written unit tests can also improve developer efficiency.</p> <p>Unit testing also is one of the most commonly misunderstood forms of testing. Unit testing refers to a very specific type of testing; a unit test should be:</p> <ul> <li>Provably reliable - should be 100% reliable so failures indicate a bug in the code</li> <li>Fast - should run in milliseconds, a whole unit testing suite shouldn't take longer than a couple seconds</li> <li>Isolated - removing all external dependencies ensures reliability and speed</li> </ul>"},{"location":"automated-testing/unit-testing/#why-unit-testing","title":"Why Unit Testing","text":"<p>It is no secret that writing unit tests is hard, and even harder to write well. Writing unit tests also increases the development time for every feature. So why should we write them?</p> <p>Unit tests</p> <ul> <li>reduce costs by catching bugs earlier and preventing regressions</li> <li>increase developer confidence in changes</li> <li>speed up the developer inner loop</li> <li>act as documentation as code</li> </ul> <p>For more details, see all the detailed descriptions of the points above.</p>"},{"location":"automated-testing/unit-testing/#unit-testing-design-blocks","title":"Unit Testing Design Blocks","text":"<p>Unit testing is the lowest level of testing and as such generally has few components and dependencies.</p> <p>The system under test (abbreviated SUT) is the \"unit\" we are testing. Generally these are methods or functions, but depending on the language these could be different. In general, you want the unit to be as small as possible though.</p> <p>Most languages also have a wide suite of unit testing frameworks and test runners. These test frameworks have a wide range of functionality, but the base functionality should be a way to organize your tests and run them quickly.</p> <p>Finally, there is your unit test code; unit test code is generally short and simple, preferring repetition to adding layers and complexity to the code.</p>"},{"location":"automated-testing/unit-testing/#applying-the-unit-testing","title":"Applying the Unit Testing","text":"<p>Getting started with writing a unit test is much easier than some other test types since it should require next to no setup and is just code. Each test framework is different in how you organize and write your tests, but the general techniques and best practices of writing a unit test are universal.</p>"},{"location":"automated-testing/unit-testing/#techniques","title":"Techniques","text":"<p>These are some commonly used techniques that will help when authoring unit tests. For some examples, see the pages on using abstraction and dependency injection to author a unit test, or how to do test-driven development.</p> <p>Note that some of these techniques are more specific to strongly typed, object-oriented languages. Functional languages and scripting languages have similar techniques that may look different, but these terms are commonly used in all unit testing examples.</p>"},{"location":"automated-testing/unit-testing/#abstraction","title":"Abstraction","text":"<p>Abstraction is when we take an exact implementation detail, and we generalize it into a concept instead. This technique can be used in creating testable design and is used often especially in object-oriented languages. For unit tests, abstraction is commonly used to break a hard dependency and replace it with an abstraction. That abstraction then allows for greater flexibility in the code and allows for the a mock or simulator to be used in its place.</p> <p>One of the side effects of abstracting dependencies is that you may have an abstraction that has no test coverage. This is case where unit testing is not well-suited, you can not expect to unit test everything, things like dependencies will always be an uncovered case. This is why even if you have a robust unit testing suite, integration or functional testing should still be used - without that, a change in the way the dependency functions would never be caught.</p> <p>When building wrappers around third-party dependencies, it is best to keep the implementations with as little logic as possible, using a very simple facade that calls the dependency.</p> <p>An example of using abstraction can be found here.</p>"},{"location":"automated-testing/unit-testing/#dependency-injection","title":"Dependency Injection","text":"<p>Dependency injection is a technique which allows us to extract dependencies from our code. In a normal use-case of a dependant class, the dependency is constructed and used within the system under test. This creates a hard dependency between the two classes, which can make it particularly hard to test in isolation. Dependencies could be things like classes wrapping a REST API, or even something as simple as file access. By injecting the dependencies into our system rather than constructing them, we have \"inverted control\" of the dependency. You may see \"Inversion of Control\" and \"Dependency Injection\" used as separate terms, but it is very hard to have one and not the other, with some arguing that Dependency Injection is a more specific way of saying inversion of control. In certain languages such as C#, not using dependency injection can lead to code that is not unit testable since there is no way to inject mocked objects. Keeping testability in mind from the beginning and evaluating using dependency injection can save you from a time-intensive refactor later.</p> <p>One of the downsides of dependency injection is that it can easily go overboard. While there are no longer hard dependencies, there is still coupling between the interfaces, and passing around every interface implementation into every class presents just as many downsides as not using Dependency Injection. Being intentional with what dependencies get injected to what classes, is key to developing a maintainable system.</p> <p>Many languages include special Dependency Injection frameworks that take care of the boilerplate code and construction of the objects. Examples of this are Spring in Java or built into ASP.NET Core</p> <p>An example of using dependency injection can be found here.</p>"},{"location":"automated-testing/unit-testing/#test-driven-development","title":"Test-Driven Development","text":"<p>Test-Driven Development (TDD) is less a technique in how your code is designed, but a technique for writing your code that will lead you to a testable design from the start. The basic premise of test-driven development is that you write your test code first and then write the system under test to match the test you just wrote. This way all the test design is done up front and by the time you finish writing your system code, you are already at 100% test pass rate and test coverage. It also guarantees testable design is built into the system since the test was written first!</p> <p>For more information on TDD and an example, see the page on Test-Driven Development</p>"},{"location":"automated-testing/unit-testing/#best-practices","title":"Best Practices","text":""},{"location":"automated-testing/unit-testing/#arrangeactassert","title":"Arrange/Act/Assert","text":"<p>One common form of organizing your unit test code is called Arrange/Act/Assert. This divides up your unit test into 3 different discrete sections:</p> <ol> <li>Arrange - Set up all the variables, mocks, interfaces, and state you will need to run the test</li> <li>Act - Run the system under test, passing in any of the above objects that were created</li> <li>Assert - Check that with the given state that the system acted appropriately.</li> </ol> <p>Using this pattern to write tests makes them very readable and also familiar to future developers who would need to read your unit tests.</p>"},{"location":"automated-testing/unit-testing/#example","title":"Example","text":"<p>Let's assume we have a class <code>MyObject</code> with a method <code>TrySomething</code> that interacts with an array of strings, but if the array has no elements, it will return false. We want to write a test that checks the case where array has no elements:</p> <pre><code>[Fact]\npublic void TrySomething_NoElements_ReturnsFalse()\n{\n    // Arrange\n    var elements = Array.Empty&lt;string&gt;();\n    var myObject = new MyObject();\n\n    // Act\n    var myReturn = myObject.TrySomething(elements);\n\n    // Assert\n    Assert.False(myReturn);\n}\n</code></pre>"},{"location":"automated-testing/unit-testing/#keep-tests-small-and-test-only-one-thing","title":"Keep Tests Small and Test Only One Thing","text":"<p>Unit tests should be short and test only one thing. This makes it easy to diagnose when there was a failure without needing something like which line number the test failed at. When using Arrange/Act/Assert, think of it like testing just one thing in the \"Act\" phase.</p> <p>There is some disagreement on whether testing one thing means \"assert one thing\" or \"test one state, with multiple asserts if needed\". Both have their advantages and disadvantages, but as with most technical disagreements there is no \"right\" answer. Consistency when writing your tests one way or the other is more important!</p>"},{"location":"automated-testing/unit-testing/#using-a-standard-naming-convention-for-all-unit-tests","title":"Using a Standard Naming Convention for All Unit Tests","text":"<p>Without having a set standard convention for unit test names, unit test names end up being either not descriptive enough, or duplicated across multiple different test classes. Establishing a standard is not only important for keeping your code consistent, but a good standard also improves the readability and debug-ability of a test. In this article, the convention used for all unit tests has been <code>UnitName_StateUnderTest_ExpectedResult</code>, but there are lots of other possible conventions as well, the important thing is to be consistent and descriptive. Having descriptive names such as the one above makes it trivial to find the test when there is a failure, and also already explains what the expectation of the test was and what state caused it to fail. This can be especially helpful when looking at failures in a CI/CD system where all you know is the name of the test that failed - instead now you know the name of the test and exactly why it failed (especially coupled with a test framework that logs helpful output on failures).</p>"},{"location":"automated-testing/unit-testing/#things-to-avoid","title":"Things to Avoid","text":"<p>Some common pitfalls when writing a unit test that are important to avoid:</p> <ul> <li>Sleeps - A sleep can be an indicator that perhaps something is making a request to a dependency that it should not be.   In general, if your code is flaky without the sleep, consider why it is failing and if you can remove the flakiness by   introducing a more reliable way to communicate potential state changes. Adding sleeps to your unit tests also breaks   one of our original tenets of unit testing: tests should be fast, as in order of milliseconds. If tests are taking on   the order of seconds, they become more cumbersome to run.</li> <li>Reading from disk - It can be really tempting to the expected value of a function return in a file and read that file   to compare the results. This creates a dependency with the system drive, and it breaks our tenet of keeping our unit   tests isolated and 100% reliable. Any outside dependency such as file system access could potentially cause   intermittent failures. Additionally, this could be a sign that perhaps the test or unit under test is too complex and   should be simplified.</li> <li>Calling third-party APIs - When you do not control a third-party library that you are calling into, it's impossible to   know for sure what that is doing, and it is best to abstract it out. Otherwise, you may be making REST calls or other   potential areas of failure without directly writing the code for it. This is also generally a sign that the design of   the system is not entirely testable. It is best to wrap third party API calls in interfaces or other structures so   that they do not get invoked in unit tests. For more information see the page on mocking.</li> </ul>"},{"location":"automated-testing/unit-testing/#unit-testing-frameworks-and-tools","title":"Unit Testing Frameworks and Tools","text":""},{"location":"automated-testing/unit-testing/#test-frameworks","title":"Test Frameworks","text":"<p>Unit test frameworks are constantly changing. For a full list of every unit testing framework see the page on Wikipedia. Frameworks have many features and should be picked based on which feature-set fits best for the particular project.</p>"},{"location":"automated-testing/unit-testing/#mock-frameworks","title":"Mock Frameworks","text":"<p>Many projects start with both a unit test framework, and also add a mock framework. While mocking frameworks have their uses and sometimes can be a requirement, it should not be something that is added without considering the broader implications and risks associated with heavy usage of mocks.</p> <p>To see if mocking is right for your project, or if a mock-free approach is more appropriate, see the page on mocking.</p>"},{"location":"automated-testing/unit-testing/#tools","title":"Tools","text":"<p>These tools allow for constant running of your unit tests with in-line code coverage, making the dev inner loop extremely fast and allows for easy TDD:</p> <ul> <li>Visual Studio Live Unit Testing</li> <li>Wallaby.js</li> <li>Infinitest for Java</li> <li>PyCrunch for Python</li> </ul>"},{"location":"automated-testing/unit-testing/#things-to-consider","title":"Things to Consider","text":""},{"location":"automated-testing/unit-testing/#transferring-responsibility-to-integration-tests","title":"Transferring Responsibility to Integration Tests","text":"<p>In some situations it is worth considering to include the integration tests in the inner development loop to provide a sufficient code coverage to ensure the system is working properly. The prerequisite for this approach to be successful is to have integration tests being able to execute at a speed comparable to that of unit tests both locally and in a CI environment. Modern application frameworks like .NET or Spring Boot combined with the right mocking or stubbing approach for external dependencies offer excellent capabilities to enable such scenarios for testing.</p> <p>Usually, integration tests only prove that independently developed modules connect together as designed. The test coverage of integration tests can be extended to verify the correct behavior of the system as well. The responsibility of providing a sufficient branch and line code coverage can be transferred from unit tests to integration tests. Instead of several unit tests needed to test a specific case of functionality of the system, one integration scenario is created that covers the entire flow. For example in case of an API, the received HTTP responses and their content are verified for each request in test. This covers both the integration between components of the API and the correctness of its business logic.</p> <p>With this approach efficient integration tests can be treated as an extension of unit testing, taking over the responsibility of validating happy/failure path scenarios. It has the advantage of testing the system as a black box without any knowledge of its internals. Code refactoring has no impact on tests. Common testing techniques as TDD can be applied at a higher level which results in a development process that is driven by acceptance tests. Depending on the project specifics unit tests still play an important role. They can be used to help dictate a testable design at a lower level or to test complex business logic and corner cases if necessary.</p>"},{"location":"automated-testing/unit-testing/#conclusion","title":"Conclusion","text":"<p>Unit testing is extremely important, but it is also not the silver bullet; having proper unit tests is just a part of a well-tested system. However, writing proper unit tests will help with the design of your system as well as help catch regressions, bugs, and increase developer velocity.</p>"},{"location":"automated-testing/unit-testing/#resources","title":"Resources","text":"<ul> <li>Unit Testing Best Practices</li> </ul>"},{"location":"automated-testing/unit-testing/authoring-example/","title":"Writing a Unit Test","text":"<p>To illustrate some unit testing techniques for an object-oriented language, let's start with an example of some code we wish to add unit tests for. In this example, we have a configuration class that contains all the startup options for an app we are writing. Normally it reads from a <code>.config</code> file, but we are having three problems with the current implementation:</p> <ol> <li>There is a bug in the Configuration class, and we have no unit tests since it relies on reading a config file</li> <li>We can't unit test any of the code that relies on the Configuration class reading a config file</li> <li>In the future, we want to allow for configuration to be saved in the cloud and accessed via REST api.</li> </ol> <p>The bug we are trying to fix is that if there are multiple empty lines in the configuration file, an IndexOutOfRangeException is being thrown. Our class currently looks like this:</p> <pre><code>using System.IO;\nusing System.Linq;\n\npublic class Configuration\n{\n    // Public getter properties from configuration object\n    public string MyProperty { get; private set; }\n\n    public void Initialize()\n    {\n        var configContents = File.ReadAllLines(\".config\");\n\n        // Config is in the format: key=value\n        var config = configContents.Select(l =&gt; l.Split('='))\n                                   .ToDictionary(kv =&gt; kv[0], kv =&gt; kv[1]);\n\n        // Assign all properties here\n        this.MyProperty = config[\"myproperty\"];\n    }\n}\n</code></pre>"},{"location":"automated-testing/unit-testing/authoring-example/#abstraction","title":"Abstraction","text":"<p>In our example, we have a single dependency: the file system. Rather than just abstracting the file system entirely, let us think about why we need the file system and abstract the concept rather than the implementation. In this case, we are using the <code>File</code> class to read from the config file, and the config contents. The abstraction concept here is some form or configuration reader that returns each line of the configuration in a string array. We could call it <code>ConfigurationReader</code>, and it has a single method, <code>Read</code>, which returns the contents.</p> <p>When creating abstractions, it can be good practice creating an interface for that abstraction, in languages that support it. In the example with C#, we can create an <code>IConfigurationReader</code> interface, and instead of just having a <code>ConfigurationReader</code> class we can be more specific and name if <code>FileConfigurationReader</code> to indicate that it reads from the file system:</p> <pre><code>// IConfigurationReader.cs\npublic interface IConfigurationReader\n{\n    string[] Read();\n}\n\n// FileConfigurationReader.cs\npublic class FileConfigurationReader : IConfigurationReader\n{\n    public string[] Read()\n    {\n        return File.ReadAllLines(\".config\");\n    }\n}\n</code></pre> <p>Now that the file dependency has been abstracted away, we need to update our Configuration class's Initialize method to use the new abstraction instead of calling <code>File.ReadAllLines</code> directly:</p> <pre><code>public void Initialize()\n{\n    var configContents = new FileConfigurationReader().Read();\n\n    // Config is in the format: key=value\n    var config = configContents.Select(l =&gt; l.Split('='))\n                               .ToDictionary(kv =&gt; kv[0], kv =&gt; kv[1]);\n\n    // Assign all properties here\n    this.MyProperty = config[\"myproperty\"];\n}\n</code></pre> <p>As you can see, we still have a dependency on the file system, but that dependency has been abstracted out. We will need to use other techniques to break the dependency completely.</p>"},{"location":"automated-testing/unit-testing/authoring-example/#dependency-injection","title":"Dependency Injection","text":"<p>In the previous section, we abstracted the file access into a <code>FileConfigurationReader</code> but we still had a dependency on the file system in our function. We can use dependency injection to inject the right reader into our <code>Configuration</code> class:</p> <pre><code>using System.IO;\nusing System.Linq;\n\npublic class Configuration\n{\n    private readonly IConfigurationReader configReader;\n\n    // Public getter properties from configuration object\n    public string MyProperty { get; private set; }\n\n    public Configuration(IConfigurationReader reader)\n    {\n        this.configReader = reader;\n    }\n\n    public void Initialize()\n    {\n        var configContents = configReader.Read();\n\n        // Config is in the format: key=value\n        var config = configContents.Select(l =&gt; l.Split('='))\n                                   .ToDictionary(kv =&gt; kv[0], kv =&gt; kv[1]);\n\n        // Assign all properties here\n        this.MyProperty = config[\"myproperty\"];\n    }\n}\n</code></pre> <p>Above, a technique was used called Constructor Injection. This uses the object's constructor to set what our dependencies will be, which means whichever object creates the <code>Configuration</code> object will control which reader needs to get passed in. This is an example of \"inversion of control\", previously the <code>Configuration</code> object controlled the dependency, but instead we pushed up the control to whatever component creates this object.</p> <p>Note that we injected the interface <code>IConfigurationReader</code> and not the concrete class. This is what allows us to break the dependency; whereas originally we had a hard-coded dependency on the <code>File</code> class, now we only depend on an object that implements <code>IConfigurationReader</code>.</p>"},{"location":"automated-testing/unit-testing/authoring-example/#writing-our-first-unit-tests","title":"Writing our first unit tests","text":"<p>We started down this venture because we have a bug in the <code>Configuration</code> class that was not caught because we do not have unit tests. Let us write some unit tests that gives us full coverage of the <code>Configuration</code> class, including a test that tests the scenario described by the bug (if there are multiple empty lines in the configuration file, an IndexOutOfRangeException is being thrown).</p> <p>However, we still have one problem, we only have a single implementation of <code>IConfigurationReader</code>, and it uses the file system, meaning any unit tests we write will still have a dependency on the file system! Luckily since we used dependency injection, all we need to do is create an implementation of <code>IConfigurationReader</code> that does not depend on the file system. We could create a mock here, but instead let's create a concrete implementation of the interface which simply returns the passed in string[] - we can call it <code>PassThroughConfigurationReader</code> (for more details on why this approach may be better than mocking, see the page on mocking)</p> <pre><code>public class PassThroughConfigurationReader : IConfigurationReader\n{\n    private readonly string[] contents;\n\n    public PassThroughConfigurationReader(string[] contents)\n    {\n        this.contents = contents;\n    }\n\n    public string[] Read()\n    {\n        return this.contents;\n    }\n}\n</code></pre> <p>This simple class will be used in our unit tests, so we can create different states without requiring lots of file access. Now that we have this in place, we can go ahead and write our unit tests, starting with the tests that describe the current behavior:</p> <pre><code>public class ConfigurationTests\n{\n    [Fact]\n    public void Initialize_EmptyConfig_Throws()\n    {\n        var reader = new PassThroughConfigurationReader(Array.Empty&lt;string&gt;());\n        var config = new Configuration(reader);\n\n        Assert.Throws&lt;KeyNotFoundException&gt;(() =&gt; config.Initialize());\n    }\n\n    [Fact]\n    public void Initialize_CorrectFormat_SetsProperty()\n    {\n        var reader = new PassThroughConfigurationReader(new[] {\n            \"myproperty=myvalue\"\n        });\n        var config = new Configuration(reader);\n\n        config.Initialize();\n\n        Assert.Equal(\"myvalue\", config.MyProperty);\n    }\n}\n</code></pre>"},{"location":"automated-testing/unit-testing/authoring-example/#fixing-the-bug","title":"Fixing the Bug","text":"<p>All our current tests pass, and give us 100% coverage, however as evidenced by the bug, we must not be covering all possible inputs and outputs. In the case of the bug, multiple empty lines would cause an issue. Additionally, <code>KeyNotFoundException</code> is not a very friendly exception and is an implementation detail, not something that makes sense when designing the Configuration API. Let's add some more tests and align the tests with how we think the <code>Configuration</code> class should behave:</p> <pre><code>public class ConfigurationTests\n{\n    [Fact]\n    public void Initialize_EmptyConfig_Throws()\n    {\n        var reader = new PassThroughConfigurationReader(Array.Empty&lt;string&gt;());\n        var config = new Configuration(reader);\n\n        Assert.Throws&lt;InvalidOperationException&gt;(() =&gt; config.Initialize());\n    }\n\n    [Fact]\n    public void Initialize_MalformedLine_Throws()\n    {\n        var reader = new PassThroughConfigurationReader(new[] {\n            \"myproperty\",\n        });\n        var config = new Configuration(reader);\n\n        Assert.Throws&lt;InvalidOperationException&gt;(() =&gt; config.Initialize());\n    }\n\n    [Fact]\n    public void Initialize_MultipleEqualSigns_PropertyContainsNoEquals()\n    {\n        var reader = new PassThroughConfigurationReader(new[] {\n            \"myproperty=myval1=myval2\",\n        });\n        var config = new Configuration(reader);\n\n        config.Initialize();\n\n        Assert.Equal(\"myval1=myval2\", config.MyProperty);\n    }\n\n    [Fact]\n    public void Initialize_WithBlankLines_Ignores()\n    {\n        var reader = new PassThroughConfigurationReader(new[] {\n            \"myproperty=myvalue\",\n            string.Empty,\n        });\n        var config = new Configuration(reader);\n\n        config.Initialize();\n\n        Assert.Equal(\"myvalue\", config.MyProperty);\n    }\n\n    [Fact]\n    public void Initialize_CorrectFormat_SetsProperty()\n    {\n        var reader = new PassThroughConfigurationReader(new[] {\n            \"myproperty=myvalue\"\n        });\n        var config = new Configuration(reader);\n\n        config.Initialize();\n\n        Assert.Equal(\"myvalue\", config.MyProperty);\n    }\n}\n</code></pre> <p>Now we have 4 failing tests and 1 passing test, but we have firmly established through the use of these tests how we expect callers to user the Configuration class and what is and isn't allowed as inputs. Now we just need to fix the <code>Configuration</code> class so that our tests pass:</p> <pre><code>public void Initialize()\n{\n    var configContents = configReader.Read();\n\n    if (configContents.Length == 0)\n    {\n        throw new InvalidOperationException(\"Empty config\");\n    }\n\n    // Config is in the format: key=value\n    var config = configContents.Where(l =&gt; !string.IsNullOrWhiteSpace(l))\n                               .Select(l =&gt;\n                               {\n                                   var splitLine = l.Split('=', 2);\n                                   if (splitLine.Length &lt; 2)\n                                   {\n                                       throw new InvalidOperationException(\"Malformed line\");\n                                   }\n                                   return splitLine;\n                               })\n                               .ToDictionary(kv =&gt; kv[0], kv =&gt; kv[1]);\n\n    // Assign all properties here\n    this.MyProperty = config[\"myproperty\"];\n}\n</code></pre> <p>Now all our tests pass! We have fixed our bug, added unit tests to the <code>Configuration</code> class, and have much higher confidence in future changes.</p>"},{"location":"automated-testing/unit-testing/authoring-example/#untestable-code","title":"Untestable Code","text":"<p>As described in the abstraction section, not all code can be properly unit tested. In our case we have a single class that has 0% test coverage: <code>FileConfigurationReader</code>. This is expected; in this case we kept <code>FileConfigurationReader</code> as light as possible with no additional logic other than calling into the third-party dependency. <code>FileConfigurationReader</code> is an example of the facade design pattern.</p>"},{"location":"automated-testing/unit-testing/authoring-example/#testable-design-and-future-improvements","title":"Testable Design and Future Improvements","text":"<p>One of our original problems described in this example is that in the future we expect to load the configuration from a web API. By doing all the work of abstracting the way we load the configuration text and breaking the dependency on the file system, we have already done all the hard work to enable this future scenario! All that needs to be done next is to create a <code>WebApiConfigurationReader</code> implementation and use that the construct the <code>Configuration</code> object, and it should just work.</p> <p>That is one of the benefits of testable design, in the process of writing our tests in a safe way, a side effect of that is that we already have our dependencies that might change abstracted, and will require minimal changes to implement.</p> <p>Another added benefit is we have multiple possibilities opened by this testable design. For example, we can have a cascading configuration set up now using all 3 <code>IConfigurationReader</code> implementations, including the one we wrote only for our tests! We can first check if internet access is available and if so use <code>WebApiConfigurationReader</code>. If no internet is available, we can fall back to the local config file on the current system using <code>FileConfigurationReader</code>. If for some reason the config file does not exist, we can use the <code>PassThroughConfigurationReader</code> as a hard-coded default configuration somewhere in the code. We have full flexibility to do whatever we may need to do in the future!</p>"},{"location":"automated-testing/unit-testing/custom-connector/","title":"Custom Connector Testing","text":"<p>When developing Custom Connectors to put data into the Power Platform there are some strategies you can follow:</p>"},{"location":"automated-testing/unit-testing/custom-connector/#unit-testing","title":"Unit Testing","text":"<p>There are several verifications one can do while developing custom connectors in order to be sure the code is working properly.</p> <p>There are two main ones:</p> <ul> <li>Validating the OpenAPI schema which the connector is defined.</li> <li>Validating if the schema also have all the information necessary for the certified connector process.</li> </ul> <p>(the later one is optional, but necessary in case you want to publish it as a certified connector).</p> <p>There are several tool to help validate the OpenAPI schema, a list of them are available in this link. A suggested tool would be swagger-cli.</p> <p>On the other hand, to validate if the custom connector you are building is correct to become a certified connector, use the paconn-cli, since it has a validate command that shows missing information from the custom connector definition.</p>"},{"location":"automated-testing/unit-testing/mocking/","title":"Mocking in Unit Tests","text":"<p>One of the key components of writing unit tests is to remove the dependencies your system has and replacing it with an implementation you control. The most common method people use as the replacement for the dependency is a mock, and mocking frameworks exist to help make this process easier.</p> <p>Many frameworks and articles use different meanings for the differences between test doubles. A test double is a generic term for any \"pretend\" object used in place of a real one. This term, as well as others used in this page are the definitions provided by Martin Fowler. The most commonly used form of test double is Mocks, but there are many cases where Mocks perhaps are not the best choice and Fakes should be considered instead.</p>"},{"location":"automated-testing/unit-testing/mocking/#stubs","title":"Stubs","text":"<p>Stub allows you to have predetermined behavior that substitutes real behavior. The dependency (abstract class or interface) is implemented as a stub with a logic as expected by the client. Stubs can be useful when the clients of the stubs all expect the same set of responses, e.g. you use a third party service. The key concept here is that stubs should never fail a unit or integration test where a mock can. Stubs do not require any sort of framework to run, but are usually supported by mocking frameworks to quickly build the stubs. Stubs are commonly used in combination with a dependency injection frameworks or libraries, where the real object is replaced by a stub implementation.</p> <p>Stubs can be useful especially during early development of a system, but since nearly every test requires its own stubs (to test the different states), this quickly becomes repetitive and involves a lot of boilerplate code. Rarely will you find a codebase that uses only stubs for mocking, they are usually paired with other test doubles.</p> <p>Stubs do not require any sort of framework to run, but are usually supported by mocking frameworks to quickly build the stubs.</p> <pre><code># Python test example, that creates an application\n# with a dependency injection framework an overrides\n# a service with a stub\n\nclass StubTestCase(TestBase):\n    def setUp(self) -&gt; None:\n        super(StubTestCase, self).setUp()\n        self.app.container.service_a.override(StubService())\n\n    def test_service():\n        service = self.app.container.service_a()\n        self.assertTrue(isinstance(service, StubService))\n</code></pre>"},{"location":"automated-testing/unit-testing/mocking/#upsides","title":"Upsides","text":"<ul> <li>Do not require any framework, easy to set up.</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#downsides","title":"Downsides","text":"<ul> <li>Can involve rewriting the same code many times, lots of boilerplate.</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#mocks","title":"Mocks","text":"<p>Fowler describes mocks as pre-programmed objects with expectations which form a specification of the calls they are expected to receive. In other words, mocks are a replacement object for the dependency that has certain expectations that are placed on it; those expectations might be things like validating a sub-method has been called a certain number of times or that arguments are passed down in a certain way.</p> <p>Mocking frameworks are abundant for every language, with some languages having mocks built into the unit test packages. They make writing unit tests easy and still encourage good unit testing practices.</p> <p>The main difference between a mock and most of the other test doubles is that mocks do behavioral verification, whereas other test doubles do state verification. With behavioral verification, you end up testing that the implementation of the system under test is as you expect, whereas with state verification the implementation is not tested, rather the inputs and the outputs to the system are validated.</p> <p>The major downside to behavioral verification is that it is tied to the implementation. One of the biggest advantages of writing unit tests is that when you make code changes you have confidence that if your unit tests continue to pass, that you are making a relatively safe change. If tests need to be updated every time because the behavior of the method has changed, then you lose that confidence because bugs could also be introduced into the test code. This also increases the development time and can be a source of frustration.</p> <p>For example, let's assume you have a method that you are testing that makes 5 web service calls. With mocks, one of your tests could be to check that those 5 web service calls were made. Sometime later the API is updated and only a single web service call needs to be made. Once the system code is changed, the unit test will fail because it expects 5 calls and not 1. The test needs to be updated, which results in lowered confidence in the change, as well as potentially introduces more areas for bugs to sneak in.</p> <p>Some would argue that in the example above, the unit test is not a good test anyway because it depends on the implementation, and that may be true; but one of the biggest problems with using mocks (and specifically mocking frameworks that allow these verifications), is that it encourages these types of tests to be written. By not using a mock framework that allows this, you never run the risk of writing tests that are validating the implementation.</p>"},{"location":"automated-testing/unit-testing/mocking/#upsides-to-mocking","title":"Upsides to Mocking","text":"<ul> <li>Easy to write.</li> <li>Encourages testable design.</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#downsides-to-mocking","title":"Downsides to Mocking","text":"<ul> <li>Behavioral testing can present problems with maintainability in unit test code.</li> <li>Usually requires a framework to be installed (or if no framework, lots of boilerplate code)</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#fakes","title":"Fakes","text":"<p>Fake objects actually have working implementations, but usually take some shortcut which may make them not suitable for production. One of the common examples of using a Fake is an in-memory database - typically you want your database to be able to save data somewhere between application runs, but when writing unit tests if you have a fake implementation of your database APIs that are store all data in memory, you can use these for unit tests and not break abstraction as well as still keep your tests fast.</p> <p>Writing a fake does take more time than other test doubles, because they are full implementations, and can have their own suite of unit tests. In this sense though, they increase confidence in your code even more because your test double has been thoroughly tested for bugs before you even use it as a downstream dependency.</p> <p>Similarly to mocks, fakes also promote testable design, but unlike mocks they do not require any frameworks to write. Writing a fake is as easy as writing any other implementation class. Fakes can be included in the test code only, but many times they end up being \"promoted\" to the product code, and in some cases can even start off in the product code since it is held to the same standard with full unit tests. Especially if writing a library or an API that other developers can use, providing a fake in the product code means those developers no longer need to write their own mock implementations, further increasing re-usability of code.</p>"},{"location":"automated-testing/unit-testing/mocking/#upsides-to-fakes","title":"Upsides to Fakes","text":"<ul> <li>No framework needed, is just like any other implementation.</li> <li>Encourages testable design.</li> <li>Code can be \"promoted\" to product code, so it is not wasted effort.</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#downsides-to-fakes","title":"Downsides to Fakes","text":"<ul> <li>Takes more time to implement.</li> </ul>"},{"location":"automated-testing/unit-testing/mocking/#best-practices","title":"Best Practices","text":"<p>To keep your mocking efficient, consider these best practices to make your code testable, save time and make your test assertions more meaningful.</p>"},{"location":"automated-testing/unit-testing/mocking/#dependency-injection","title":"Dependency Injection","text":"<p>If you don\u2019t keep testability in mind from the beginning, once you start writing your tests, you might realize you have to do a time-intensive refactor to make the code unit testable. A common problem that can lead to non-testable code in certain languages such as C# is not using dependency injection. Consider using dependency injection so that a mock can easily be injected into your Subject Under Test (SUT) during a unit test.</p> <p>More information on using dependency injection can be found here.</p>"},{"location":"automated-testing/unit-testing/mocking/#assertions","title":"Assertions","text":"<p>When it comes to assertions in unit tests you want to make sure that you assert the right things, not necessarily lots of things. Some assertions can be inefficient and not give you the confidence you need in the test result. When you are mocking a client or configuration and your method passes the mock result directly as a return value without significant changes, consider not asserting on the return value. Because if you do, you are mainly asserting whether you set up the mock correctly. For a very simple example, look at this class:</p> <pre><code>public class SearchController : ControllerBase {\n\n   public ISearchClient SearchClient { get; }\n\n   public SearchController(ISearchClient searchClient)\n   {\n      SearchClient = searchClient;\n   }\n\n   public String GetName(string id)\n   {\n      return this.SearchClient.GetName(id);\n   }\n}\n</code></pre> <p>When testing the <code>GetName</code> method, you can set up a mock search client to return a certain value. Then, it\u2019s easy to assert that the return value is, in fact, this value from the mock.</p> <pre><code>mockSearchClient.Setup(x =&gt; x.GetName(id))\n   .ReturnsAsync(\"myResult\");\nvar result = searchController.GetName(id);\nAssert.Equal(\"myResult\",result.Value);\n</code></pre> <p>But now, your method could look like this, and the test would still pass:</p> <pre><code>public String GetName(string id)\n{\n   return \"myResult\";\n}\n</code></pre> <p>Similarly, if you set up your mock wrong, the test would fail even though the logic inside the method is sound. For efficient assertions that will give you confidence in your SUT, make assertions on your logic, not mock return values. The simple example above doesn\u2019t have a lot of logic, but you want to make sure that it calls the search client to retrieve the result. For this, you can use the verify method to make sure the search client was called using the right parameters even though you don\u2019t care about the result.</p> <pre><code>mockSearchClient.Verify(mock =&gt; mock.GetName(id), Times.Once());\n</code></pre> <p>This example is kept simple to visualize the principle of making meaningful assertions. In a real world application, your SUT will probably have more logic inside. Pieces of glue code that have as little logic as this example don't always have to be unit tested and might instead be covered by integration tests. If there is more logic and a unit test with mocking is required, you should apply this principle by verifying mock calls and making assertions on the part of the mock result that was modified by your SUT.</p>"},{"location":"automated-testing/unit-testing/mocking/#callbacks","title":"Callbacks","text":"<p>It can be time-consuming to set up mocks if you want to make sure they are being called with the right parameters, especially if the parameters are complex. To make your testing more efficient, consider using callbacks to make assertions on the parameters after a method was called. Often you don\u2019t care about all the parameters but only a few, or even only parts of them if the parameters are also objects. It\u2019s easy to make a small mistake in the creation of the parameter, like missing an attribute that the actual method sets, and then your mock won\u2019t be called, even though you might not care about this attribute at all. To avoid this, you can define only the most relevant parameters to differentiate between method calls and use an <code>any</code>-statement for the others. In this example, the method has a complex search options parameter which would take a lot of time to set up manually. Since you only care about 2 attributes in the search options, you use an <code>any</code>-statement and store the options in a callback for later assertions.</p> <pre><code>var actualOptions = new SearchOptions();\n\nmockSearchClient\n   .Setup(x =&gt;\n      x.Search(\n         \"[This parameter is most relevant]\",\n         It.IsAny&lt;SearchOptions&gt;()\n      )\n   )\n   .Returns(mockResults)\n   .Callback&lt;string, SearchOptions&gt;((query, searchOptions) =&gt;\n     {\n       actualOptions = searchOptions;\n     }\n   );\n</code></pre> <p>Since you want to test your method logic, you should care only about the parts of the parameter which are influenced by your SUT, in this example, let's say the search mode and the search query type. So, with the variable you stored in the callback, you can make assertions on only these two attributes.</p> <pre><code>Assert.Equal(SearchMode.All, actualOptions.SearchMode);\nAssert.Equal(SearchQueryType.Full, actualOptions.QueryType);\n</code></pre> <p>This makes the test more explicit since it shows which parts of the logic you care about. It\u2019s also more efficient since you don\u2019t have to spend a lot of time setting up the parameters for the mock.</p>"},{"location":"automated-testing/unit-testing/mocking/#conclusion","title":"Conclusion","text":"<p>Using test doubles in unit tests is an essential part of having a healthy test suite. When looking at mocking frameworks and using test doubles, it is important to consider the future implications of integrating with a mocking framework from the start. Sometimes certain features of mocking frameworks seem essential, but usually that is a sign that the code itself is not abstracted enough if it requires a framework.</p> <p>If possible, starting without a mocking framework and attempting to create fake implementations will lead to a more healthy code base, but when that is not possible the onus is on the technical leaders of the team to find cases where mocks may be overused, rely too much on implementation details, or end up not testing the right things.</p>"},{"location":"automated-testing/unit-testing/tdd-example/","title":"Test-Driven Development Example","text":"<p>With this method, rather than writing all your tests up front, you write one test at a time and then switch to write the system code that would make that test pass. It's important to write the bare minimum of code necessary even if it is not actually \"correct\". Once the test passes you can refactor the code to make it maybe make more sense, but again the logic should be simple. As you write more tests, the logic gets more and more complex, but you can continue to make the minimal changes to the system code with confidence because all code that was written is covered.</p> <p>As an example, let's assume we are trying to write a new function that validates a string is a valid password format. The password format should be a string larger than 8 characters containing at least one number. We start with the simplest possible test; one of the easiest ways to do this is to first write tests that validate inputs into the function:</p> <pre><code>// Tests.cs\npublic class Tests\n{\n    [Fact]\n    public void ValidatePassword_NullInput_Throws()\n    {\n        var s = new MyClass();\n        Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; s.ValidatePassword(null));\n    }\n}\n\n// MyClass.cs\npublic class MyClass\n{\n    public bool ValidatePassword(string input)\n    {\n        return false;\n    }\n}\n</code></pre> <p>If we run this code, the test will fail as no exception was thrown since our code in <code>ValidateString</code> is just a stub. This is ok! This is the \"Red\" part of Red-Green-Refactor. Now we want to move onto the \"Green\" part - making the minimal change required to make this test pass:</p> <pre><code>// MyClass.cs\npublic class MyClass\n{\n    public bool ValidatePassword(string input)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n}\n</code></pre> <p>Our tests pass, but this function doesn't really work, it will always throw the exception. That's ok! As we continue to write tests we will slowly add the logic for this function, and it will build on itself, all while guaranteeing our tests continue to pass.</p> <p>We will skip the \"Refactor\" stage at this point because there isn't anything to refactor. Next let's add a test that checks that the function returns false if the password is less than size 8:</p> <pre><code>[Fact]\npublic void ValidatePassword_SmallSize_ReturnsFalse()\n{\n    var s = new MyClass();\n    Assert.False(s.ValidatePassword(\"abc\"));\n}\n</code></pre> <p>This test will pass as it still only throws an <code>ArgumentNullException</code>, but again, that is an expected failure. Fixing our function should see it pass:</p> <pre><code>public bool ValidatePassword(string input)\n{\n    if (input == null)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n\n    return false;\n}\n</code></pre> <p>Finally, some code that looks real! Note how it wasn't the test that checked for null that had us add the <code>if</code> statement for the null-check, but rather the subsequent test which unlocked a whole new branch. By adding that if statement, we made the bare minimum change necessary in order to get both tests to pass, but we still have work to do.</p> <p>In general, working in the order of adding a negative test first before adding a positive test will ensure that both cases get covered by the code in a way that can get tests. Red-Green-Refactor makes that process super easy by requiring the bare minimum change - since we only want to make the bare minimum changes, we just simply return false here, knowing full well that we will be adding logic later that will expand on this.</p> <p>Speaking of which, let's add the positive test now:</p> <pre><code>[Fact]\npublic void ValidatePassword_RightSize_ReturnsTrue()\n{\n    var s = new MyClass();\n    Assert.True(s.ValidatePassword(\"abcdefgh1\"));\n}\n</code></pre> <p>Again, this test will fail at the start. One thing to note here if that its important that we try and make our tests resilient to future changes. When we write the code under test, we act very naively, only trying to make the current tests we have pass; when you write tests though, you want to ensure that everything you are doing is a valid case in the future. In this case, we could have written the input string as <code>abcdefgh</code> and when we eventually write the function it would pass, but later when we add tests that validate the function has the rest of the proper inputs it would fail incorrectly.</p> <p>Anyways, the next code change is:</p> <pre><code>public bool ValidatePassword(string input)\n{\n    if (input == null)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n\n    if (input.Length &gt; 8)\n    {\n        return true;\n    }\n    return false;\n}\n</code></pre> <p>Here we now have a passing test! However, the logic doesn't actually make much sense. We did the bare minimum change which was adding a new condition that passed for longer strings, but thinking forward we know this won't work as soon as we add additional validations. So let's use our first \"Refactor\" step in the Red-Green-Refactor flow!</p> <pre><code>public bool ValidatePassword(string input)\n{\n    if (input == null)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n\n    if (input.Length &lt; 8)\n    {\n        return false;\n    }\n    return true;\n}\n</code></pre> <p>That looks better. Note how from a functional perspective, inverting the if-statement does not change what the function returns. This is an important part of the refactor flow, maintaining the logic by doing provably safe refactors, usually through the use of tooling and automated refactors from your IDE.</p> <p>Finally, we have one last requirement for our <code>ValidatePassword</code> method and that is that it needs to check that there is a number in the password. Let's again start with the negative test and validate that with a string with the valid length that the function returns <code>false</code> if we do not pass in a number:</p> <pre><code>[Fact]\npublic void ValidatePassword_ValidLength_ReturnsFalse()\n{\n    var s = new MyClass();\n    Assert.False(s.ValidatePassword(\"abcdefghij\"));\n}\n</code></pre> <p>Of course the test fails as it is only checking length requirements. Let's fix the method to check for numbers:</p> <pre><code>public bool ValidatePassword(string input)\n{\n    if (input == null)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n\n    if (input.Length &lt; 8)\n    {\n        return false;\n    }\n\n    if (!input.Any(char.IsDigit))\n    {\n        return false;\n    }\n    return true;\n}\n</code></pre> <p>Here we use a handy LINQ method to check if any of the <code>char</code>s in the <code>string</code> are a digit, and if not, return false. Tests now pass, and we can refactor. For readability, why not combine the <code>if</code> statements:</p> <pre><code>public bool ValidatePassword(string input)\n{\n    if (input == null)\n    {\n        throw new ArgumentNullException(nameof(input));\n    }\n\n    if ((input.Length &lt; 8) ||\n        (!input.Any(char.IsDigit)))\n    {\n        return false;\n    }\n\n    return true;\n}\n</code></pre> <p>As we refactor this code, we feel 100% confident in the changes we made as we have 100% test coverage which tests both positive and negative scenarios. In this case we actually already have a method that tests the positive case, so our function is done!</p> <p>Now that our code is completely tested we can make all sorts of changes and still have confidence that it works. For example, if we wanted to change the implementation of the method to use regex, all of our tests would still pass and still be valid.</p> <p>That is it! We finished writing our function, we have 100% test coverage, and if we had done something a little more complex, we are guaranteed that whatever we designed is already testable since the tests were written first!</p>"},{"location":"automated-testing/unit-testing/why-unit-tests/","title":"Why Unit Tests","text":"<p>It is no secret that writing unit tests is hard, and even harder to write well. Writing unit tests also increases the development time for every feature. So why should we bother writing them?</p>"},{"location":"automated-testing/unit-testing/why-unit-tests/#reduce-costs","title":"Reduce Costs","text":"<p>There is no question that the later a bug is found, the more expensive it is to fix; especially so if the bug makes it into production. A 2008 research study by IBM estimates that a bug caught in production could cost 6 times as much as if it was caught during implementation.</p>"},{"location":"automated-testing/unit-testing/why-unit-tests/#increase-developer-confidence","title":"Increase Developer Confidence","text":"<p>Many changes that developers make are not big features or something that requires an entire testing suite. A strong unit test suite helps increase the confidence of the developer that their change is not going to cause any downstream bugs. Having unit tests also helps with making safe, mechanical refactors that are provably safe; using things like refactoring tools to do mechanical refactoring and running unit tests that cover the refactored code should be enough to increase confidence in the commit.</p>"},{"location":"automated-testing/unit-testing/why-unit-tests/#speed-up-development","title":"Speed Up Development","text":"<p>Unit tests take time to write, but they also speed up development? While this may seem like an oxymoron, it is one of the strengths of a unit testing suite - over time it continues to grow and evolve until the tests become an essential part of the developer workflow.</p> <p>If the only testing available to a developer is a long-running system test, integration tests that require a deployment, or manual testing, it will increase the amount of time taken to write a feature. These types of tests should be a part of the \"Outer loop\"; tests that may take some time to run and validate more than just the code you are writing. Usually these types of outer loop tests get run at the PR stage or even later during merges into branches.</p> <p>The Developer Inner Loop is the process that developers go through as they are authoring code. This varies from developer to developer and language to language but typically is something like code -&gt; build -&gt; run -&gt; repeat. When unit tests are inserted into the inner loop, developers can get early feedback and results from the code they are writing. Since unit tests execute really quickly, running tests shouldn't be seen as a barrier to entry for this loop. Tooling such as Visual Studio Live Unit Testing also help to shorten the inner loop even more.</p>"},{"location":"automated-testing/unit-testing/why-unit-tests/#documentation-as-code","title":"Documentation as Code","text":"<p>Writing unit tests is a great way to show how the units of code you are writing are supposed to be used. In some ways, unit tests are better than any documentation or samples because they are (or at least should be) executed with every build so there is confidence that they are not out of date. Unit tests also should be so simple that they are easy to follow.</p>"},{"location":"code-reviews/","title":"Code Reviews","text":"<p>Developers working on projects should conduct peer code reviews on every pull request (or check-in to a shared branch).</p>"},{"location":"code-reviews/#goals","title":"Goals","text":"<p>Code review is a way to have a conversation about the code where participants will:</p> <ul> <li>Improve code quality by identifying and removing defects before they can be introduced into shared code branches.</li> <li>Learn and grow by having others review the code, we get exposed to unfamiliar design patterns or languages among other topics, and even break some bad habits.</li> <li>Shared understanding between the developers over the project's code.</li> </ul>"},{"location":"code-reviews/#resources","title":"Resources","text":"<ul> <li>Code review tools</li> <li>Google's Engineering Practices documentation: How to do a code review</li> <li>Best Kept Secrets of Peer Code Review</li> </ul>"},{"location":"code-reviews/faq/","title":"FAQ","text":"<p>This is a list of questions / frequently occurring issues when working with code reviews and answers how you can possibly tackle them.</p>"},{"location":"code-reviews/faq/#what-makes-a-code-review-different-from-a-pr","title":"What Makes a Code Review Different from a PR?","text":"<p>A pull request (PR) is a way to notify a task is finished and ready to be merged into the main working branch (source of truth). A code review is having someone go over the code in a PR and validate it before it is merged, but, in general, code reviews can take place outside PRs too.</p> Code Review Pull Request Source code focused Intended to enhance and enable code reviews. Includes both source code but can have a broader scope (e.g., docs, integration tests, compiles) Intended for early feedback before submitting a PR Not intended for early feedback. Created when author is ready to merge Usually a synchronous review with faster feedback cycles (draft PRs as an exception). Examples: scheduled meetings, over-the-shoulder review, pair programming Usually a tool assisted asynchronous review but can be elevated to a synchronous meeting when needed"},{"location":"code-reviews/faq/#why-do-we-need-code-reviews","title":"Why do we Need Code Reviews?","text":"<p>Our peer code reviews are structured around best practices, to find specific kinds of errors. Much like you would still run a linter over mobbed code, you would still ask someone to make the last pass to make sure the code conforms to expected standards and avoids common pitfalls.</p>"},{"location":"code-reviews/faq/#prs-are-too-large-how-can-we-fix-this","title":"PRs are Too Large, How can we Fix This?","text":"<p>Make sure you size the work items into small clear chunks, so the reviewer will be able to understand the code on their own. The team is instructed to commit early, before the full product backlog item / user story is complete, but rather when an individual item is done. If the work would result in an incomplete feature, make sure it can be turned off, until the full feature is delivered. More information can be found in Pull Requests - Size Guidance.</p>"},{"location":"code-reviews/faq/#how-can-we-expedite-code-reviews","title":"How can we Expedite Code Reviews?","text":"<p>Slow code reviews might cause delays in delivering features and cause frustration amongst team members.</p>"},{"location":"code-reviews/faq/#possible-actions-you-can-take","title":"Possible Actions you can Take","text":"<ul> <li>Add a rule for PR turnaround time to your work agreement.</li> <li>Set up a slot after the standup to go through pending PRs and assign the ones that are inactive.</li> <li>Dedicate a PR review manager who will be responsible to keep things flowing by assigning or notifying people when PR got stale.</li> <li>Use tools to better indicate stale reviews - Customize ADO - Task Boards.</li> </ul>"},{"location":"code-reviews/faq/#which-tools-can-i-use-to-review-a-complex-pr","title":"Which Tools can I use to Review a Complex PR?","text":"<p>Checkout the Tools for help on how to perform reviews out of Visual Studio or Visual Studio Code.</p>"},{"location":"code-reviews/faq/#how-can-we-enforce-the-code-review-policies","title":"How can we Enforce the Code Review Policies?","text":"<p>By configuring Branch Policies , you can easily enforce code reviews rules.</p>"},{"location":"code-reviews/faq/#we-pair-or-mob-how-should-this-reflect-in-our-code-reviews","title":"We Pair or Mob. How Should This Reflect in our Code Reviews?","text":"<p>There are two ways to perform a code review:</p> <ol> <li>Pair - Someone outside the pair should perform the code review. One of the other major benefits of code reviews is spreading knowledge about the code base to other members of the team that don't usually work in the part of the codebase under review.</li> <li>Mob - A member of the mob who spent less (or no) time at the keyboard should perform the code review.</li> </ol>"},{"location":"code-reviews/inclusion-in-code-review/","title":"Inclusion in Code Review","text":"<p>Below are some points which emphasize why inclusivity in code reviews is important:</p> <ul> <li>Code reviews are an important part of our job as software professionals.</li> <li>In ISE we work with cross cultural teams from across the globe.</li> <li>How we communicate affects team morale.</li> <li>Inclusive code reviews welcome new developers and make them comfortable with the team.</li> <li>Rude or personal attacks doing code reviews alienate - people can unknowingly make rude comments when reviewing pull requests (PRs).</li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#types-and-examples-of-non-inclusive-code-review-behavior","title":"Types and Examples of Non-Inclusive Code Review Behavior","text":"<ul> <li>Inequitable review assignments.<ul> <li>Example: Assigning most reviews to few people and dismissing some members of the team altogether.</li> </ul> </li> <li>Negative interpersonal interactions.<ul> <li>Example: Long arguments over subjective topics such as code style.</li> </ul> </li> <li>Biased decision making.<ul> <li>Example: Comments about the developer and not the code. Assuming code from developer X will always be good and hence not reviewing it properly and vice versa.</li> </ul> </li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#examples-of-inclusive-code-reviews","title":"Examples of Inclusive Code Reviews","text":"<ul> <li>Anyone and everyone in the team should be assigned PRs to review.</li> <li>Reviewer should be clear about what is an opinion, their personal preference, best practice or a fact. Arguments over personal preferences and opinions are mostly avoidable.</li> <li>Using inclusive language and tone in the code review comments. For example, being suggestive rather being prescriptive in the review comments is a good way to get the point across the table.</li> <li>It's a good practice for the author of a PR to thank the reviewer for the review, when they have contributed in improving the code or you have learnt something new.</li> <li>Using the sandwich method for recommending a code change to a new developer or a new customer: Sandwich the suggestion between 2 compliments. For example: \"Great work so far, but I would recommend a few changes here. Btw, I loved the use of XYZ here, nice job!\"</li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#guidelines-for-the-author","title":"Guidelines for the Author","text":"<ul> <li>Aim to write a code that is easy to read, review and maintain.</li> <li>It\u2019s important to ensure that whoever is looking at the code, whether that be the reviewer or a future engineer, can understand the motivations and how your code achieves its goals.</li> <li>Proactively asking for targeted help or feedback.</li> <li>Respond clearly to questions asked by the reviewers.</li> <li>Avoid huge commits by submitting incremental changes. Commits which are large and contain changes to multiple files will lead to unfair review of the code. Biased behavior of reviewers may kick in while reviewing such PRs. For e.g. a huge commit from a senior developer may get approved without thorough review whereas a huge commit from a junior developer may never get reviewed and approved.</li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#guidelines-for-the-reviewer","title":"Guidelines for the Reviewer","text":"<ul> <li>Assume positive intent from the author.</li> <li>Write clear and elaborate comments.</li> <li>Identify subjectivity, choice of coding and best practice. It is good to discuss coding style and subjective coding choices in some other forum and not in the PR. A PR should not become a ground to discuss subjective coding choices and having long arguments over it.</li> <li>If you do not understand the code properly, refrain from commenting e.g., \"This code is incomprehensible\". It is better to have a call with the author and get a basic understanding of their work.</li> <li>Be suggestive and not prescriptive. A reviewer should suggest changes and not prescribe changes, let the author decide if they really want to accept the changes proposed.</li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#culture-and-code-reviews","title":"Culture and Code Reviews","text":"<p>We in ISE, may come across situations in which code reviews are not ideal and often we are observing non inclusive code review behaviors. Its important to be aware of the fact that culture and communication style of a particular geography also influences how people interact over pull requests. In such cases, assuming positive intent of the author and reviewer is a good start to start analyzing quality of code reviews.</p>"},{"location":"code-reviews/inclusion-in-code-review/#dealing-with-the-impostor-phenomenon","title":"Dealing with the Impostor Phenomenon","text":"<p>Impostor phenomenon is a psychological pattern in which an individual doubts their skills, talents, or accomplishments and has a persistent internalized fear of being exposed as a \"fraud\" - Wikipedia.</p> <p>Someone experiencing impostor phenomenon may find submitting code for a review particularly stressful. It is important to realize that everybody can have meaningful contributions and not to let the perceived weaknesses prevent contributions.</p> <p>Some tips for overcoming the impostor phenomenon for authors:</p> <ul> <li>Review the guidelines highlighted above and make sure your code change adhere to them.</li> <li>Ask for help from a colleague - pair program with an experienced colleague that you can learn from.</li> </ul> <p>Some tips for overcoming the impostor phenomenon for reviewers:</p> <ul> <li>Anyone can have valuable insights.</li> <li>A fresh new pair of eyes are always welcome.</li> <li>Study the review until you have clearly understood it, check the corner cases and look for ways to improve it.</li> <li>If something is not clear, a simple specific question should be asked.</li> <li>If you have learnt something, you can always compliment the author.</li> <li>If possible, pair with someone to review the code so that you can establish a personal connection and have a more profound discussion about the code.</li> </ul>"},{"location":"code-reviews/inclusion-in-code-review/#tools","title":"Tools","text":"<p>Below are some tools which may help in establishing inclusive code review culture within our teams.</p> <ul> <li>Anonymous GitHub</li> <li>Blind Code Reviews</li> <li>Gitmask</li> <li>inclusivelint</li> </ul>"},{"location":"code-reviews/pull-request-template/","title":"Pull Request Template","text":"<pre><code># [Work Item ID](./link-to-the-work-item)\n\nFor more information about how to contribute to this repo, visit this [page](https://github.com/microsoft/code-with-engineering-playbook/blob/main/CONTRIBUTING.md)\n\n## Description\n\n---\n\n&gt; Should include a concise description of the changes (bug or feature), it's impact, along with a summary of the solution\n\n## Steps to Reproduce Bug and Validate Solution\n\n---\n&gt; Only applicable if the work is to address a bug. Please remove this section if the work is for a feature or story\n&gt; Provide details on the environment the bug is found, and detailed steps to recreate the bug.\n&gt; This should be detailed enough for a team member to confirm that the bug no longer occurs\n\n## PR Checklist\n\n---\n\n&gt; Use the check-list below to ensure your branch is ready for PR.  If the item is not applicable, leave it blank.\n\n- [ ] I have updated the documentation accordingly.\n- [ ] I have added tests to cover my changes.\n- [ ] All new and existing tests passed.\n- [ ] My code follows the code style of this project.\n- [ ] I ran the lint checks which produced no new errors nor warnings for my changes.\n- [ ] I have checked to ensure there aren't other open Pull Requests for the same update/change.\n\n## Does This Introduce a Breaking Change?\n\n---\n\n- [ ] Yes\n- [ ] No\n\n&gt; If this introduces a breaking change, please describe the impact and migration path for existing applications below.\n\n## Testing\n\n---\n\n&gt; - Instructions for testing and validation of your code:\n&gt;   - What OS was used for testing.\n&gt;   - Which test sets were used.\n&gt;   - Description of test scenarios that you have tried.\n\n## Any Relevant Logs or Outputs\n\n---\n\n&gt; - Use this section to attach pictures that demonstrates your changes working / healthy\n&gt; - If you are printing something show a screenshot\n&gt; - When you want to share long logs upload to:\n&gt;  `(StorageAccount)/pr-support/attachments/(PR Number)/(yourFiles) using [Azure Storage Explorer](https://azure.microsoft.com/en-us/features/storage-explorer/)` or [portal.azure.com](https://portal.azure.com) and insert the link here.\n\n## Other Information or Known Dependencies\n\n---\n\n&gt; - Any other information or known dependencies that is important to this PR.\n&gt; - TODO that are to be done after this PR.\n</code></pre>"},{"location":"code-reviews/pull-requests/","title":"Pull Requests","text":"<p>Changes to any main codebase - main branch in Git repository, for example - must be done using pull requests (PR).</p> <p>Pull requests enable:</p> <ul> <li>Code inspection - see Code Reviews</li> <li>Running automated qualification of the code<ul> <li>Linters</li> <li>Compilation</li> <li>Unit tests</li> <li>Integration tests etc.</li> </ul> </li> </ul> <p>The requirements of pull requests can and should be enforced by policies, which can be set in the most modern version control and work item tracking systems. See Evidence and Measures section for more information.</p>"},{"location":"code-reviews/pull-requests/#general-process","title":"General Process","text":"<ol> <li>Implement changes based on the well-defined description and acceptance criteria of the task at hand</li> <li>Then, before creating a new pull request:     * Make sure the code conforms with the agreed coding conventions         * This can be partially automated using linters     * Ensure the code compiles and runs without errors or warnings     * Write and/or update tests to cover the changes and make sure all new and existing tests pass     * Write and/or update the documentation to match the changes</li> <li>Once convinced the criteria above are met, create and submit a new pull request adhering to the pull request template</li> <li>Follow the code review process to merge the changes to the main codebase</li> </ol> <p>The following diagram illustrates this approach.</p> <pre><code>sequenceDiagram\nNew branch-&gt;&gt;+Pull request: New PR creation\nPull request-&gt;&gt;+Code review: Review process\nCode review-&gt;&gt;+Pull request: Code updates\nPull request-&gt;&gt;+New branch: Merge Pull Request\nPull request--&gt;&gt;-New branch: Delete branch\nPull request -&gt;&gt;+ Main branch: Merge after completion\nNew branch-&gt;&gt;+Main branch: Goal of the Pull request\n</code></pre>"},{"location":"code-reviews/pull-requests/#size-guidance","title":"Size Guidance","text":"<p>We should always aim to keep pull requests small. Small PRs have multiple advantages:</p> <ul> <li>They are easier to review; a clear benefit for the reviewers.</li> <li>They are easier to deploy; this is aligned with the strategy of release fast and release often.</li> <li>Minimizes possible conflicts and stale PRs.</li> </ul> <p>However, we should keep PRs focused - for example around a functional feature, optimization or code readability and avoid having PRs that include code that is without context or loosely coupled. There is no right size, but keep in mind that a code review is a collaborative process, a big PRs could be difficult and therefore slower to review. We should always strive to have as small PRs as possible that still add value.</p>"},{"location":"code-reviews/pull-requests/#best-practices","title":"Best Practices","text":"<p>Beyond the size, remember that every PR should:</p> <ul> <li>be consistent,</li> <li>not break the build, and</li> <li>include related tests as part of the PR.</li> </ul> <p>Be consistent means that all the changes included on the PR should aim to solve one goal (ex. one user story) and be intrinsically related. Think of this as the Single-responsibility principle in terms of the whole project, the PR should have only one reason to change the project.</p> <p>Start small, it is easier to create a small PR from the start than to break up a bigger one.</p> <p>These are some strategies to keep PRs small depending on the \"cause\" of the inevitability, you could break the PR into self-container changes which still add value, release features that are hidden (see feature flag, feature toggling or canary releases) or break the PR into different layers (for example using design patterns like MVC or Observer/Subject). No matter the strategy.</p>"},{"location":"code-reviews/pull-requests/#pull-request-description","title":"Pull Request Description","text":"<p>Well written PR descriptions helps maintain a clean, well-structured change history. While every team need not conform to the same specification, it is important that the convention is agreed upon at the start of the project.</p> <p>One popular specification for open-source projects and others is the Conventional Commits specification, which is structured as:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>The <code>&lt;type&gt;</code> in this message can be selected from a list of types defined by the team, but many projects use the list of commit types from the Angular open-source project. It should be clear that <code>scope</code>, <code>body</code> and <code>footer</code> elements are optional, but having a required <code>type</code> and short description enables the features mentioned above.</p> <p>See also Pull Request Template</p>"},{"location":"code-reviews/pull-requests/#resources","title":"Resources","text":"<ul> <li>Writing a great pull request description</li> <li>Review code-with pull requests (Azure DevOps)</li> <li>Collaborating with issues and pull requests (GitHub)</li> <li>Google approach to PR size</li> <li>Feature Flags</li> <li>Facebook approach to hidden features</li> <li>Conventional Commits specification</li> <li>Angular Commit types</li> </ul>"},{"location":"code-reviews/tools/","title":"Code Review Tools","text":""},{"location":"code-reviews/tools/#customize-ado","title":"Customize ADO","text":""},{"location":"code-reviews/tools/#task-boards","title":"Task Boards","text":"<ul> <li>AzDO: Customize cards</li> <li>AzDO: Add columns on task board</li> </ul>"},{"location":"code-reviews/tools/#reviewer-policies","title":"Reviewer Policies","text":"<ul> <li>Setting required reviewer group in AzDO - Automatically include code reviewers</li> </ul>"},{"location":"code-reviews/tools/#configuring-branch-policies","title":"Configuring Branch Policies","text":"<ol> <li>AzDO: Configure branch policies</li> <li>AzDO: Configuring branch policies with the CLI tool:<ol> <li>Create a policy configuration file</li> <li>Approval count policy</li> </ol> </li> <li>GitHub: Configuring protected branches</li> </ol>"},{"location":"code-reviews/tools/#vscode","title":"VSCode","text":""},{"location":"code-reviews/tools/#github-github-pull-requests","title":"GitHub: GitHub Pull Requests","text":"<p>Supports processing GitHub pull requests inside VS Code.</p> <ol> <li>Open the plugin from the Activity Bar</li> <li>Select Assigned To Me</li> <li>Select a PR</li> <li>Under Description you can choose to Check Out the branch and get into Review Mode and get a more integrated experience</li> </ol>"},{"location":"code-reviews/tools/#azure-devops-azure-devops-pull-requests","title":"Azure DevOps: Azure DevOps Pull Requests","text":"<p>Supports processing Azure DevOps pull requests inside VS Code.</p> <ol> <li>Open the plugin from the Activity Bar</li> <li>Select Assigned To Me</li> <li>Select a PR</li> <li>Under Description you can choose to Check Out the branch and get into Review Mode and get a more integrated experience</li> </ol>"},{"location":"code-reviews/tools/#visual-studio","title":"Visual Studio","text":"<p>The following extensions can be used to create an integrated code review experience in Visual Studio working with either GitHub or Azure DevOps.</p>"},{"location":"code-reviews/tools/#github-github-extension-for-visual-studio","title":"GitHub: GitHub Extension for Visual Studio","text":"<p>Provides extended functionality for working with pull requests on GitHub directly out of Visual Studio.</p> <ol> <li>View -&gt; Other Windows -&gt; GitHub</li> <li>Click on the Pull Requests icon in the task bar</li> <li>Double click on a pending pull request</li> </ol>"},{"location":"code-reviews/tools/#azure-devops-pull-requests-for-visual-studio","title":"Azure DevOps: Pull Requests for Visual Studio","text":"<p>Work with pull requests on Azure DevOps directly out of Visual Studio.</p> <ol> <li>Open Team Explorer</li> <li>Click on Pull Requests</li> <li>Double-click a pull request - the Pull Request Details open</li> <li>Click on Checkout if you want to have the full change locally and have a more integrated experience</li> <li>Go through the changes and make comments</li> </ol>"},{"location":"code-reviews/tools/#web","title":"Web","text":""},{"location":"code-reviews/tools/#reviewable-seamless-multi-round-github-reviews","title":"Reviewable: Seamless multi-round GitHub reviews","text":"<p>Supports multi-round GitHub code reviews, with keyboard shortcuts and more. VS Code extension is in-progress.</p> <ol> <li>Visit the Review Dashboard to see reviews awaiting your action, that have new comments for you, and more.</li> <li>Select a Pull Request from that list.</li> <li>Open any file in your browser, in Visual Studio Code, or any editor you've configured by clicking on your profile photo in the top-right</li> <li>Select an editor under \"External editor link template\". VS Code is an option, but so is any editor that supports URI's.</li> <li>Review the diff on an overall or per-file basis, leaving comments, code suggestions, and more</li> </ol>"},{"location":"code-reviews/evidence-and-measures/","title":"Evidence and Measures","text":""},{"location":"code-reviews/evidence-and-measures/#evidence","title":"Evidence","text":"<p>Many of the code quality assurance items can be automated or enforced by policies in modern version control and work item tracking systems. Verification of the policies on the main branch in Azure DevOps (AzDO) or GitHub, for example, may be sufficient evidence that a project team is conducting code reviews.</p> <ul> <li> The main branches in all repositories have branch policies. - Configure branch policies</li> <li> All builds produced out of project repositories include appropriate linters, run unit tests.</li> <li> Every bug work item should include a link to the pull request that introduced it, once the error has been diagnosed. This helps with learning.</li> <li> Each bug work item should include a note on how the bug might (or might not have) been caught in a code review.</li> <li> The project team regularly updates their code review checklists to reflect common issues they have encountered.</li> <li> Dev Leads should review a sample of pull requests and/or be co-reviewers with other developers to help everyone improve their skills as code reviewers.</li> </ul>"},{"location":"code-reviews/evidence-and-measures/#measures","title":"Measures","text":"<p>The team can collect metrics of code reviews to measure their efficiency. Some useful metrics include:</p> <ul> <li>Defect Removal Efficiency (DRE) - a measure of the development team's ability to remove defects prior to release</li> <li>Time metrics:<ul> <li>Time used preparing for code inspection sessions</li> <li>Time used in review sessions</li> </ul> </li> <li>Lines of code (LOC) inspected per time unit/meeting</li> </ul> <p>It is a perfectly reasonable solution to track these metrics manually e.g. in an Excel sheet. It is also possible to utilize the features of project management platforms - for example, AzDO enables dashboards for metrics including tracking bugs. You may find ready-made plugins for various platforms - see GitHub Marketplace for instance - or you can choose to implement these features yourself.</p> <p>Remember that since defects removed thanks to reviews is far less costly compared to finding them in production, the cost of doing code reviews is actually negative!</p>"},{"location":"code-reviews/evidence-and-measures/#resources","title":"Resources","text":"<ul> <li>A Guide to Code Inspections</li> </ul>"},{"location":"code-reviews/process-guidance/","title":"Process Guidance","text":""},{"location":"code-reviews/process-guidance/#general-guidance","title":"General Guidance","text":"<p>Code reviews should be part of the software engineering team process regardless of the development model. Furthermore, the team should learn to execute reviews in a timely manner. Pull requests (PRs) left hanging can cause additional merge problems and go stale resulting in lost work. Qualified PRs are expected to reflect well-defined, concise tasks, and thus be compact in content. Reviewing a single task should then take relatively little time to complete.</p> <p>To ensure that the code review process is healthy, inclusive and meets the goals stated above, consider following these guidelines:</p> <ul> <li>Establish a service-level agreement (SLA) for code reviews and add it to your teams working agreement.</li> <li>Although modern DevOps environments incorporate tools for managing PRs, it can be useful to label tasks pending for review or to have a dedicated place for them on the task board - Customize AzDO task boards</li> <li>In the daily standup meeting check tasks pending for review and make sure they have reviewers assigned.</li> <li>Junior teams and teams new to the process can consider creating separate tasks for reviews together with the tasks themselves.</li> <li>Utilize tools to streamline the review process - Code review tools</li> <li>Foster inclusive code reviews - Inclusion in Code Review</li> </ul>"},{"location":"code-reviews/process-guidance/#measuring-code-review-process","title":"Measuring Code Review Process","text":"<p>If the team is finding that code reviews are taking a significant time to merge, and it is becoming a blocker, consider the following additional recommendations:</p> <ol> <li>Measure the average time it takes to merge a PR per sprint cycle.</li> <li>Review during retrospective how the time to merge can be improved and prioritized.</li> <li>Assess the time to merge across sprints to see if the process is improving.</li> <li>Ping required approvers directly as a reminder.</li> </ol>"},{"location":"code-reviews/process-guidance/#code-reviews-shouldnt-include-too-many-lines-of-code","title":"Code Reviews Shouldn't Include too Many Lines of Code","text":"<p>It's easy to say a developer can review few hundred lines of code, but when the code surpasses certain amount of lines, the effectiveness of defects discovery will decrease and there is a lesser chance of doing a good review. It's not a matter of setting a code line limit, but rather using common sense. More code there is to review, the higher chances there are letting a bug sneak through. See PR size guidance.</p>"},{"location":"code-reviews/process-guidance/#automate-whenever-reasonable","title":"Automate Whenever Reasonable","text":"<p>Use automation (linting, code analysis etc.) to avoid the need for \"nits\" and allow the reviewer to focus more on the functional aspects of the PR. By configuring automated builds, tests and checks (something achievable in the CI process), teams can save human reviewers some time and let them focus in areas like design and functionality for proper evaluation. This will ensure higher chances of success as the team is focusing on the things that matter.</p>"},{"location":"code-reviews/process-guidance/#role-specific-guidance","title":"Role specific guidance","text":"<ul> <li>Author Guidance</li> <li>Reviewer Guidance</li> </ul>"},{"location":"code-reviews/process-guidance/author-guidance/","title":"Author Guidance","text":""},{"location":"code-reviews/process-guidance/author-guidance/#properly-describe-your-pull-request-pr","title":"Properly Describe Your Pull Request (PR)","text":"<ul> <li>Give the PR a descriptive title, so that other members can easily (in one short sentence) understand what a PR is about.</li> <li>Every PR should have a proper description, that shows the reviewer what has been changed and why.</li> </ul>"},{"location":"code-reviews/process-guidance/author-guidance/#add-relevant-reviewers","title":"Add Relevant Reviewers","text":"<ul> <li>Add one or more reviewers (depending on your project's guidelines) to the PR. Ideally, you would add at least someone who has expertise and is familiar with the project, or the language used</li> <li>Adding someone less familiar with the project or the language can aid in verifying the changes are understandable, easy to read, and increases the expertise within the team</li> <li>In ISE code-with projects with a customer team, it is important to include reviewers from both organizations for knowledge transfer - Customize Reviewers Policy</li> </ul>"},{"location":"code-reviews/process-guidance/author-guidance/#be-open-to-receive-feedback","title":"Be Open to Receive Feedback","text":"<p>Discuss design/code logic and address all comments as follows:</p> <ul> <li>Resolve a comment, if the requested change has been made.</li> <li>Mark the comment as \"won't fix\", if you are not going to make the requested changes and provide a clear reasoning<ul> <li>If the requested change is within the scope of the task, \"I'll do it later\" is not an acceptable reason!</li> <li>If the requested change is out of scope, create a new work item (task or bug) for it</li> </ul> </li> <li>If you don't understand a comment, ask questions in the review itself as opposed to a private chat</li> <li>If a thread gets bloated without a conclusion, have a meeting with the reviewer (call them or knock on door)</li> </ul>"},{"location":"code-reviews/process-guidance/author-guidance/#use-checklists","title":"Use Checklists","text":"<p>When creating a PR, it is a good idea to add a checklist of objectives of the PR in the description. This helps the reviewers to focus on the key areas of the code changes.</p>"},{"location":"code-reviews/process-guidance/author-guidance/#link-a-task-to-your-pr","title":"Link a Task to Your PR","text":"<p>Link the corresponding work items/tasks to the PR. There is no need to duplicate information between the work item and the PR, but if some details are missing in either one, together they provide more context to the reviewer.</p>"},{"location":"code-reviews/process-guidance/author-guidance/#code-should-have-annotations-before-the-review","title":"Code Should Have Annotations Before the Review","text":"<p>If you can't avoid large PRs, include explanations of the changes in order to make it easier for the reviewer to review the code, with clear comments the reviewer can identify the goal of every code block.</p>"},{"location":"code-reviews/process-guidance/reviewer-guidance/","title":"Reviewer Guidance","text":"<p>Since parts of reviews can be automated via linters and such, human reviewers can focus on architectural and functional correctness. Human reviewers should focus on:</p> <ul> <li>The correctness of the business logic embodied in the code.</li> <li>The correctness of any new or changed tests.</li> <li>The \"readability\" and maintainability of the overall design decisions reflected in the code.</li> <li>The checklist of common errors that the team maintains for each programming language.</li> </ul> <p>Code reviews should use the below guidance and checklists to ensure positive and effective code reviews.</p>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#general-guidance","title":"General Guidance","text":""},{"location":"code-reviews/process-guidance/reviewer-guidance/#understand-the-code-you-are-reviewing","title":"Understand the Code You are Reviewing","text":"<ul> <li>Read every line changed.</li> <li>If we have a stakeholder review, it\u2019s not necessary to run the PR unless it aids your understanding of the code.</li> <li>AzDO orders the files for you, but you should read the code in some logical sequence to aid understanding.</li> <li>If you don\u2019t fully understand a change in a file because you don\u2019t have context, click to view the whole file and read through the surrounding code or checkout the changes and view them in IDE.</li> <li>Ask the author to clarify.</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#take-your-time-and-keep-focus-on-scope","title":"Take Your Time and Keep Focus on Scope","text":"<p>You shouldn't review code hastily but neither take too long in one sitting. If you have many pull requests (PRs) to review or if the complexity of code is demanding, the recommendation is to take a break between the reviews to recover and focus on the ones you are most experienced with.</p> <p>Always remember that a goal of a code review is to verify that the goals of the corresponding task have been achieved. If you have concerns about the related, adjacent code that isn't in the scope of the PR, address those as separate tasks (e.g., bugs, technical debt). Don't block the current PR due to issues that are out of scope.</p>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#foster-a-positive-code-review-culture","title":"Foster a Positive Code Review Culture","text":"<p>Code reviews play a critical role in product quality and it should not represent an arena for long discussions or even worse a battle of egos. What matters is a bug caught, not who made it, not who found it, not who fixed it. The only thing that matters is having the best possible product.</p>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#be-considerate","title":"Be Considerate","text":"<ul> <li>Be positive \u2013 encouraging, appreciation for good practices.</li> <li>Prefix a \u201cpoint of polish\u201d with \u201cNit:\u201d.</li> <li>Avoid language that points fingers like \u201cyou\u201d but rather use \u201cwe\u201d or \u201cthis line\u201d -- code reviews are not personal and language matters.</li> <li>Prefer asking questions above making statements. There might be a good reason for the author to do something.</li> <li>If you make a direct comment, explain why the code needs to be changed, preferably with an example.</li> <li>Talking about changes, you can suggest changes to a PR by using the suggestion feature (available in GitHub and Azure DevOps) or by creating a PR to the author branch.</li> <li>If a few back-and-forth comments don't resolve a disagreement, have a quick talk with each other (in-person or call) or create a group discussion this can lead to an array of improvements for upcoming PRs. Don't forget to update the PR with what you agreed on and why.</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#first-design-pass","title":"First Design Pass","text":""},{"location":"code-reviews/process-guidance/reviewer-guidance/#pull-request-overview","title":"Pull Request Overview","text":"<ul> <li>Does the PR description make sense?</li> <li>Do all the changes logically fit in this PR, or are there unrelated changes?</li> <li>If necessary, are the changes made reflected in updates to the README or other docs? Especially if the changes affect how the user builds code.</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#user-facing-changes","title":"User Facing Changes","text":"<ul> <li>If the code involves a user-facing change, is there a GIF/photo that explains the functionality? If not, it might be key to validate the PR to ensure the change does what is expected.</li> <li>Ensure UI changes look good without unexpected behavior.</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#design","title":"Design","text":"<ul> <li>Do the interactions of the various pieces of code in the PR make sense?</li> <li>Does the code recognize and incorporate architectures and coding patterns?</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#code-quality-pass","title":"Code Quality Pass","text":""},{"location":"code-reviews/process-guidance/reviewer-guidance/#complexity","title":"Complexity","text":"<ul> <li>Are functions too complex?</li> <li>Is the single responsibility principle followed? Function or class should do one \u2018thing\u2019.</li> <li>Should a function be broken into multiple functions?</li> <li>If a method has greater than 3 arguments, it is potentially overly complex.</li> <li>Does the code add functionality that isn\u2019t needed?</li> <li>Can the code be understood easily by code readers?</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#namingreadability","title":"Naming/Readability","text":"<ul> <li>Did the developer pick good names for functions, variables, etc?</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#error-handling","title":"Error Handling","text":"<ul> <li>Are errors handled gracefully and explicitly where necessary?</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#functionality","title":"Functionality","text":"<ul> <li>Is there parallel programming in this PR that could cause race conditions? Carefully read through this logic.</li> <li>Could the code be optimized? For example: are there more calls to the database than need be?</li> <li>How does the functionality fit in the bigger picture? Can it have negative effects to the overall system?</li> <li>Are there security flaws?</li> <li>Does a variable name reveal any customer specific information?</li> <li>Is PII and EUII treated correctly? Are we logging any PII information?</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#style","title":"Style","text":"<ul> <li>Are there extraneous comments? If the code isn\u2019t clear enough to explain itself, then the code should be made simpler. Comments may be there to explain why some code exists.</li> <li>Does the code adhere to the style guide/conventions that we have agreed upon? We use automated styling like black and prettier.</li> </ul>"},{"location":"code-reviews/process-guidance/reviewer-guidance/#tests","title":"Tests","text":"<ul> <li>Tests should always be committed in the same PR as the code itself (\u2018I\u2019ll add tests next\u2019 is not acceptable).</li> <li>Make sure tests are sensible and valid assumptions are made.</li> <li>Make sure edge cases are handled as well.</li> <li>Tests can be a great source to understand the changes. It can be a strategy to look at tests first to help you understand the changes better.</li> </ul>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/","title":"YAML(Azure Pipelines) Code Reviews","text":""},{"location":"code-reviews/recipes/azure-pipelines-yaml/#style-guide","title":"Style Guide","text":"<p>Developers should follow the YAML schema reference.</p>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#code-analysis-linting","title":"Code Analysis / Linting","text":"<p>The most popular YAML linter is YAML extension. This extension provides YAML validation, document outlining, auto-completion, hover support and formatter features.</p>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#vs-code-extensions","title":"VS Code Extensions","text":"<p>There is an Azure Pipelines for VS Code extension to add syntax highlighting and autocompletion for Azure Pipelines YAML to VS Code. It also helps you set up continuous build and deployment for Azure WebApps without leaving VS Code.</p>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#yaml-in-azure-pipelines-overview","title":"YAML in Azure Pipelines Overview","text":"<p>When the pipeline is triggered, before running the pipeline, there are a few phases such as Queue Time, Compile Time and Runtime where variables are interpreted by their runtime expression syntax.</p> <p>When the pipeline is triggered, all nested YAML files are expanded to run in Azure Pipelines. This checklist contains some tips and tricks for reviewing all nested YAML files.</p> <p>These documents may be useful when reviewing YAML files:</p> <ul> <li>Azure Pipelines YAML documentation.</li> <li>Pipeline run sequence</li> <li>Key concepts for new Azure Pipelines</li> </ul> <p>Key concepts overview </p> <ul> <li>A trigger tells a Pipeline to run.</li> <li>A pipeline is made up of one or more stages. A pipeline can deploy to one or more environments.</li> <li>A stage is a way of organizing jobs in a pipeline and each stage can have one or more jobs.</li> <li>Each job runs on one agent. A job can also be agentless.</li> <li>Each agent runs a job that contains one or more steps.</li> <li>A step can be a task or script and is the smallest building block of a pipeline.</li> <li>A task is a pre-packaged script that performs an action, such as invoking a REST API or publishing a build artifact.</li> <li>An artifact is a collection of files or packages published by a run.</li> </ul>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these Azure Pipelines YAML specific code review items.</p>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#pipeline-structure","title":"Pipeline Structure","text":"<ul> <li> The steps are well understood and components are easily identifiable. Ensure that there is a proper description <code>displayName:</code> for every step in the pipeline.</li> <li> Steps/stages of the pipeline are checked in Azure Pipelines to have more understanding of components.</li> <li> In case you have complex nested YAML files, The pipeline in Azure Pipelines is edited to find trigger root file.</li> <li> All the template file references are visited to ensure a small change does not cause breaking changes, changing one file may affect multiple pipelines</li> <li> Long inline scripts in YAML file are moved into script files</li> </ul>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#yaml-structure","title":"YAML Structure","text":"<ul> <li> Re-usable components are split into separate YAML templates.</li> <li> Variables are separated per environment stored in templates or variable groups.</li> <li> Variable value changes in <code>Queue Time</code>, <code>Compile Time</code> and <code>Runtime</code> are considered.</li> <li> Variable syntax values used with <code>Macro Syntax</code>, <code>Template Expression Syntax</code> and <code>Runtime Expression Syntax</code> are considered.</li> <li> Variables can change during the pipeline, Parameters cannot.</li> <li> Unused variables/parameters are removed in pipeline.</li> <li> Does the pipeline meet with stage/job <code>Conditions</code> criteria?</li> </ul>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#permission-check-security","title":"Permission Check &amp; Security","text":"<ul> <li> Secret values shouldn't be printed in pipeline, <code>issecret</code> is used for printing secrets for debugging</li> <li> If pipeline is using variable groups in Library, ensure pipeline has access to the variable groups created.</li> <li> If pipeline has a remote task in other repo/organization, does it have access?</li> <li> If pipeline is trying to access a secure file, does it have the permission?</li> <li> If pipeline requires approval for environment deployments, Who is the approver?</li> <li> Does it need to keep secrets and manage them, did you consider using Azure KeyVault?</li> </ul>"},{"location":"code-reviews/recipes/azure-pipelines-yaml/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ul> <li>Consider Variable Syntax with Runtime Expressions in the pipeline. Here is a nice sample to understand Expansion of variables.</li> </ul> <ul> <li> <p>When we assign variable like below it won't set during initialize time, it'll assign during runtime, then we can retrieve some errors based on when template runs.</p> <pre><code>- task: AzureWebApp@1\n  displayName: 'Deploy Azure Web App : $(webAppName)'\n  inputs:\n    azureSubscription: '$(azureServiceConnectionId)'\n    appName: '$(webAppName)'\n    package: $(Pipeline.Workspace)/drop/Application$(Build.BuildId).zip\n    startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app'\n</code></pre> <p>Error:</p> <p></p> <p>After passing these variables as parameter, it loads values properly.</p> <pre><code>  - template: steps-deployment.yaml\n    parameters:\n      azureServiceConnectionId: ${{ variables.azureServiceConnectionId  }}\n      webAppName: ${{ variables.webAppName  }}\n</code></pre> <pre><code>- task: AzureWebApp@1\n  displayName: 'Deploy Azure Web App :${{ parameters.webAppName }}'\n  inputs:\n    azureSubscription: '${{ parameters.azureServiceConnectionId }}'\n    appName: '${{ parameters.webAppName }}'\n    package: $(Pipeline.Workspace)/drop/Application$(Build.BuildId).zip\n    startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app'\n</code></pre> </li> </ul> <ul> <li> <p>Use <code>issecret</code> for printing secrets for debugging</p> <pre><code>echo \"##vso[task.setvariable variable=token;issecret=true]${token}\"\n</code></pre> </li> </ul>"},{"location":"code-reviews/recipes/bash/","title":"Bash Code Reviews","text":""},{"location":"code-reviews/recipes/bash/#style-guide","title":"Style Guide","text":"<p>Developers should follow Google's Bash Style Guide.</p>"},{"location":"code-reviews/recipes/bash/#code-analysis-linting","title":"Code Analysis / Linting","text":"<p>Projects must check bash code with shellcheck as part of the CI process. Apart from linting, shfmt can be used to automatically format shell scripts. There are few vscode code extensions which are based on shfmt like shell-format which can be used to automatically format shell scripts.</p>"},{"location":"code-reviews/recipes/bash/#project-setup","title":"Project Setup","text":""},{"location":"code-reviews/recipes/bash/#vscode-shellcheck","title":"vscode-shellcheck","text":"<p>Shellcheck extension should be used in VS Code, it provides static code analysis capabilities and auto fixing linting issues. To use vscode-shellcheck in vscode do the following:</p>"},{"location":"code-reviews/recipes/bash/#install-shellcheck-on-your-machine","title":"Install shellcheck on Your Machine","text":"<p>For macOS</p> <pre><code>brew install shellcheck\n</code></pre> <p>For Ubuntu:</p> <pre><code>apt-get install shellcheck\n</code></pre>"},{"location":"code-reviews/recipes/bash/#install-shellcheck-on-vscode","title":"Install shellcheck on VSCode","text":"<p>Find the vscode-shellcheck extension in vscode and install it.</p>"},{"location":"code-reviews/recipes/bash/#automatic-code-formatting","title":"Automatic Code Formatting","text":""},{"location":"code-reviews/recipes/bash/#shell-format","title":"shell-format","text":"<p>shell-format extension does automatic formatting of your bash scripts, docker files and several configuration files. It is dependent on shfmt which can enforce google style guide checks for bash. To use shell-format in vscode do the following:</p>"},{"location":"code-reviews/recipes/bash/#install-shfmt-on-your-machine","title":"Install shfmt on Your Machine","text":"<p>Requires Go 1.13 or Later</p> <pre><code>GO111MODULE=on go get mvdan.cc/sh/v3/cmd/shfmt\n</code></pre>"},{"location":"code-reviews/recipes/bash/#install-shell-format-on-vscode","title":"Install shell-format on VSCode","text":"<p>Find the shell-format extension in vscode and install it.</p>"},{"location":"code-reviews/recipes/bash/#build-validation","title":"Build Validation","text":"<p>To automate this process in Azure DevOps you can add the following snippet to you <code>azure-pipelines.yaml</code> file. This will lint any scripts in the <code>./scripts/</code> folder.</p> <pre><code>- bash: |\n    echo \"This checks for formatting and common bash errors. See wiki for error details and ignore options: https://github.com/koalaman/shellcheck/wiki/SC1000\"\n    export scversion=\"stable\"\n    wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz\" | tar -xJv\n    sudo mv \"shellcheck-${scversion}/shellcheck\" /usr/bin/\n    rm -r \"shellcheck-${scversion}\"\n    shellcheck ./scripts/*.sh\n  displayName: \"Validate Scripts: Shellcheck\"\n</code></pre> <p>Also, your shell scripts can be formatted in your build pipeline by using the <code>shfmt</code> tool. To integrate <code>shfmt</code> in your build pipeline do the following:</p> <pre><code>- bash: |\n    echo \"This step does auto formatting of shell scripts\"\n    shfmt -l -w ./scripts/*.sh\n  displayName: \"Format Scripts: shfmt\"\n</code></pre> <p>Unit testing using shunit2 can also be added to the build pipeline, using the following block:</p> <pre><code>- bash: |\n    echo \"This step unit tests shell scripts by using shunit2\"\n    ./shunit2\n  displayName: \"Format Scripts: shfmt\"\n</code></pre>"},{"location":"code-reviews/recipes/bash/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>All developers should run shellcheck and shfmt as pre-commit hooks.</p>"},{"location":"code-reviews/recipes/bash/#step-1-install-pre-commit","title":"Step 1- Install pre-commit","text":"<p>Run <code>pip install pre-commit</code> to install pre-commit. Alternatively you can run <code>brew install pre-commit</code> if you are using homebrew.</p>"},{"location":"code-reviews/recipes/bash/#step-2-add-shellcheck-and-shfmt","title":"Step 2- Add shellcheck and shfmt","text":"<p>Add .pre-commit-config.yaml file to root of the go project. Run shfmt on pre-commit by adding it to .pre-commit-config.yaml file like below.</p> <pre><code>-   repo: git://github.com/pecigonzalo/pre-commit-fmt\n    sha: master\n    hooks:\n      -   id: shell-fmt\n          args:\n            - --indent=4\n</code></pre> <pre><code>-   repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.7.1.1\n    hooks:\n    -   id: shellcheck\n</code></pre>"},{"location":"code-reviews/recipes/bash/#step-3","title":"Step 3","text":"<p>Run <code>$ pre-commit install</code> to set up the git hook scripts</p>"},{"location":"code-reviews/recipes/bash/#dependencies","title":"Dependencies","text":"<p>Bash scripts are often used to 'glue together' other systems and tools. As such, Bash scripts can often have numerous and/or complicated dependencies. Consider using Docker containers to ensure that scripts are executed in a portable and reproducible environment that is guaranteed to contain all the correct dependencies. To ensure that dockerized scripts are nevertheless easy to execute, consider making the use of Docker transparent to the script's caller by wrapping the script in a 'bootstrap' which checks whether the script is running in Docker and re-executes itself in Docker if it's not the case. This provides the best of both worlds: easy script execution and consistent environments.</p> <pre><code>if [[ \"${DOCKER}\" != \"true\" ]]; then\n  docker build -t my_script -f my_script.Dockerfile . &gt; /dev/null\n  docker run -e DOCKER=true my_script \"$@\"\n  exit $?\nfi\n\n# ... implementation of my_script here can assume that all of its dependencies exist since it's always running in Docker ...\n</code></pre>"},{"location":"code-reviews/recipes/bash/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these bash specific code review items</p> <ul> <li> Does this code use Built-in Shell Options like set -o, set -e, set -u for execution control of shell scripts ?</li> <li> Is the code modularized? Shell scripts can be modularized like python modules. Portions of bash scripts should be sourced in complex bash projects.</li> <li> Are all exceptions handled correctly? Exceptions should be handled correctly using exit codes or trapping signals.</li> <li> Does the code pass all linting checks as per shellcheck and unit tests as per shunit2 ?</li> <li> Does the code uses relative paths or absolute paths? Relative paths should be avoided as they are prone to environment attacks. If relative path is needed, check that the <code>PATH</code> variable is set.</li> <li> Does the code take credentials as user input? Are the credentials masked or encrypted in the script? S</li> </ul>"},{"location":"code-reviews/recipes/csharp/","title":"C# Code Reviews","text":""},{"location":"code-reviews/recipes/csharp/#style-guide","title":"Style Guide","text":"<p>Developers should follow Microsoft's C# Coding Conventions and, where applicable, Microsoft's Secure Coding Guidelines.</p>"},{"location":"code-reviews/recipes/csharp/#code-analysis-linting","title":"Code Analysis / Linting","text":"<p>We strongly believe that consistent style increases readability and maintainability of a code base. Hence, we are recommending analyzers / linters to enforce consistency and style rules.</p>"},{"location":"code-reviews/recipes/csharp/#project-setup","title":"Project Setup","text":"<p>We recommend using a common setup for your solution that you can refer to in all the projects that are part of the solution. Create a <code>common.props</code> file that contains the defaults for all of your projects:</p> <pre><code>&lt;Project&gt;\n...\n    &lt;ItemGroup&gt;\n        &lt;PackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"5.0.3\"&gt;\n          &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n          &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n        &lt;/PackageReference&gt;\n        &lt;PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.1.118\"&gt;\n          &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;\n          &lt;IncludeAssets&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;/IncludeAssets&gt;\n        &lt;/PackageReference&gt;\n    &lt;/ItemGroup&gt;\n    &lt;PropertyGroup&gt;\n        &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;\n    &lt;/PropertyGroup&gt;\n    &lt;ItemGroup Condition=\"Exists('$(MSBuildThisFileDirectory)../.editorconfig')\" &gt;\n        &lt;AdditionalFiles Include=\"$(MSBuildThisFileDirectory)../.editorconfig\" /&gt;\n    &lt;/ItemGroup&gt;\n...\n&lt;/Project&gt;\n</code></pre> <p>You can then reference the <code>common.props</code> in your other project files to ensure a consistent setup.</p> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk.Web\"&gt;\n  &lt;Import Project=\"..\\common.props\" /&gt;\n&lt;/Project&gt;\n</code></pre> <p>The .editorconfig allows for configuration and overrides of rules. You can have an .editorconfig file at project level to customize rules for different projects (test projects for example).</p> <p>Details about the configuration of different rules.</p>"},{"location":"code-reviews/recipes/csharp/#net-analyzers","title":".NET analyzers","text":"<p>Microsoft's .NET analyzers has code quality rules and .NET API usage rules implemented as analyzers using the .NET Compiler Platform (Roslyn). This is the replacement for Microsoft's legacy FxCop analyzers.</p> <p>Enable or install first-party .NET analyzers.</p> <p>If you are currently using the legacy FxCop analyzers, migrate from FxCop analyzers to .NET analyzers.</p>"},{"location":"code-reviews/recipes/csharp/#stylecop-analyzer","title":"StyleCop Analyzer","text":"<p>The StyleCop analyzer is a nuget package (StyleCop.Analyzers) that can be installed in any of your projects. It's mainly around code style rules and makes sure the team is following the same rules without having subjective discussions about braces and spaces. Detailed information can be found here: StyleCop Analyzers for the .NET Compiler Platform.</p> <p>The minimum rules set teams should adopt is the Managed Recommended Rules rule set.</p>"},{"location":"code-reviews/recipes/csharp/#automatic-code-formatting","title":"Automatic Code Formatting","text":"<p>Use .editorconfig to configure code formatting rules in your project.</p>"},{"location":"code-reviews/recipes/csharp/#build-validation","title":"Build Validation","text":"<p>It's important that you enforce your code style and rules in the CI to avoid any team member merging code that does not comply with your standards into your git repo.</p> <p>If you are using FxCop analyzers and StyleCop analyzer, it's very simple to enable those in the CI. You have to make sure you are setting up the project using nuget and .editorconfig (see Project setup). Once you have this setup, you will have to configure the pipeline to build your code. That's pretty much it. The FxCop analyzers will run and report the result in your build pipeline. If there are rules that are violated, your build will be red.</p> <pre><code>    - task: DotNetCoreCLI@2\n      displayName: 'Style Check &amp; Build'\n      inputs:\n        command: 'build'\n        projects: '**/*.csproj'\n</code></pre>"},{"location":"code-reviews/recipes/csharp/#enable-roslyn-support-in-vscode","title":"Enable Roslyn Support in VSCode","text":"<p>The above steps also work in VS Code provided you enable Roslyn support for Omnisharp. The setting is <code>omnisharp.enableRoslynAnalyzers</code> and must be set to <code>true</code>. After enabling this setting you must \"Restart Omnisharp\" (this can be done from the Command Palette in VS Code or by restarting VS Code).</p> <p></p>"},{"location":"code-reviews/recipes/csharp/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these C# specific code review items</p> <ul> <li> Does this code make correct use of asynchronous programming constructs, including proper use of <code>await</code> and <code>Task.WhenAll</code> including CancellationTokens?</li> <li> Is the code subject to concurrency issues? Are shared objects properly protected?</li> <li> Is dependency injection (DI) used? Is it setup correctly?</li> <li> Are middleware included in this project configured correctly?</li> <li> Are resources released deterministically using the IDispose pattern? Are all disposable objects properly disposed (using pattern)?</li> <li> Is the code creating a lot of short-lived objects. Could we optimize GC pressure?</li> <li> Is the code written in a way that causes boxing operations to happen?</li> <li> Does the code handle exceptions correctly?</li> <li> Is package management being used (NuGet) instead of committing DLLs?</li> <li> Does this code use LINQ appropriately? Pulling LINQ into a project to replace a single short loop or in ways that do not perform well are usually not appropriate.</li> <li> Does this code properly validate arguments sanity (i.e. CA1062)? Consider leveraging extensions such as Ensure.That</li> <li> Does this code include telemetry (metrics, tracing and logging) instrumentation?</li> <li> Does this code leverage the options design pattern by using classes to provide strongly typed access to groups of related settings?</li> <li> Instead of using raw strings, are constants used in the main class? Or if these strings are used across files/classes, is there a static class for the constants?</li> <li> Are magic numbers explained? There should be no number in the code without at least a comment of why this is here. If the number is repetitive, is there a constant/enum or equivalent?</li> <li> Is proper exception handling set up? Catching the exception base class (<code>catch (Exception)</code>) is generally not the right pattern. Instead, catch the specific exceptions that can happen e.g., <code>IOException</code>.</li> <li> Is the use of #pragma fair?</li> <li> Are tests arranged correctly with the Arrange/Act/Assert pattern and properly documented in this way?</li> <li> If there is an asynchronous method, does the name of the method end with the <code>Async</code> suffix?</li> <li> If a method is asynchronous, is <code>Task.Delay</code> used instead of <code>Thread.Sleep</code>? <code>Task.Delay</code> is not blocking the current thread and creates a task that will complete without blocking the thread, so in a multi-threaded, multi-task environment, this is the one to prefer.</li> <li> Is a cancellation token for asynchronous tasks needed rather than bool patterns?</li> <li> Is a minimum level of logging in place? Are the logging levels used sensible?</li> <li> Are internal vs private vs public classes and methods used the right way?</li> <li> Are auto property set and get used the right way? In a model without constructor and for deserialization, it is ok to have all accessible. For other classes usually a private set or internal set is better.</li> <li> Is the <code>using</code> pattern for streams and other disposable classes used? If not, better to have the <code>Dispose</code> method called explicitly.</li> <li> Are the classes that maintain collections in memory, thread safe? When used under concurrency, use lock pattern.</li> </ul>"},{"location":"code-reviews/recipes/go/","title":"Go Code Reviews","text":""},{"location":"code-reviews/recipes/go/#style-guide","title":"Style Guide","text":"<p>Developers should follow the Effective Go Style Guide.</p>"},{"location":"code-reviews/recipes/go/#code-analysis-linting","title":"Code Analysis / Linting","text":""},{"location":"code-reviews/recipes/go/#project-setup","title":"Project Setup","text":"<p>Below is the project setup that you would like to have in your VS Code.</p>"},{"location":"code-reviews/recipes/go/#vscode-go-extension","title":"VSCode go Extension","text":"<p>Using the Go extension for Visual Studio Code, you get language features like IntelliSense, code navigation, symbol search, bracket matching, snippets, etc. This extension includes rich language support for go in VS Code.</p>"},{"location":"code-reviews/recipes/go/#go-vet","title":"go vet","text":"<p><code>go vet</code> is a static analysis tool that checks for common go errors, such as incorrect use of range loop variables or misaligned printf arguments. Go code should be able to build with no <code>go vet</code> errors. This will be part of vscode-go extension.</p>"},{"location":"code-reviews/recipes/go/#golint","title":"golint","text":"<p>Note: The golint library is deprecated and archived.</p> <p>The linter revive (below) might be a suitable replacement.</p> <p>golint can be an effective tool for finding many issues, but it errors on the side of false positives. It is best used by developers when working on code, not as part of an automated build process. This is the default linter which is set up as part of the vscode-go extension.</p>"},{"location":"code-reviews/recipes/go/#revive","title":"revive","text":"<p>Revive is a linter for go, it provides a framework for development of custom rules, and lets you define a strict preset for enhancing your development &amp; code review processes.</p>"},{"location":"code-reviews/recipes/go/#automatic-code-formatting","title":"Automatic Code Formatting","text":""},{"location":"code-reviews/recipes/go/#gofmt","title":"gofmt","text":"<p><code>gofmt</code> is the automated code format style guide for Go. This is part of the vs-code extension, and it is enabled by default to run on save of every file.</p>"},{"location":"code-reviews/recipes/go/#aggregator","title":"Aggregator","text":""},{"location":"code-reviews/recipes/go/#golangci-lint","title":"golangci-lint","text":"<p>golangci-lint is the replacement for the now deprecated <code>gometalinter</code>. It is 2-7x faster than <code>gometalinter</code> along with a host of other benefits.</p> <p>golangci-lint is a powerful, customizable aggregator of linters. By default, several are enabled but not all. A full list of linters and their usages can be found here.</p> <p>It will allow you to configure each linter and choose which ones you would like to enable in your project.</p> <p>One awesome feature of <code>golangci-lint</code> is that is can be easily introduced to an existing large codebase using the <code>--new-from-rev COMMITID</code>. With this setting only newly introduced issues are flagged, allowing a team to improve new code without having to fix all historic issues in a large codebase. This provides a great path to improving code-reviews on existing solutions. golangci-lint can also be setup as the default linter in VS Code.</p> <p>Installation options for golangci-lint are present at golangci-lint.</p> <p>To use golangci-lint with VS Code, use the below recommended settings:</p> <pre><code>\"go.lintTool\":\"golangci-lint\",\n   \"go.lintFlags\": [\n     \"--fast\"\n   ]\n</code></pre>"},{"location":"code-reviews/recipes/go/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>All developers should run <code>gofmt</code> in a pre-commit hook to ensure standard formatting.</p>"},{"location":"code-reviews/recipes/go/#step-1-install-pre-commit","title":"Step 1- Install pre-commit","text":"<p>Run <code>pip install pre-commit</code> to install pre-commit. Alternatively you can run <code>brew install pre-commit</code> if you are using homebrew.</p>"},{"location":"code-reviews/recipes/go/#step-2-add-go-fmt-in-pre-commit","title":"Step 2- Add go-fmt in pre-commit","text":"<p>Add .pre-commit-config.yaml file to root of the go project. Run go-fmt on pre-commit by adding it to .pre-commit-config.yaml file like below.</p> <pre><code>- repo: git://github.com/dnephin/pre-commit-golang\n  rev: master\n  hooks:\n    - id: go-fmt\n</code></pre>"},{"location":"code-reviews/recipes/go/#step-3","title":"Step 3","text":"<p>Run <code>$ pre-commit install</code> to set up the git hook scripts</p>"},{"location":"code-reviews/recipes/go/#build-validation","title":"Build Validation","text":"<p><code>gofmt</code> should be run as a part of every build to enforce the common standard.</p> <p>To automate this process in Azure DevOps you can add the following snippet to your <code>azure-pipelines.yaml</code> file. This will format any scripts in the <code>./scripts/</code> folder.</p> <pre><code>- script: go fmt\n  workingDirectory: $(System.DefaultWorkingDirectory)/scripts\n  displayName: \"Run code formatting\"\n</code></pre> <p><code>govet</code> should be run as a part of every build to check code linting.</p> <p>To automate this process in Azure DevOps you can add the following snippet to your <code>azure-pipelines.yaml</code> file. This will check linting of any scripts in the <code>./scripts/</code> folder.</p> <pre><code>- script: go vet\n  workingDirectory: $(System.DefaultWorkingDirectory)/scripts\n  displayName: \"Run code linting\"\n</code></pre> <p>Alternatively you can use golangci-lint as a step in the pipeline to do multiple enabled validations(including go vet and go fmt) of golangci-lint.</p> <pre><code>- script: golangci-lint run --enable gofmt --fix\n  workingDirectory: $(System.DefaultWorkingDirectory)/scripts\n  displayName: \"Run code linting\"\n</code></pre>"},{"location":"code-reviews/recipes/go/#sample-build-validation-pipeline-in-azure-devops","title":"Sample Build Validation Pipeline in Azure DevOps","text":"<pre><code>trigger: master\n\npool:\n   vmImage: 'ubuntu-latest'\n\nsteps:\n\n- task: GoTool@0\n  inputs:\n    version: '1.13.5'\n\n- task: Go@0\n  inputs:\n    command: 'get'\n    arguments: '-d'\n    workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'\n\n\n- script: go fmt\n  workingDirectory: $(System.DefaultWorkingDirectory)/scripts\n  displayName: \"Run code formatting\"\n\n- script: go vet\n  workingDirectory: $(System.DefaultWorkingDirectory)/scripts\n  displayName: 'Run go vet'\n\n- task: Go@0\n  inputs:\n    command: 'build'\n    workingDirectory: '$(System.DefaultWorkingDirectory)'\n\n- task: CopyFiles@2\n  inputs:\n    TargetFolder: '$(Build.ArtifactStagingDirectory)'\n- task: PublishBuildArtifacts@1\n  inputs:\n     artifactName: drop\n</code></pre>"},{"location":"code-reviews/recipes/go/#code-review-checklist","title":"Code Review Checklist","text":"<p>The Go language team maintains a list of common Code Review Comments for go that form the basis for a solid checklist for a team working in Go that should be followed in addition to the ISE Code Review Checklist</p> <ul> <li> Does this code handle errors correctly? This includes not throwing away errors with <code>_</code> assignments and returning errors, instead of in-band error values?</li> <li> Does this code follow Go standards for method receiver types?</li> <li> Does this code pass values when it should?</li> <li> Are interfaces in this code defined in the correct packages?</li> <li> Do go-routines in this code have clear lifetimes?</li> <li> Is parallelism in this code handled via go-routines and channels with synchronous methods?</li> <li> Does this code have meaningful Doc Comments?</li> <li> Does this code have meaningful Package Comments?</li> <li> Does this code use Contexts correctly?</li> <li> Do unit tests fail with meaningful messages?</li> </ul>"},{"location":"code-reviews/recipes/java/","title":"Java Code Reviews","text":""},{"location":"code-reviews/recipes/java/#java-style-guide","title":"Java Style Guide","text":"<p>Developers should follow the Google Java Style Guide.</p>"},{"location":"code-reviews/recipes/java/#code-analysis-linting","title":"Code Analysis / Linting","text":"<p>We strongly believe that consistent style increases readability and maintainability of a code base. Hence, we are recommending analyzers to enforce consistency and style rules.</p> <p>We make use of Checkstyle using the same configuration used in the Azure Java SDK.</p> <p>FindBugs and PMD are also commonly used.</p>"},{"location":"code-reviews/recipes/java/#automatic-code-formatting","title":"Automatic Code Formatting","text":"<p>Eclipse, and other Java IDEs, support automatic code formatting.  If using Maven, some developers also make use of the formatter-maven-plugin.</p>"},{"location":"code-reviews/recipes/java/#build-validation","title":"Build Validation","text":"<p>It's important to enforce your code style and rules in the CI to avoid any team members merging code that does not comply with standards into your git repo.  If building using Azure DevOps, Azure DevOps support Maven and Gradle build tasks using PMD, Checkstyle, and FindBugs code analysis tools as part of every build.</p> <p>Here is an example yaml for a Maven build task with all three analysis tools enabled:</p> <pre><code>    - task: Maven@3\n    displayName: 'Maven pom.xml'\n    inputs:\n        mavenPomFile: '$(Parameters.mavenPOMFile)'\n        checkStyleRunAnalysis: true\n        pmdRunAnalysis: true\n        findBugsRunAnalysis: true\n</code></pre> <p>Here is an example yaml for a Gradle build task with all three analysis tools enabled:</p> <pre><code>    - task: Gradle@2\n    displayName: 'gradlew build'\n    inputs:\n        checkStyleRunAnalysis: true\n        findBugsRunAnalysis: true\n        pmdRunAnalysis: true\n</code></pre>"},{"location":"code-reviews/recipes/java/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these Java specific code review items</p> <ul> <li> Does the project use Lambda to make code cleaner?</li> <li> Is dependency injection (DI) used?  Is it setup correctly?</li> <li> If the code uses Spring Boot, are you using @Inject instead of @Autowire?</li> <li> Does the code handle exceptions correctly?</li> <li> Is the Azul Zulu OpenJDK being used?</li> <li> Is a build automation and package management tool (Gradle or Maven) being used?</li> </ul>"},{"location":"code-reviews/recipes/javascript-and-typescript/","title":"JavaScript/TypeScript Code Reviews","text":""},{"location":"code-reviews/recipes/javascript-and-typescript/#style-guide","title":"Style Guide","text":"<p>Developers should use prettier to do code formatting for JavaScript.</p> <p>Using an automated code formatting tool like Prettier enforces a well accepted style guide that was collaboratively built by a wide range of companies including Microsoft, Facebook, and AirBnB.</p> <p>For higher level style guidance not covered by prettier, we follow the AirBnB Style Guide.</p>"},{"location":"code-reviews/recipes/javascript-and-typescript/#code-analysis-linting","title":"Code Analysis / Linting","text":""},{"location":"code-reviews/recipes/javascript-and-typescript/#eslint","title":"eslint","text":"<p>Per guidance outlined in Palantir's 2019 TSLint road map, TypeScript code should be linted with ESLint. See the typescript-eslint documentation for more information around linting TypeScript code with ESLint.</p> <p>To install and configure linting with ESLint, install the following packages as dev-dependencies:</p> <pre><code>npm install -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre> <p>Add a <code>.eslintrc.js</code> to the root of your project:</p> <pre><code>module.exports = {\n  root: true,\n  parser: '@typescript-eslint/parser',\n  plugins: [\n    '@typescript-eslint',\n  ],\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/eslint-recommended',\n    'plugin:@typescript-eslint/recommended',\n  ],\n};\n</code></pre> <p>Add the following to the <code>scripts</code> of your <code>package.json</code>:</p> <pre><code>\"scripts\": {\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx --ignore-path .gitignore\"\n}\n</code></pre> <p>This will lint all <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, <code>.tsx</code> files in your project and omit any files or directories specified in your <code>.gitignore</code>.</p> <p>You can run linting with:</p> <pre><code>npm run lint\n</code></pre>"},{"location":"code-reviews/recipes/javascript-and-typescript/#setting-up-prettier","title":"Setting up Prettier","text":"<p>Prettier is an opinionated code formatter.</p> <p>Getting started guide.</p> <p>Install with <code>npm</code> as a dev-dependency:</p> <pre><code>npm install -D prettier eslint-config-prettier eslint-plugin-prettier\n</code></pre> <p>Add <code>prettier</code> to your <code>.eslintrc.js</code>:</p> <pre><code>module.exports = {\n  root: true,\n  parser: '@typescript-eslint/parser',\n  plugins: [\n    '@typescript-eslint',\n  ],\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/eslint-recommended',\n    'plugin:@typescript-eslint/recommended',\n    'prettier/@typescript-eslint',\n    'plugin:prettier/recommended',\n  ],\n};\n</code></pre> <p>This will apply the <code>prettier</code> rule set when linting with ESLint.</p>"},{"location":"code-reviews/recipes/javascript-and-typescript/#auto-formatting-with-vscode","title":"Auto Formatting with VSCode","text":"<p>VS Code can be configured to automatically perform <code>eslint --fix</code> on save.</p> <p>Create a <code>.vscode</code> folder in the root of your project and add the following to your <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  },\n}\n</code></pre> <p>By default, we use the following overrides should be added to the VS Code configuration to standardize on single quotes, a four space drop, and to do ESLinting:</p> <pre><code>{\n    \"prettier.singleQuote\": true,\n    \"prettier.eslintIntegration\": true,\n    \"prettier.tabWidth\": 4\n}\n</code></pre>"},{"location":"code-reviews/recipes/javascript-and-typescript/#setting-up-testing","title":"Setting Up Testing","text":"<p>Playwright is highly recommended to be set up within a project. its an open source testing suite created by Microsoft.</p> <p>To install it use this command:</p> <pre><code>npm install playwright\n</code></pre> <p>Since playwright shows the tests in the browser you have to choose which browser you want it to run if unless using chrome, which is the default. You can do this by</p>"},{"location":"code-reviews/recipes/javascript-and-typescript/#build-validation","title":"Build Validation","text":"<p>To automate this process in Azure Devops you can add the following snippet to your pipeline definition yaml file. This will lint any scripts in the <code>./scripts/</code> folder.</p> <pre><code>- task: Npm@1\n  displayName: 'Lint'\n  inputs:\n    command: 'custom'\n    customCommand: 'run lint'\n    workingDir: './scripts/'\n</code></pre>"},{"location":"code-reviews/recipes/javascript-and-typescript/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>All developers should run <code>eslint</code> in a pre-commit hook to ensure standard formatting. We highly recommend using an editor integration like vscode-eslint to provide realtime feedback.</p> <ol> <li>Under <code>.git/hooks</code> rename <code>pre-commit.sample</code> to <code>pre-commit</code></li> <li>Remove the existing sample code in that file</li> <li>There are many examples of scripts for this on gist, like pre-commit-eslint</li> <li>Modify accordingly to include TypeScript files (include ts extension and make sure typescript-eslint is set up)</li> <li>Make the file executable: <code>chmod +x .git/hooks/pre-commit</code></li> </ol> <p>As an alternative husky can be considered to simplify pre-commit hooks.</p>"},{"location":"code-reviews/recipes/javascript-and-typescript/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these JavaScript and TypeScript specific code review items.</p>"},{"location":"code-reviews/recipes/javascript-and-typescript/#javascript-typescript-checklist","title":"Javascript / Typescript Checklist","text":"<ul> <li> Does the code stick to our formatting and code standards? Does running prettier and ESLint over the code should yield no warnings or errors respectively?</li> <li> Does the change re-implement code that would be better served by pulling in a well known module from the ecosystem?</li> <li> Is <code>\"use strict\";</code> used to reduce errors with undeclared variables?</li> <li> Are unit tests used where possible, also for APIs?</li> <li> Are tests arranged correctly with the Arrange/Act/Assert pattern and properly documented in this way?</li> <li> Are best practices for error handling followed, as well as <code>try catch finally</code> statements?</li> <li> Are the <code>doWork().then(doSomething).then(checkSomething)</code> properly followed for async calls, including <code>expect</code>, <code>done</code>?</li> <li> Instead of using raw strings, are constants used in the main class? Or if these strings are used across files/classes, is there a static class for the constants?</li> <li> Are magic numbers explained? There should be no number in the code without at least a comment of why it is there. If the number is repetitive, is there a constant/enum or equivalent?</li> <li> If there is an asynchronous method, does the name of the method end with the <code>Async</code> suffix?</li> <li> Is a minimum level of logging in place? Are the logging levels used sensible?</li> <li> Is document fragment manipulation limited to when you need to manipulate multiple sub elements?</li> <li> Does TypeScript code compile without raising linting errors?</li> <li> Instead of using raw strings, are constants used in the main class? Or if these strings are used across files/classes, is there a static class for the constants?</li> <li> Are magic numbers explained? There should be no number in the code without at least a comment of why it is there. If the number is repetitive, is there a constant/enum or equivalent?</li> <li> Is there a proper <code>/* */</code> in the various classes and methods?</li> <li> Are heavy operations implemented in the backend, leaving the controller as thin as possible?</li> <li> Is event handling on the html efficiently done?</li> </ul>"},{"location":"code-reviews/recipes/markdown/","title":"Markdown Code Reviews","text":""},{"location":"code-reviews/recipes/markdown/#style-guide","title":"Style Guide","text":"<p>Developers should treat documentation like other source code and follow the same rules and checklists when reviewing documentation as code.</p> <p>Documentation should both use good Markdown syntax to ensure it's properly parsed, and follow good writing style guidelines to ensure the document is easy to read and understand.</p>"},{"location":"code-reviews/recipes/markdown/#markdown","title":"Markdown","text":"<p>Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world\u2019s most popular markup languages.</p> <p>Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn\u2019t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.</p> <p>You can find more information and full documentation here.</p>"},{"location":"code-reviews/recipes/markdown/#linters","title":"Linters","text":"<p>Markdown has specific way of being formatted. It is important to respect this formatting, otherwise some interpreters which are strict won't properly display the document. Linters are often used to help developers properly create documents by both verifying proper Markdown syntax, grammar and proper English language.</p> <p>A good setup includes a markdown linter used during editing and PR build verification, and a grammar linter used while editing the document. The following are a list of linters that could be used in this setup.</p>"},{"location":"code-reviews/recipes/markdown/#markdownlint","title":"markdownlint","text":"<p><code>markdownlint</code> is a linter for markdown that verifies Markdown syntax, and also enforces rules that make the text more readable. Markdownlint-cli is an easy-to-use CLI based on Markdownlint.</p> <p>It's available as a ruby gem, an npm package, a Node.js CLI and a VS Code extension. The VS Code extension Prettier also catches all markdownlint errors.</p> <p>Installing the Node.js CLI</p> <pre><code>npm install -g markdownlint-cli\n</code></pre> <p>Running markdownlint on a Node.js project</p> <pre><code>markdownlint **/*.md --ignore node_modules\n</code></pre> <p>Fixing errors automatically</p> <pre><code>markdownlint **/*.md --ignore node_modules --fix\n</code></pre> <p>A comprehensive list of markdownlint rules is available here.</p>"},{"location":"code-reviews/recipes/markdown/#write-good","title":"write-good","text":"<p><code>write-good</code> is a linter for English text that helps writing better documentation.</p> <pre><code>npm install -g write-good\n</code></pre> <p>Run write-good</p> <pre><code>write-good *.md\n</code></pre> <p>Run write-good without installing it</p> <pre><code>npx write-good *.md\n</code></pre> <p>Write Good is also available as an extension for VS Code</p>"},{"location":"code-reviews/recipes/markdown/#vscode-extensions","title":"VSCode Extensions","text":""},{"location":"code-reviews/recipes/markdown/#write-good-linter","title":"Write Good Linter","text":"<p>The <code>Write Good Linter Extension</code> integrates with VS Code to give grammar and language advice while editing the document.</p>"},{"location":"code-reviews/recipes/markdown/#markdownlint-extension","title":"markdownlint Extension","text":"<p>The <code>markdownlint extension</code> examines the Markdown documents, showing warnings for rule violations while editing.</p>"},{"location":"code-reviews/recipes/markdown/#build-validation","title":"Build Validation","text":""},{"location":"code-reviews/recipes/markdown/#linting","title":"Linting","text":"<p>To automate linting with <code>markdownlint</code> for PR validation in GitHub actions, you can either use linters aggregator as we do with MegaLinter in this repository or use the following YAML.</p> <pre><code>name: Markdownlint\n\non:\n  push:\n    paths:\n      - \"**/*.md\"\n  pull_request:\n    paths:\n      - \"**/*.md\"\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Use Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12.x\n    - name: Run Markdownlint\n      run: |\n        npm i -g markdownlint-cli\n        markdownlint \"**/*.md\" --ignore node_modules\n</code></pre>"},{"location":"code-reviews/recipes/markdown/#checking-links","title":"Checking Links","text":"<p>To automate link check in your markdown files add <code>lycheeverse/lychee-action</code> action to your validation pipeline:</p> <pre><code>  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Link Checker\n      id: lychee\n      uses: lycheeverse/lychee-action@v2\n</code></pre> <p>More information about this action options can be found at <code>lychee-action</code> home page.</p>"},{"location":"code-reviews/recipes/markdown/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these documentation specific code review items</p> <ul> <li> Is the document easy to read and understand and does it follow good writing guidelines?</li> <li> Is there a single source of truth or is content repeated in more than one document?</li> <li> Is the documentation up to date with the code?</li> <li> Is the documentation technically, and ethically correct?</li> </ul>"},{"location":"code-reviews/recipes/markdown/#writing-style-guidelines","title":"Writing Style Guidelines","text":"<p>The following are some examples of writing style guidelines.</p> <p>Agree in your team which guidelines you should apply to your project documentation. Save your guidelines together with your documentation, so they are easy to refer back to.</p>"},{"location":"code-reviews/recipes/markdown/#wording","title":"Wording","text":"<ul> <li>Use inclusive language, and avoid jargon and uncommon words. The docs should be easy to understand</li> <li>Be clear and concise, stick to the goal of the document</li> <li>Use active voice</li> <li>Spell check and grammar check the text</li> <li>Always follow chronological order</li> <li>Visit Plain English for tips on how to write documentation that is easy to understand.</li> </ul>"},{"location":"code-reviews/recipes/markdown/#document-organization","title":"Document Organization","text":"<ul> <li>Organize documents by topic rather than type, this makes it easier to find the documentation</li> <li>Each folder should have a top-level README.md and any other documents within that folder should link directly or indirectly from that README.md</li> <li>Document names with more than one word should use underscores instead of spaces, for example <code>machine_learning_pipeline_design.md</code>. The same applies to images</li> </ul>"},{"location":"code-reviews/recipes/markdown/#headings","title":"Headings","text":"<ul> <li>Start with a H1 (single # in markdown) and respect the order H1 &gt; H2 &gt; H3 etc</li> <li>Follow each heading with text before proceeding with the next heading</li> <li>Avoid putting numbers in headings. Numbers shift, and can create outdated titles</li> <li>Avoid using symbols and special characters in headers, this causes problems with anchor links</li> <li>Avoid links in headers</li> </ul>"},{"location":"code-reviews/recipes/markdown/#resources","title":"Resources","text":"<ul> <li>Avoid duplication of content, instead link to the <code>single source of truth</code></li> <li>Link but don't summarize. Summarizing content on another page leads to the content living in two places</li> <li>Use meaningful anchor texts, e.g. instead of writing <code>Follow the instructions [here](../recipes/markdown.md)</code> write <code>Follow the [Markdown guidelines](../recipes/markdown.md)</code></li> <li>Make sure links to Microsoft docs do not contain the language marker <code>/en-us/</code> or <code>/fr-fr/</code>, as this is automatically determined by the site itself.</li> </ul>"},{"location":"code-reviews/recipes/markdown/#lists","title":"Lists","text":"<ul> <li>List items should start with capital letters if possible</li> <li>Use ordered lists when the items describe a sequence to follow, otherwise use unordered lists</li> <li>For ordered lists, prefix each item with <code>1.</code> When rendered, the list items will appear with sequential numbering. This avoids number-gaps in list</li> <li>Do not add commas <code>,</code> or semicolons <code>;</code> to the end of list items, and avoid periods <code>.</code> unless the list item represents a complete sentence</li> </ul>"},{"location":"code-reviews/recipes/markdown/#images","title":"Images","text":"<ul> <li>Place images in a separate directory named <code>img</code></li> <li>Name images appropriately, avoiding generic names like <code>screenshot.png</code></li> <li>Avoid adding large images or videos to source control, link to an external location instead</li> </ul>"},{"location":"code-reviews/recipes/markdown/#emphasis-and-special-sections","title":"Emphasis and Special Sections","text":"<ul> <li>Use bold or italic to emphasize <p>For sections that everyone reading this document needs to be aware of, use blocks</p> </li> <li> <p>Use <code>backticks</code> for code, a single backtick for inline code like <code>pip install flake8</code> and 3 backticks for code blocks followed by the language for syntax highlighting</p> <pre><code>def add(num1: int, num2: int):\n  return num1 + num2\n</code></pre> </li> </ul> <ul> <li>Use check boxes for task lists<ul> <li> Item 1</li> <li> Item 2</li> <li> Item 3</li> </ul> </li> <li>Add a References section to the end of the document with links to external references</li> <li> <p>Prefer tables to lists for comparisons and reports to make research and results more readable</p> Option Pros Cons Option 1 Some pros Some cons Option 2 Some pros Some cons </li> </ul>"},{"location":"code-reviews/recipes/markdown/#general","title":"General","text":"<ul> <li>Always use Markdown syntax, don't mix with HTML</li> <li>Make sure the extension of the files is <code>.md</code> - if the extension is missing, a linter might ignore the files</li> </ul>"},{"location":"code-reviews/recipes/python/","title":"Python Code Reviews","text":""},{"location":"code-reviews/recipes/python/#style-guide","title":"Style Guide","text":"<p>Developers should follow the PEP8 style guide with type hints. The use of type hints throughout paired with linting and type hint checking avoids common errors that are tricky to debug.</p> <p>Projects should check Python code with automated tools.</p> <p>Linting should be added to build validation, and both linting and code formatting can be added to your pre-commit hooks and VS Code.</p>"},{"location":"code-reviews/recipes/python/#code-analysis-linting","title":"Code Analysis / Linting","text":"<p>The 2 most popular python linters are Pylint and Flake8. Both check adherence to <code>PEP8</code> but vary a bit in what other rules they check. In general <code>Pylint</code> tends to be a bit more stringent and give more false positives but both are good options for linting python code.</p> <p>Both <code>Pylint</code> and <code>Flake8</code> can be configured in VS Code using the VS Code <code>python extension</code>.</p>"},{"location":"code-reviews/recipes/python/#flake8","title":"Flake8","text":"<p>Flake8 is a simple and fast wrapper around <code>Pyflakes</code> (for detecting coding errors) and <code>pycodestyle</code> (for pep8).</p> <p>Install <code>Flake8</code></p> <pre><code>pip install flake8\n</code></pre> <p>Add an extension for the <code>pydocstyle</code> (for doc strings) tool to flake8.</p> <pre><code>pip install flake8-docstrings\n</code></pre> <p>Add an extension for <code>pep8-naming</code> (for naming conventions in pep8) tool to flake8.</p> <pre><code>pip install pep8-naming\n</code></pre> <p>Run <code>Flake8</code></p> <pre><code>flake8 .    # lint the whole project\n</code></pre>"},{"location":"code-reviews/recipes/python/#pylint","title":"Pylint","text":"<p>Install <code>Pylint</code></p> <pre><code>pip install pylint\n</code></pre> <p>Run <code>Pylint</code></p> <pre><code>pylint src  # lint the source directory\n</code></pre>"},{"location":"code-reviews/recipes/python/#automatic-code-formatting","title":"Automatic Code Formatting","text":""},{"location":"code-reviews/recipes/python/#black","title":"Black","text":"<p><code>Black</code> is an unapologetic code formatting tool. It removes all need from <code>pycodestyle</code> nagging about formatting, so the team can focus on content vs style. It's not possible to configure black for your own style needs.</p> <pre><code>pip install black\n</code></pre> <p>Format python code</p> <pre><code>black [file/folder]\n</code></pre>"},{"location":"code-reviews/recipes/python/#autopep8","title":"autopep8","text":"<p><code>Autopep8</code> is more lenient and allows more configuration if you want less stringent formatting.</p> <pre><code>pip install autopep8\n</code></pre> <p>Format python code</p> <pre><code>autopep8 [file/folder] --in-place\n</code></pre>"},{"location":"code-reviews/recipes/python/#yapf","title":"yapf","text":"<p>yapf Yet Another Python Formatter is a python formatter from Google based on ideas from gofmt.  This is also more configurable, and a good option for automatic code formatting.</p> <pre><code>pip install yapf\n</code></pre> <p>Format python code</p> <pre><code>yapf [file/folder] --in-place\n</code></pre>"},{"location":"code-reviews/recipes/python/#bandit","title":"Bandit","text":"<p>Bandit is a tool designed by the Python Code Quality Authority (PyCQA) to perform static analysis of Python code, specifically targeting security issues. It scans for common security issues in Python codebase.</p> <ul> <li>Installation: Add Bandit to your development environment with:   <pre><code>pip install bandit\n</code></pre></li> </ul>"},{"location":"code-reviews/recipes/python/#vscode-extensions","title":"VSCode Extensions","text":""},{"location":"code-reviews/recipes/python/#python","title":"Python","text":"<p>The <code>Python language extension</code> is the base extension you should have installed for python development with VS Code. It enables intellisense, debugging, linting (with the above linters), testing with pytest or unittest, and code formatting with the formatters mentioned above.</p>"},{"location":"code-reviews/recipes/python/#pyright","title":"Pyright","text":"<p>The <code>Pyright extension</code> augments VS Code with static type checking when you use type hints</p> <pre><code>def add(first_value: int, second_value: int) -&gt; int:\n    return first_value + second_value\n</code></pre>"},{"location":"code-reviews/recipes/python/#build-validation","title":"Build Validation","text":"<p>To automate linting with <code>flake8</code> and testing with <code>pytest</code> in Azure Devops you can add the following snippet to you <code>azure-pipelines.yaml</code> file.</p> <pre><code>trigger:\n  branches:\n    include:\n    - develop\n    - master\n  paths:\n    include:\n    - src/*\n\npool:\n  vmImage: 'ubuntu-latest'\n\njobs:\n- job: LintAndTest\n  displayName: Lint and Test\n\n  steps:\n\n  - checkout: self\n    lfs: true\n\n  - task: UsePythonVersion@0\n    displayName: 'Set Python version to 3.6'\n    inputs:\n      versionSpec: '3.6'\n\n  - script: pip3 install --user -r requirements.txt\n    displayName: 'Install dependencies'\n\n  - script: |\n      # Install Flake8\n      pip3 install --user flake8\n      # Install PyTest\n      pip3 install --user pytest\n    displayName: 'Install Flake8 and PyTest'\n\n  - script: |\n      python3 -m flake8\n    displayName: 'Run Flake8 linter'\n\n  - script: |\n      # Run PyTest tester\n      python3 -m pytest --junitxml=./test-results.xml\n    displayName: 'Run PyTest Tester'\n\n  - task: PublishTestResults@2\n    displayName: 'Publish PyTest results'\n    condition: succeededOrFailed()\n    inputs:\n      testResultsFiles: '**/test-*.xml'\n      testRunTitle: 'Publish test results for Python $(python.version)'\n</code></pre> <p>To perform a PR validation on GitHub you can use a similar YAML configuration with GitHub Actions</p>"},{"location":"code-reviews/recipes/python/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>Pre-commit hooks allow you to format and lint code locally before submitting the pull request.</p> <p>Adding pre-commit hooks for your python repository is easy using the pre-commit package</p> <ol> <li> <p>Install pre-commit and add to the requirements.txt</p> <pre><code>pip install pre-commit\n</code></pre> </li> <li> <p>Add a <code>.pre-commit-config.yaml</code> file in the root of the repository, with the desired pre-commit actions</p> <pre><code>repos:\n-   repo: https://github.com/ambv/black\n    rev: stable\n    hooks:\n    - id: black\n    language_version: python3.6\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    - id: flake8\n</code></pre> </li> <li> <p>Each individual developer that wants to set up pre-commit hooks can then run</p> <pre><code>pre-commit install\n</code></pre> </li> </ol> <p>At the next attempted commit any lint failures will block the commit.</p> <p>Note: Installing pre-commit hooks is voluntary and done by each developer individually. Thus, it's not a replacement for build validation on the server</p>"},{"location":"code-reviews/recipes/python/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these python specific code review items</p> <ul> <li> Are all new packages used included in requirements.txt</li> <li> Does the code pass all lint checks?</li> <li> Do functions use type hints, and are there any type hint errors?</li> <li> Is the code readable and using pythonic constructs wherever possible.</li> </ul>"},{"location":"code-reviews/recipes/terraform/","title":"Terraform Code Reviews","text":""},{"location":"code-reviews/recipes/terraform/#style-guide","title":"Style Guide","text":"<p>Developers should follow the terraform style guide.</p> <p>Projects should check Terraform scripts with automated tools.</p>"},{"location":"code-reviews/recipes/terraform/#code-analysis-linting","title":"Code Analysis / Linting","text":""},{"location":"code-reviews/recipes/terraform/#tflint","title":"TFLint","text":"<p><code>TFLint</code> is a Terraform linter focused on possible errors, best practices, etc. Once TFLint installed in the environment, it can be invoked using the VS Code <code>terraform extension</code>.</p>"},{"location":"code-reviews/recipes/terraform/#vscode-extensions","title":"VSCode Extensions","text":"<p>The following VS Code extensions are widely used.</p>"},{"location":"code-reviews/recipes/terraform/#terraform-extension","title":"<code>Terraform extension</code>","text":"<p>This extension provides syntax highlighting, linting, formatting and validation capabilities.</p>"},{"location":"code-reviews/recipes/terraform/#azure-terraform-extension","title":"<code>Azure Terraform extension</code>","text":"<p>This extension provides Terraform command support, resource graph visualization and CloudShell integration inside VS Code.</p>"},{"location":"code-reviews/recipes/terraform/#build-validation","title":"Build Validation","text":"<p>Ensure you enforce the style guides during build. The following example script can be used to install terraform, and a linter that then checks for formatting and common errors.</p> <pre><code>#! /bin/bash\nset -e\n\nSCRIPT_DIR=$(dirname \"$BASH_SOURCE\")\ncd \"$SCRIPT_DIR\"\n\nTF_VERSION=0.12.4\nTF_LINT_VERSION=0.9.1\n\necho -e \"\\n\\n&gt;&gt;&gt; Installing Terraform 0.12\"\n# Install terraform tooling for linting terraform\nwget -q https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -O /tmp/terraform.zip\nsudo unzip -q -o -d /usr/local/bin/ /tmp/terraform.zip\n\necho \"\"\necho -e \"\\n\\n&gt;&gt;&gt; Install tflint (3rd party)\"\nwget -q https://github.com/wata727/tflint/releases/download/v${TF_LINT_VERSION}/tflint_linux_amd64.zip -O /tmp/tflint.zip\nsudo unzip -q -o -d /usr/local/bin/ /tmp/tflint.zip\n\necho -e \"\\n\\n&gt;&gt;&gt; Terraform version\"\nterraform -version\n\necho -e \"\\n\\n&gt;&gt;&gt; Terraform Format (if this fails use 'terraform fmt -recursive' command to resolve\"\nterraform fmt -recursive -diff -check\n\necho -e \"\\n\\n&gt;&gt;&gt; tflint\"\ntflint\n\necho -e \"\\n\\n&gt;&gt;&gt; Terraform init\"\nterraform init\n\necho -e \"\\n\\n&gt;&gt;&gt; Terraform validate\"\nterraform validate\n</code></pre>"},{"location":"code-reviews/recipes/terraform/#code-review-checklist","title":"Code Review Checklist","text":"<p>In addition to the Code Review Checklist you should also look for these Terraform specific code review items</p>"},{"location":"code-reviews/recipes/terraform/#providers","title":"Providers","text":"<ul> <li> Are all providers used in the terraform scripts versioned to prevent breaking changes in the future?</li> </ul>"},{"location":"code-reviews/recipes/terraform/#repository-organization","title":"Repository Organization","text":"<ul> <li> The code split into reusable modules?</li> <li> Modules are split into separate <code>.tf</code> files where appropriate?</li> <li> The repository contains a <code>README.md</code> describing the architecture provisioned?</li> <li> If Terraform code is mixed with application source code, the Terraform code isolated into a dedicated folder?</li> </ul>"},{"location":"code-reviews/recipes/terraform/#terraform-state","title":"Terraform State","text":"<ul> <li> The Terraform project configured using Azure Storage as remote state backend?</li> <li> The remote state backend storage account key stored a secure location (e.g. Azure Key Vault)?</li> <li> The project is configured to use state files based on the environment, and the deployment pipeline is configured to supply the state file name dynamically?</li> </ul>"},{"location":"code-reviews/recipes/terraform/#variables","title":"Variables","text":"<ul> <li> If the infrastructure will be different depending on the environment (e.g. Dev, UAT, Production), the environment specific parameters are supplied via a <code>.tfvars</code> file?</li> <li> All variables have <code>type</code> information. E.g. a <code>list(string)</code> or <code>string</code>.</li> <li> All variables have a <code>description</code> stating the purpose of the variable and its usage.</li> <li> <code>default</code> values are not supplied for variables which must be supplied by a user.</li> </ul>"},{"location":"code-reviews/recipes/terraform/#testing","title":"Testing","text":"<ul> <li> Unit and integration tests covering the Terraform code exist (e.g. <code>Terratest</code>, <code>terratest-abstraction</code>)?</li> </ul>"},{"location":"code-reviews/recipes/terraform/#naming-and-code-structure","title":"Naming and Code Structure","text":"<ul> <li> Resource definitions and data sources are used correctly in the Terraform scripts?<ul> <li>resource: Indicates to Terraform that the current configuration is in charge of managing the life cycle of the object</li> <li>data: Indicates to Terraform that you only want to get a reference to the existing object, but don\u2019t want to manage it as part of this configuration</li> </ul> </li> <li> The resource names start with their containing provider's name followed by an underscore? e.g. resource from the provider <code>postgresql</code> might be named as <code>postgresql_database</code>?</li> <li> The <code>try</code> function is only used with simple attribute references and type conversion functions? Overuse of the <code>try</code> function to suppress errors will lead to a configuration that is hard to understand and maintain.</li> <li> Explicit type conversion functions used to normalize types are only returned in module outputs? Explicit type conversions are rarely necessary in Terraform because it will convert types automatically where required.</li> <li> The <code>Sensitive</code> property on schema set to <code>true</code> for the fields that contains sensitive information? This will prevent the field's values from showing up in CLI output.</li> </ul>"},{"location":"code-reviews/recipes/terraform/#general-recommendations","title":"General Recommendations","text":"<ul> <li>Try avoiding nesting sub configuration within resources. Create a separate resource section for resources even though they can be declared as sub-element of a resource. For example, declaring subnets within virtual network vs declaring subnets as a separate resources compared to virtual network on Azure.</li> <li>Never hard-code any value in configuration. Declare them in <code>locals</code> section if a variable is needed multiple times as a static value and are internal to the configuration.</li> <li>The <code>name</code>s of the resources created on Azure should not be hard-coded or static. These names should be dynamic and user-provided using <code>variable</code> block. This is helpful especially in unit testing when multiple tests are running in parallel trying to create resources on Azure but need different names (few resources in Azure need to be named uniquely e.g. storage accounts).</li> <li>It is a good practice to <code>output</code> the ID of resources created on Azure from configuration. This is especially helpful when adding dynamic blocks for sub-elements/child elements to the parent resource.</li> <li>Use the <code>required_providers</code> block for establishing the dependency for providers along with pre-determined version.</li> <li>Use the <code>terraform</code> block to declare the provider dependency with exact version and also the terraform CLI version needed for the configuration.</li> <li>Validate the variable values supplied based on usage and type of variable. The validation can be done to variables by adding <code>validation</code> block.</li> <li>Validate that the component SKUs are the right ones, e.g. standard vs premium.</li> </ul>"},{"location":"design/exception-handling/","title":"Exception Handling","text":""},{"location":"design/exception-handling/#exception-constructs","title":"Exception Constructs","text":"<p>Almost all language platforms offer a construct of exception or equivalent to handle error scenarios. The underlying platform, used libraries or the authored code can \"throw\" exceptions to initiate an error flow. Some of the advantages of using exceptions are -</p> <ol> <li>Abstract different kind of errors</li> <li>Breaks the control flow from different code structures</li> <li>Navigate the call stack till the right catch block is identified</li> <li>Automatic collection of call stack</li> <li>Define different error handling flows thru multiple catch blocks</li> <li>Define finally block to cleanup resources</li> </ol> <p>Here is some guidance on exception handling in .Net</p> <p>C# Exception fundamentals</p> <p>Handling exceptions in .Net</p>"},{"location":"design/exception-handling/#custom-exceptions","title":"Custom Exceptions","text":"<p>Although the platform offers numerous types of exceptions, often we need custom defined exceptions to arrive at an optimal low level design for error handling. The advantages of using custom exceptions are -</p> <ol> <li>Define exceptions specific to business domain of the requirement. E.g. InvalidCustomerException</li> <li>Wrap system/platform exceptions to define more generic system exception so that overall code base is more tech stack agnostic. E.g DatabaseWriteException which wraps MongoWriteException.</li> <li>Enrich the exception with more information about the code flow of the error.</li> <li>Enrich the exception with more information about the data context of the error. E.g. RecordId in property in DatabaseWriteException which carries the Id of the record failed to update.</li> <li>Define custom error message which is more business user friendly or support team friendly.</li> </ol>"},{"location":"design/exception-handling/#custom-exception-hierarchy","title":"Custom Exception Hierarchy","text":"<p>Below diagram shows a sample hierarchy of custom exceptions.</p> <ol> <li>It defines a BaseException class which derives from System.Exception class and parent of all custom exceptions. BaseException also has additional properties for ActionCode and ResultCode. ActionCode represents the \"flow\" in which the error happened. ResultCode represents the exact error that happened. These additional properties help in defining different error handling flows in the catch blocks.</li> <li>Defines a number of System exceptions which derive from SystemException class. They will address all the errors generated by the technical aspects of the code. Like connectivity, read, write, buffer overflow etc</li> <li>Defines a number of Business exceptions which derive from BusinessException class. They will address all the errors generated by the business aspects of the code. Like data validations, duplicate rows.</li> </ol> <p></p>"},{"location":"design/exception-handling/#error-details-in-api-response","title":"Error Details in API Response","text":"<p>When an error occurs in an API, it has to rendered as response with all the necessary fields. There can be custom response schema drafted for these purposes. But one of the popular formats is the problem detail structure -</p> <p>Problem details</p> <p>There are inbuilt problem details middleware library built in ASP.Net core. For further details refer to below link</p> <p>Problem details service in ASP.Net core</p>"},{"location":"design/readme/","title":"Design","text":"<p>Designing software well is hard.</p> <p>ISE has collected a number of practices which we find help in the design process. This covers not only technical design of software, but also architecture design and non-functional requirements gathering for new projects.</p>"},{"location":"design/readme/#goals","title":"Goals","text":"<ul> <li>Provide recommendations for how to design software for maintainability, ease of extension, adherence to best practices, and sustainability.</li> <li>Reference or define process or checklists to help ensure well-designed software.</li> <li>Collate and point to reference sources (guides, repos, articles) that can help shortcut the learning process.</li> </ul>"},{"location":"design/readme/#code-examples","title":"Code Examples","text":"<ul> <li>Folder Structure<ul> <li>Folder Structure For Python Repository</li> </ul> </li> <li>Project Templates<ul> <li>Rust<ul> <li>Actix Web, Diesel ORM, Test Containers, Onion Architecture</li> </ul> </li> <li>Python<ul> <li>Flask, SQLAlchemy ORM, Test Containers, Onion Architecture</li> </ul> </li> </ul> </li> </ul>"},{"location":"design/design-patterns/","title":"Design Patterns","text":"<p>The design patterns section recommends patterns of software and architecture design. This section provides a curated list of commonly used patterns from trusted sources. Rather than duplicate or replace the cited sources, this section aims to compliment them with suggestions, guidance, and learnings based on firsthand experiences.</p>"},{"location":"design/design-patterns/cloud-resource-design-guidance/","title":"Cloud Resource Design Guidance","text":"<p>As cloud usage scales, considerations for subscription design, management groups, and resource naming/tagging conventions have an impact on governance, operations management, and adoption patterns.</p> <p>Note: Always work with the relevant stakeholders to ensure that introducing new patterns provides the intended value.</p> <p>When working in an existing cloud environment, it is important to understand any current patterns and how they are used before making a change to them.</p>"},{"location":"design/design-patterns/cloud-resource-design-guidance/#resources","title":"Resources","text":"<p>The following references can be used to understand the latest best practices in organizing cloud resources:</p> <ul> <li>Organizing Subscriptions</li> <li>Resource Tagging Decision Guide</li> <li>Resource Naming Conventions</li> <li>Recommended Azure Resource Abbreviations</li> <li>Organizing Dev/Test/Production Workloads</li> </ul>"},{"location":"design/design-patterns/cloud-resource-design-guidance/#tooling","title":"Tooling","text":"<ul> <li>Azure Resource Naming Tool</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/","title":"Data and DataOps Fundamentals","text":"<p>Most projects involve some type of data storage, data processing and data ops. For these projects, as with all projects, we follow the general guidelines laid out in other sections around security, testing, observability, CI/CD etc.</p>"},{"location":"design/design-patterns/data-heavy-design-guidance/#goal","title":"Goal","text":"<p>The goal of this section is to briefly describe how to apply the fundamentals to data heavy projects or portions of the project.</p>"},{"location":"design/design-patterns/data-heavy-design-guidance/#isolation","title":"Isolation","text":"<p>Please be cautious of which isolation levels you are using. Even with a database that offers serializability, it is possible that within a transaction or connection you are leveraging a lower isolation level than the database offers. In particular, read uncommitted (or eventual consistency), can have a lot of unpredictable side effects and introduce bugs that are difficult to reason about. Eventually consistent systems should be treated as a last resort for achieving your scalability requirements; batching, sharding, and caching are all recommended solutions to increase your scalability. If none of these options are tenable, consider evaluating the \"New SQL\" databases like CockroachDB or TiDB, before leveraging an option that relies on eventual consistency.</p> <p>There are other levels of isolation, outside the isolation levels mentioned in the link above. Some of these have nuances different from the 4 main levels, and can be difficult to compare. Snapshot Isolation, strict serializability, \"read your own writes\", monotonic reads, bounded staleness, causal consistency, and linearizability are all other terms you can look into to learn more on the subject.</p>"},{"location":"design/design-patterns/data-heavy-design-guidance/#concurrency-control","title":"Concurrency Control","text":"<p>Your systems should (almost) always leverage some form of concurrency control, to ensure correctness amongst competing requests and to prevent data races. The 2 forms of concurrency control are pessimistic and optimistic.</p> <p>A pessimistic transaction involves a first request to \"lock the data\", and a second request to write the data. In between these requests, no other requests touching that data will succeed. See 2 Phase Locking (also often known as 2 Phase Commit) for more info.</p> <p>The (more) recommended approach is optimistic concurrency, where a user can read the object at a specific version, and update the object if and only if it hasn't changed. This is typically done via the Etag Header.</p> <p>A simple way to accomplish this on the database side is to increment a version number on each update. This can be done in a single executed statement as:</p> <p>WARNING: the below will not work when using an isolation level at or lower than read uncommitted (eventual consistency).</p> <pre><code>-- Please treat this as pseudo code, and adjust as necessary.\n\nUPDATE &lt;table_name&gt;\nSET field1 = value1, ..., fieldN = valueN, version = $new_version\nWHERE ID = $id AND version = $version\n</code></pre>"},{"location":"design/design-patterns/data-heavy-design-guidance/#data-tiering-data-quality","title":"Data Tiering (Data Quality)","text":"<p>Develop a common understanding of the quality of your datasets so that everyone understands the quality of the data, and expected use cases and limitations.</p> <p>A common data quality model is <code>Bronze</code>, <code>Silver</code>, <code>Gold</code></p> <ul> <li>Bronze: This is a landing area for your raw datasets with none or minimal data transformations applied, and therefore are optimized for writes / ingestion. Treat these datasets as an immutable, append only store.</li> <li>Silver: These are cleansed, semi-processed datasets. These conform to a known schema and predefined data invariants and might have further data augmentation applied. These are typically used by data scientists.</li> <li>Gold: These are highly processed, highly read-optimized datasets primarily for consumption of business users. Typically, these are structured in your standard fact and dimension tables.</li> </ul> <p>Divide your data lake into three major areas containing your Bronze, Silver and Gold datasets.</p> <p>Note: Additional storage areas for malformed data, intermediate (sandbox) data, and libraries/packages/binaries are also useful when designing your storage organization.</p>"},{"location":"design/design-patterns/data-heavy-design-guidance/#data-validation","title":"Data Validation","text":"<p>Validate data early in your pipeline</p> <ul> <li>Add data validation between the Bronze and Silver datasets. By validating early in your pipeline, you can ensure all datasets conform to a specific schema and known data invariants. This can also potentially prevent data pipeline failures in case of unexpected changes to the input data.</li> <li>Data that does not pass this validation stage can be rerouted to a record store dedicated for malformed data for diagnostic purposes.</li> <li>It may be tempting to add validation prior to landing in the Bronze area of your data lake. This is generally not recommended. Bronze datasets are there to ensure you have as close of a copy of the source system data. This can be used to replay the data pipeline for both testing (i.e. testing data validation logic) and data recovery purposes (i.e. data corruption is introduced due to a bug in the data transformation code and thus the pipeline needs to be replayed).</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#idempotent-data-pipelines","title":"Idempotent Data Pipelines","text":"<p>Make your data pipelines re-playable and idempotent</p> <ul> <li>Silver and Gold datasets can get corrupted due to a number of reasons such as unintended bugs, unexpected input data changes, and more. By making data pipelines re-playable and idempotent, you can recover from this state through deployment of code fixes, and re-playing the data pipelines.</li> <li>Idempotency also ensures data-duplication is mitigated when replaying your data pipelines.</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#testing","title":"Testing","text":"<p>Ensure data transformation code is testable</p> <ul> <li>Abstracting away data transformation code from data access code is key to ensuring unit tests can be written against data transformation logic. An example of this is moving transformation code from notebooks into packages.</li> <li>While it is possible to run tests against notebooks, by extracting the code into packages, you increase the developer productivity by increasing the speed of the feedback cycle.</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#cicd-source-control-and-code-reviews","title":"CI/CD, Source Control and Code Reviews","text":"<ul> <li>All artifacts needed to build the data pipeline from scratch should be in source control. This included infrastructure-as-code artifacts, database objects (schema definitions, functions, stored procedures etc.), reference/application data, data pipeline definitions and data validation and transformation logic.</li> <li>Any new artifacts (code) introduced to the repository should be code reviewed, both automatically (linting, credential scanning etc.) and peer reviewed.</li> <li>There should be a safe, repeatable process (CI/CD) to move the changes through dev, test and finally production.</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#security-and-configuration","title":"Security and Configuration","text":"<ul> <li>Maintain a central, secure location for sensitive configuration such as database connection strings that can be accessed by the appropriate services within the specific environment.</li> <li>On Azure this is typically solved through securing secrets in a Key Vault per environment, then having the relevant services query KeyVault for the configuration</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#observability","title":"Observability","text":"<p>Monitor infrastructure, pipelines and data</p> <ul> <li>A proper monitoring solution should be in-place to ensure failures are identified, diagnosed and addressed in a timely manner. Aside from the base infrastructure and pipeline runs, data should also be monitored. A common area that should have data monitoring is the malformed record store.</li> </ul>"},{"location":"design/design-patterns/data-heavy-design-guidance/#end-to-end-and-azure-technology-samples","title":"End to End and Azure Technology Samples","text":"<p>The DataOps for the Modern Data Warehouse repo contains both end-to-end and technology specific samples on how to implement DataOps on Azure.</p> <p> Image: CI/CD for Data pipelines on Azure - from DataOps for the Modern Data Warehouse repo</p>"},{"location":"design/design-patterns/distributed-system-design-reference/","title":"Distributed System Design Reference","text":"<p>Distributed systems introduce new and interesting problems that need addressing. Software engineering as a field has dealt with these problems for years, and there are phenomenal resources available for reference when creating a new distributed system. Some that we recommend are as follows:</p> <ul> <li>Martin Fowler's Patterns of Distributed Systems</li> <li>microservices.io</li> <li>Azure's Cloud Design Patterns</li> </ul>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/","title":"Network Architecture Guidance for Azure","text":"<p>The following are some best practices when setting up and working with network resources in Azure Cloud environments.</p> <p>Note: When working in an existing cloud environment, it is important to understand any current patterns, and how they are used, before making a change to them. You should also work with the relevant stakeholders to make sure that any new patterns you introduce provide enough value to make the change.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#networking-and-vnet-setup","title":"Networking and VNet Setup","text":""},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#hub-and-spoke-topology","title":"Hub-and-Spoke Topology","text":"<p>A hub-and-spoke network topology is a common architecture pattern used in Azure for organizing and managing network resources. It is based on the concept of a central hub that connects to various spoke networks. This model is particularly useful for organizing resources, maintaining security, and simplifying network management.</p> <p>The hub-and-spoke model is implemented using Azure Virtual Networks (VNet) and VNet peering.</p> <ul> <li>The hub: The central VNet acts as a hub, providing shared services such as network security, monitoring, and connectivity to on-premises or other cloud environments. Common components in the hub include Network Virtual Appliances (NVAs), Azure Firewall, VPN Gateway, and ExpressRoute Gateway.</li> </ul> <ul> <li>The spokes: The spoke VNets represent separate units or applications within an organization, each with its own set of resources and services. They connect to the hub through VNet peering, which allows for communication between the hub and spoke VNets.</li> </ul> <p>Implementing a hub-and-spoke model in Azure offers several benefits:</p> <ul> <li>Isolation and segmentation: By dividing resources into separate spoke VNets, you can isolate and segment workloads, preventing any potential issues or security risks from affecting other parts of the network.</li> <li>Centralized management: The hub VNet acts as a single point of management for shared services, making it easier to maintain, monitor, and enforce policies across the network.</li> <li>Simplified connectivity: VNet peering enables seamless communication between the hub and spoke VNets without the need for complex routing or additional gateways, reducing latency and management overhead.</li> <li>Scalability: The hub-and-spoke model can easily scale to accommodate additional spokes as the organization grows or as new applications and services are introduced.</li> <li>Cost savings: By centralizing shared services in the hub, organizations can reduce the costs associated with deploying and managing multiple instances of the same services across different VNets.</li> </ul> <p>Read more about hub-and-spoke topology</p> <p>When deploying hub/spoke, it is recommended that you do so in connection with landing zones. This ensures consistency across all environments as well as guardrails to ensure a high level of security while giving developers freedom within development environments.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#firewall-and-security","title":"Firewall and Security","text":"<p>When using a hub-and-spoke topology it is possible to deploy a centralized firewall in the Hub that all outgoing traffic or traffic to/from certain VNets, this allows for centralized threat protection while minimizing costs.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#dns","title":"DNS","text":"<p>The best practices for handling DNS in Azure, and in cloud environments in general, include using managed DNS services. Some of the benefits of using managed DNS services is that the resources are designed to be secure, easy to deploy and configure.</p> <ul> <li>DNS forwarding: Set up DNS forwarding between your on-premises DNS servers and Azure DNS servers for name resolution across environments.</li> <li>Use Azure Private DNS zones for Azure resources: Configure Azure Private DNS zones for your Azure resources to ensure name resolution is kept within the virtual network.</li> </ul> <p>Read more about Hybrid/Multi-Cloud DNS infrastructure and Azure DNS infrastructure</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#ip-allocation","title":"IP Allocation","text":"<p>When allocating IP address spaces to Azure Virtual Networks (VNets), it's essential to follow best practices for proper management, and scalability.</p> <p>Here are some recommendations for IP allocation to VNets:</p> <ul> <li>Reserve IP addresses: Reserve IP addresses in your address space for critical resources or services.</li> <li>Public IP allocation: Minimize the use of public IP addresses and use Azure Private Link when possible to access services over a private connection.</li> <li>IP address management (IPAM): Use IPAM solutions to manage and track IP address allocation across your hybrid environment.</li> <li>Plan your address space: Choose an appropriate private address space (from RFC 1918) for your VNets that is large enough to accommodate future growth. Avoid overlapping with on-premises or other cloud networks.</li> <li>Use CIDR notation: Use Classless Inter-Domain Routing (CIDR) notation to define the VNet address space, which allows more efficient allocation and prevents wasting IP addresses.</li> <li>Use subnets: Divide your VNets into smaller subnets based on security, application, or environment requirements. This allows for better network management and security.</li> <li>Consider leaving a buffer between VNets: While it's not strictly necessary, leaving a buffer between VNets can be beneficial in some cases, especially when you anticipate future growth or when you might need to merge VNets. This can help avoid re-addressing conflicts when expanding or merging networks.</li> <li>Reserve IP addresses: Reserve a range of IP addresses within your VNet address space for critical resources or services. This ensures that they have a static IP address, which is essential for specific services or applications.</li> <li>Plan for hybrid scenarios: If you're working in a hybrid environment with on-premises or multi-cloud networks, ensure that you plan for IP address allocation across all environments. This includes avoiding overlapping address spaces and reserving IP addresses for specific resources like VPN gateways or ExpressRoute circuits.</li> </ul> <p>Read more at azure-best-practices/plan-for-ip-addressing</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-azure/#resource-allocation","title":"Resource Allocation","text":"<p>For resource allocation the best practices from Cloud Resource Design Guidance should be followed.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/","title":"Network Architecture Guidance for Hybrid","text":"<p>The following are best practices around how to design and configure resources, used for Hybrid and Multi-Cloud environments.</p> <p>Note: When working in an existing hybrid environment, it is important to understand any current patterns, and how they are used before making any changes.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/#hub-and-spoke-topology","title":"Hub-and-Spoke Topology","text":"<p>The hub-and-spoke topology doesn't change much when using cloud/hybrid if configured correctly, The main different is that the hub VNet is peering to the on-prem network via a ExpressRoute and that all traffic from Azure might exit via the ExpressRoute and the on-prem internet connection.</p> <p>The generalized best practices are in  Network Architecture Guidance for Azure#Hub and Spoke topology</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/#ip-allocation","title":"IP Allocation","text":"<p>When working with Hybrid deployment, take extra care when planning IP allocation as there is a much greater risk of overlapping network ranges.</p> <p>The general best practices are available in the Network Architecture Guidance for Azure#ip-allocation</p> <p>Read more about this in Azure Best Practices Plan for IP Addressing</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/#expressroute","title":"ExpressRoute","text":"<p>Environments using Express often tunnel all traffic from Azure via a private link (ExpressRoute) to an on-prem location. This imposes a few problems when working with PAAS offerings as not all of them connect via their respective private endpoint and instead use an external IP for outgoing connections, or some PAAS to PASS traffic occur internally in azure and won't function with disabled public networks.</p> <p>Two notable services here are data planes copies of storage accounts and a lot of the services not supporting private endpoints.</p> <p>Choose the right ExpressRoute circuit: Select an appropriate SKU (Standard or Premium) and bandwidth based on your organization's requirements. Redundancy: Ensure redundancy by provisioning two ExpressRoute circuits in different peering locations. Monitoring: Use Azure Monitor and Network Performance Monitor (NPM) to monitor the health and performance of your ExpressRoute circuits.</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/#dns","title":"DNS","text":"<p>General best practices are available in Network Architecture Guidance for Azure#dns</p> <p>When using Azure DNS in a hybrid or multi-cloud environment it is important to ensure a consistent DNS and forwarding configuration which ensures that records are automatically updated and that all DNS servers are aware of each other and know which server is the authoritative for the different records.</p> <p>Read more about Hybrid/Multi-Cloud DNS infrastructure</p>"},{"location":"design/design-patterns/network-architecture-guidance-for-hybrid/#resource-allocation","title":"Resource Allocation","text":"<p>For resource allocation the best practices from Cloud Resource Design Guidance should be followed.</p>"},{"location":"design/design-patterns/non-functional-requirements-capture-guide/","title":"Non-Functional Requirements Capture","text":""},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#goals","title":"Goals","text":"<p>In software engineering projects, non-functional requirements, also known as quality attributes, are specifications that define the operational attributes of a system rather than its specific behaviors. Unlike functional requirements, which outline what a system should do, non-functional requirements describe how the system performs certain functions under specific conditions. Non-functional requirements generally increase the cost as they require special efforts during the implementation, but by defining these requirements in detail early in the engagement, they can be properly evaluated when the cost of their impact on subsequent design decisions is comparatively low.</p>"},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#documenting-non-functional-requirements-best-practices","title":"Documenting Non-Functional Requirements - Best Practices","text":"<ul> <li>Be specific: Avoid ambiguity and make sure the requirement is quantitative, measurable and testable.</li> <li>Relate requirements with business objectives and understand the real impact of the system's behavior.</li> <li>Break it down: Try to define requirements at the component or process scope instead of the whole solution.</li> <li>Understand trade-off: Non-functional requirements may be in conflict with each other and it can be difficult to balance them and prioritize which one to implement.</li> </ul>"},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#template","title":"Template","text":"<p>This template can serve as a structured framework for capturing and documenting non-functional requirements effectively. Adjustments can be made to tailor it to the specific needs and preferences of the project team.</p> <ul> <li>Requirement name: name or title</li> <li>Description: brief description. Describe the importance and impact of this requirement to the business.</li> <li>Priority: High/Medium/Low or Must-have/Nice-to-have, etc</li> <li>Measurement/Metric: metric or measurement criteria</li> <li>Verification Method: Automated test, benchmark, simulation, prototyping, etc.</li> <li>Constraints: Budget, Time, Resources, Infrastructure, etc.</li> <li>Owner/Responsible Party</li> <li>Dependencies: technical dependencies, data dependencies, regulatory dependencies, etc.</li> </ul>"},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#examples","title":"Examples","text":"<p>To support the process of capturing a project's comprehensive non-functional requirements, this document offers a taxonomy for non-functional requirements and provides a framework for their identification, exploration, assignment of customer stakeholders, and eventual codification into formal engineering requirements as input to subsequent solution design.</p>"},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#operational-requirements","title":"Operational Requirements","text":"Quality Attribute Description Common Metrics Availability System's uptime and accessibility to users. - Uptime: Uptime measures the percentage of time that a system is operational and available for use. It is typically expressed as a percentage of total time (e.g., 99.9% uptime means the system is available 99.9% of the time). Common thresholds for uptime include:99% uptime: The system is available 99% of the time, allowing for approximately 3.65 days of downtime per year.99.9% uptime (three nines): The system is available 99.9% of the time, allowing for approximately 8.76 hours of downtime per year.99.99% uptime (four nines): The system is available 99.99% of the time, allowing for approximately 52.56 minutes of downtime per year.99.999% uptime (five nines): The system is available 99.999% of the time, allowing for approximately 5.26 minutes of downtime per year. Data Integrity Accuracy and consistency of data throughout its lifecycle. - Error Rate: The proportion of data entries that contain errors or inaccuracies. (\\text{Error Rate} = \\left( \\frac{\\text{Number of Errors}}{\\text{Total Number of Entries}} \\right) \\times 100)- Accuracy Rate: The percentage of data entries that are correct and match the source of truth. (\\text{Accuracy Rate} = \\left( \\frac{\\text{Number of Accurate Entries}}{\\text{Total Number of Entries}} \\right) \\times 100)- Duplicate Record Rate: The percentage of data entries that are duplicates. (\\text{Duplicate Record Rate} = \\left( \\frac{\\text{Number of Duplicate Entries}}{\\text{Total Number of Entries}} \\right) \\times 100) Disaster recovery and business continuity Determine the system's requirements for disaster recovery and business continuity, including backup and recovery procedures and disaster recovery testing. - Backup and Recovery: The application must have a Backup and Recovery plan in place that includes regular backups of all data and configurations, and a process for restoring data and functionality in the event of a disaster or disruption. - Redundancy: The application must have Redundancy built into its infrastructure, such as redundant servers, network devices, and power supplies, to ensure high availability and minimize downtime in the event of a failure.- Failover and high availability: The application must be designed to support Failover and high availability, such as by using load balancers or Failover clusters, to ensure that it can continue to operate in the event of a system failure or disruption.- Disaster Recovery plan: The application must have a comprehensive disaster Recovery plan that includes procedures for restoring data and functionality in the event of a major disaster, such as a natural disaster, cyber attack, or other catastrophic event.- Testing and Maintenance: The application must be regularly tested and maintained to ensure that it can withstand a disaster or disruption, and that all systems, processes, and data can be quickly restored and recovered. Reliability System's ability to maintain functionality under varying conditions and failure scenarios. - Mean Time Between Failures (MTBF): The system should achieve an MTBF of at least 1000 hours, indicating a high level of reliability with infrequent failures. - Mean Time to Recover (MTTR): The system should aim for an MTTR of less than 1 hour, ensuring quick recovery and minimal disruption in the event of a failure.- Redundancy Levels: The system should include redundancy mechanisms to achieve a redundancy level of N+1, ensuring high availability and fault tolerance."},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#performance-requirements","title":"Performance Requirements","text":"Quality Attribute Description Common Metrics Capacity Maximum load or volume that the system can handle within specified performance criteria. - Maximum Load Capacity: The system should be capable of handling peak loads without exceeding predefined performance degradation thresholds. Maximum load capacity may be expressed in terms of concurrent users, transactions per second, or data volume.- Resource Utilization: Measures the percentage of system resources (CPU, memory, disk I/O, network bandwidth) consumed under normal operation.- Concurrency: Measures the number of simultaneous users or transactions the system can handle without degradation in performance.- Throughput:  Measures the rate at which the system processes transactions, requests, or data. Thresholds may be defined in terms of transactions per second, requests per minute, or data throughput in bytes per second. Performance Define the expected response times, throughput, and resource usage of the solution. - Response time:  The application must load and respond to user interactions within 500 ms for button clicks.- Throughput:  The application must be able to handle 100 concurrent users or 500 transactions per second.- Resource utilization: The application must use less than 80% of CPU and 1 GB of memory.- Error rates: The application must have an error rate less than 1% of all requests, and be able to handle and recover from errors gracefully, without impacting user experience or data integrity. Scalability Determine how the system will handle increased user loads or larger datasets over time. - Load Balancing: The application must be able to handle a minimum of 250 concurrent users and support load balancing across at least 3 servers to handle peak traffic.- Database Scalability: The application's database must be able to handle at least 1 million records and support partitioning or sharding to ensure efficient storage and retrieval of data.- Cloud-Based Infrastructure: The application must be deployed on cloud-based infrastructure that can handle at least 100,000 requests per hour, and be able to scale up or down to meet changing demand.Microservices Architecture: The application must be designed using a microservices architecture that allows for easy scaling of individual services, and be able to handle at least 500 requests per second.- Caching: The application must be able to cache at least 10,000 records, with a cache hit rate of 95%, and support caching across multiple servers to ensure high availability."},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#security-and-compliance-requirements","title":"Security and Compliance Requirements","text":"Quality Attribute Description Common Metrics Compliance Adherence to legal, regulatory, and industry standards and requirements. See Microsoft Purview Compliance Manager Privacy Protection of sensitive information and compliance with privacy regulations. - Compliance with Privacy Regulations: Achieve full compliance with GDPR, CCPA and HIPAA.- Data Anonymization: Implement anonymization techniques in protecting individual privacy while still allowing for data analysis.- Data Encryption: Ensure that sensitive data is encrypted according to encryption standards and best practices.- User Privacy Preferences: The ability to respect and accommodate user privacy preferences regarding data collection, processing, and sharing. Security Establish the security requirements of the system, such as authentication, authorization, encryption, and compliance with industry or legal regulations. See Threat Modeling Tool Sustainability Ability to operate over an extended period while minimizing environmental impact and resource consumption. - Energy Efficiency: Kilowatt-hours/Transaction.- Carbon Footprint: Tons of CO2 emissions per year."},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#system-maintainability-requirements","title":"System Maintainability Requirements","text":"Quality Attribute Description Common Metrics Interoperability Ability to interact and exchange data with other systems or components. - Data Format Compatibility: The system must be interoperable with various Electronic Health Records (HER) systems to exchange patient data securely.- Protocol Compatibility: The system should import and export banking information from the ERP using REST protocol.- API Compatibility: The solution must adhere to API standards, ensuring backward compatibility with previous API versions, and providing comprehensive documentation for developers. Maintainability Ease of modifying, updating, and extending the software over time. - Code Complexity: The level of complexity in the system's codebase, measured using metrics such as cyclomatic complexity or lines of code per function. Lower code complexity makes maintenance tasks easier and reduces the likelihood of introducing defects. A cyclomatic complexity score of less than 10 or a lines of code per function metric below 50 is often desirable.- Code Coverage: The percentage of code covered by automated tests. Higher code coverage indicates better testability and facilitates easier maintenance by enabling faster detection of defects. A code coverage threshold of 80% or higher is commonly targeted.- Documentation Quality: The comprehensiveness and clarity of documentation accompanying the system, including design documents, technical specifications, and user manuals. Well-written documentation reduces the time and effort required for maintenance tasks. Documentation should cover at least 80% of system functionality with clear explanations and examples.- Dependency Management: The management of external dependencies and libraries used in the system. Proper dependency management reduces the risk of compatibility issues and simplifies maintenance tasks such as updates and patches.- Code Churn: The frequency of code changes within a software system. High code churn may indicate instability or frequent updates, making maintenance more challenging. A code churn rate of less than 20% is generally considered acceptable. Observability The ability to measure a system's internal state and performance based on the outputs it generates, such as logs, metrics, and traces. -System Metrics: CPU usage, memory usage, disk I/O, network I/O, and other resource utilization metrics.- Application Metrics: Response times, request rates, error rates, and throughput.- Custom Metrics: Application-specific metrics, such as user sign-ups, or specific business logic indicators. Portability Ability to run the software on different platforms, environments, and devices. - Platform Compatibility: The ability of the software to run on different operating systems (e.g., Windows, macOS, Linux) or platforms (e.g., desktop, mobile, web). Portability requires the software to be compatible with multiple platforms, with a goal of supporting at least three major platforms.- Hardware Compatibility: The ability of the software to run on different hardware configurations, such as varying processor architectures (e.g., x86, ARM) or memory sizes. Portability involves ensuring compatibility with a wide range of hardware configurations, with a goal of supporting common hardware architectures.- File System Independence: The software's ability to operate independently of the underlying file system, ensuring compatibility with different file systems (e.g., NTFS, ext4, APFS). Portability involves using file system abstraction layers or APIs to abstract file system operations and ensure consistency across platforms.- Data Format Compatibility: The software's ability to read and write data in different formats, ensuring compatibility with common data interchange formats (e.g., JSON, XML, CSV). Portability involves supporting standard data formats and providing mechanisms for data conversion and interoperability."},{"location":"design/design-patterns/non-functional-requirements-capture-guide/#user-experience-requirements","title":"User Experience Requirements","text":"Quality Attribute Description Common Metrics Accessibility The solution must be usable by people with disabilities. Compliance with accessibility standards. Support for assistive technologies - Alternative Text for Images: All images and non-text content must have alternative text descriptions that can be read by screen readers.- Color contrast: The application must use color schemes that meet the recommended contrast ratio between foreground and background colors to ensure visibility for users with low vision.- Focus indicators: The application must provide visible focus indicators to highlight the currently focused element, which is especially important for users who rely on keyboard navigation.- Captions and Transcripts: All audio and video content must have captions and transcripts, to ensure that users with hearing impairments can access the content.- Language identification: The application must correctly identify the language of the content, to ensure that screen readers and other assistive technologies can read the content properly. Internationalization and Localization Adaptation of the software for use in different languages and cultures. Tailoring the software to meet the specific needs of different regions or locales. - Language and Locale Support: The software's support for different languages, character sets, and locales. Portability requires internationalization and localization efforts to ensure that the software can be used effectively in different regions and cultures, with support for at least five major languages.- Multi currency: The system's support for multiple currencies, allowing different symbols and conversion rates. Usability Intuitiveness, ease of learning, and user satisfaction with the software interface. - Task Completion Time: The average time it takes for users to complete specific tasks. A user must be able to complete an account settings in less than 2 minutes.- Ease of Navigation: The ease with which users can navigate through the system and find the information they need. This can be measured by observing user interactions or conducting usability tests.- User Satisfaction: User satisfaction can be measured using surveys, feedback forms, or satisfaction ratings. A satisfaction score of 70% or higher is typically considered satisfactory.- Learnability: The ease with which new users can learn to use the system. This can be measured by the time it takes for users to perform basic tasks or by conducting usability tests with novice users."},{"location":"design/design-patterns/object-oriented-design-reference/","title":"Object-Oriented Design Reference","text":"<p>When writing software for large projects, the hardest part is often communication and maintenance. Following proven design patterns can optimize for maintenance, readability, and ease of extension. In particular, object-oriented design patterns are well-established in the industry.</p> <p>Please refer to the following resources to create strong object-oriented designs:</p> <ul> <li>Design Patterns Wikipedia</li> <li>Object Oriented Design Website</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/","title":"REST API Design Guidance","text":""},{"location":"design/design-patterns/rest-api-design-guidance/#goals","title":"Goals","text":"<ul> <li>Elevate Microsoft's published REST API design guidelines.</li> <li>Highlight common design decisions and factors to consider when designing.</li> <li>Provide additional resources to inform API design in areas not directly addressed by the Microsoft guidelines.</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/#common-api-design-decisions","title":"Common API Design Decisions","text":"<p>The Microsoft REST API guidelines provide design guidance covering a multitude of use-cases. The following sections are a good place to start as they are likely required considerations by any REST API design:</p> <ul> <li>URL Structure</li> <li>HTTP Methods</li> <li>HTTP Status Codes</li> <li>Collections</li> <li>JSON Standardizations</li> <li>Versioning</li> <li>Naming</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/#creating-api-contracts","title":"Creating API Contracts","text":"<p>As different development teams expose APIs to access various REST based services, it's important to have an API contract to share between the producer and consumers of APIs. Open API format is one of the most popular API description format. This Open API document can be produced in two ways:</p> <ul> <li>Design-First - Team starts developing APIs by first describing API designs as an Open API document and later generates server side boilerplate code with the help of this document.</li> <li>Code-First - Team starts writing the server side API interface code e.g. controllers, DTOs etc. and later generates and Open API document from it.</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/#design-first-approach","title":"Design-First Approach","text":"<p>A Design-First approach means that APIs are treated as \"first-class citizens\" and everything about a project revolves around the idea that at the end these APIs will be consumed by clients. So based on the business requirements API development team first start describing API designs as an Open API document and collaborate with the stakeholders to gather feedback.</p> <p>This approach is quite useful if a project is about developing externally exposed set of APIs which will be consumed by partners. In this approach, we first agree upon an API contract (Open API document) creating clear expectations on both API producer and consumer sides so both teams can begin work in parallel as per the pre-agreed API design.</p> <p>Key Benefits of this approach:</p> <ul> <li>Early API design feedback.</li> <li>Clearly established expectations for both consumer &amp; producer as both have agreed upon an API contract.</li> <li>Development teams can work in parallel.</li> <li>Testing team can use API contracts to write early tests even before business logic is in place. By looking at different models, paths, attributes and other aspects of the API testing can provide their input which can be very valuable.</li> <li>During an agile development cycle API definitions are not impacted by incremental dev changes.</li> <li>API design is not influenced by actual implementation limitations &amp; code structure.</li> <li>Server side boilerplate code e.g. controllers, DTOs etc. can be auto generated from API contracts.</li> <li>May improve collaboration between API producer &amp; consumer teams.</li> </ul> <p>Planning a Design-First Development:</p> <ol> <li>Identify use cases &amp; key services which API should offer.</li> <li>Identify key stakeholders of API and try to include them during API design phase to get continuous feedback.</li> <li>Write API contract definitions.</li> <li>Maintain consistent style for API status codes, versioning, error responses etc.</li> <li>Encourage peer reviews via pull requests.</li> <li>Generate server side boilerplate code &amp; client SDKs from API contract definitions.</li> </ol> <p>Important Points to consider:</p> <ul> <li>If API requirements changes often during initial development phase, than a Design-First approach may not be a good fit as this will introduce additional overhead, requiring repeated updates &amp; maintenance to the API contract definitions.</li> <li>It might be worthwhile to first try out your platform specific code generator and evaluate how much more additional work will be required in order to meet your project requirements and coding guidelines because it is possible that a particular platform specific code generator might not be able to generate a flexible &amp; maintainable implementation of actual code. For instance If your web framework requires annotations to be present on your controller classes (e.g. for API versioning or authentication), make sure that the code generation tool you use fully supports them.</li> <li>Microsoft TypeSpec is a valuable tool for developers who are working on complex APIs. By providing reusable patterns it can streamline API development and promote best practices. We have put together some samples about how to enforce an API design-first approach in a GitHub CI/CD pipeline to help accelerate it's adoption in a Design-First Development.</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/#code-first-approach","title":"Code-First Approach","text":"<p>A Code-First approach means that development teams first implements server side API interface code e.g. controllers, DTOs etc. and than generates API contract definitions out of it. In current times this approach is more widely popular within developer community than Design-First Approach.</p> <p>This approach has the advantages of allowing the team to quickly implement APIs and also providing the flexibility to react very quickly to any unexpected API requirement changes.</p> <p>Key Benefits of this approach:</p> <ul> <li>Rapid development of APIs as development team can start implementing APIs much faster directly after understanding key requirements &amp; use cases.</li> <li>Development team has better control &amp; flexibility to implement server side API interfaces in a way which best suited for project structure.</li> <li>More popular among development teams so its easier to get consensus on a related topic and also has more ready to use code examples available on various blogs or developer forums regarding how to generate Open API definitions out of actual code.</li> <li>During initial phase of development where both API producer &amp; consumers requirements might change often this approach is better as it provides flexibility to quickly react on such changes.</li> </ul> <p>Important Points to consider:</p> <ul> <li>A generated Open API definition can become outdated, so its important to have automated checks to avoid this otherwise generated client SDKs will be out of sync and may cause issues for API consumers.</li> <li>With Agile development, it is hard to ensure that definitions embedded in runtime code remain stable, especially across rounds of refactoring and when serving multiple concurrent API versions.</li> <li>It might be useful to regularly generate Open API definition and store it in version control system otherwise generating the OpenAPI definition at runtime might makes it more complex in scenarios where that definition is required at development/CI time.</li> </ul>"},{"location":"design/design-patterns/rest-api-design-guidance/#how-to-interpret-and-apply-the-guidelines","title":"How to Interpret and Apply the Guidelines","text":"<p>The API guidelines document includes a section on how to apply the guidelines depending on whether the API is new or existing. In particular, when working in an existing API ecosystem, be sure to align with stakeholders on a definition of what constitutes a breaking change to understand the impact of implementing certain best practices.</p> <p>We do not recommend making a breaking change to a service that predates these guidelines simply for the sake of compliance.</p>"},{"location":"design/design-patterns/rest-api-design-guidance/#resources","title":"Resources","text":"<ul> <li>Microsoft's Recommended Reading List for REST APIs</li> <li>Documentation - Guidance - REST APIs</li> <li>Detailed HTTP status code definitions</li> <li>Semantic Versioning</li> <li>Other Public API Guidelines</li> <li>Microsoft TypeSpec</li> <li>Microsoft TypeSpec GitHub Workflow samples</li> </ul>"},{"location":"design/design-reviews/","title":"Design Reviews","text":""},{"location":"design/design-reviews/#goals","title":"Goals","text":"<ul> <li>Reduce technical debt for our customers</li> <li>Continue to iterate on design after Game Plan review</li> <li>Generate useful technical artifacts that can be referenced by Microsoft and customers</li> </ul>"},{"location":"design/design-reviews/#measures","title":"Measures","text":""},{"location":"design/design-reviews/#cost-of-change","title":"Cost of Change","text":"<p>When incorporating design reviews as part of the engineering process, decisions are front-loaded before implementation begins. Making a decision of using Azure Kubernetes Service instead of App Services at the design phase likely only requires updating documentation. However, making this pivot after implementation has started or after a solution is in use is much more costly.</p> <p>Are these changes occurring before or after implementation? How large of effort are they typically?</p>"},{"location":"design/design-reviews/#reviewer-participation","title":"Reviewer Participation","text":"<p>How many individuals participate across the designs created? Cumulatively if this is a larger number this would indicate a wider contribution of ideas and perspectives. A lower number (i.e. same 2 individuals only on every review) might indicate a limited set of perspectives. Is anyone participating from outside the core development team?</p>"},{"location":"design/design-reviews/#time-to-potential-solutions","title":"Time To Potential Solutions","text":"<p>How long does it typically take to go from requirements to solution options (multiple)?</p> <p>There is a healthy balancing act between spending too much or too little time evaluating different potential solutions. Too little time puts higher risk of costly changes required after implementation. Too much time delays target value from being delivered; as well as subsequent features in queue. However, the faster the team can identify the most critical information necessary to make an informed decision, the faster value can be provided with lower risk of costly changes down the road.</p>"},{"location":"design/design-reviews/#time-to-decisions","title":"Time to Decisions","text":"<p>How long does it take to make a decision on which solution to implement?</p> <p>There is also a healthy balancing act in supporting a healthy debate while not hindering the team's delivery. The ideal case is for a team to quickly digest the solution options presented, ask questions, and debate before finally reaching quorum on a particular approach. In cases where no quorum can be reached, the person with the most context on the problem (typically story owner) should make the final decision. Prioritize delivering value and learning. Disagree and commit!</p>"},{"location":"design/design-reviews/#impact","title":"Impact","text":"<ul> <li>Solutions can be quickly be operated into customer's production environment</li> <li>Easier for other dev crews to leverage your teams work</li> <li>Easier for engineers to ramp up on projects</li> <li>Increase team velocity by front-loading changes and decisions when they cost the least</li> <li>Increased team engagement and transparency by soliciting wide reviewer participation</li> </ul>"},{"location":"design/design-reviews/#participation","title":"Participation","text":""},{"location":"design/design-reviews/#dev-crew","title":"Dev Crew","text":"<p>The dev crew should always participate in all design review sessions</p>"},{"location":"design/design-reviews/#domain-experts","title":"Domain Experts","text":"<p>Domain experts should participate in design review sessions as needed</p> <ul> <li>ISE Tech Domains</li> <li>Customer subject-matter experts (SME)</li> <li>Senior Leadership</li> </ul>"},{"location":"design/design-reviews/#facilitation-guidance","title":"Facilitation Guidance","text":""},{"location":"design/design-reviews/#recipes","title":"Recipes","text":"<p>Please see our Design Review Recipes for guidance on design process.</p>"},{"location":"design/design-reviews/#sync-design-reviews-via-in-person-virtual-meetings","title":"Sync Design Reviews via In-Person / Virtual Meetings","text":"<p>Joint meetings with dev crew, subject-matter experts (SMEs) and customer engineers</p>"},{"location":"design/design-reviews/#async-design-reviews-via-pull-requests","title":"Async Design Reviews via Pull-Requests","text":"<p>See the async design review recipe for guidance on facilitating async design reviews. This can be useful for teams that are geographically distributed across different time-zones.</p>"},{"location":"design/design-reviews/#technical-spike","title":"Technical Spike","text":"<p>A technical spike is most often used for evaluating the impact new technology has on the current implementation. Please read more here.</p>"},{"location":"design/design-reviews/#design-documentation","title":"Design Documentation","text":"<ul> <li>Document and update the architecture design in the project design documentation</li> <li>Track and document design decisions in a decision log</li> <li>Document decision process in trade studies when multiple solutions exist for the given problem</li> </ul> <p>Early on in engagements, the team must decide where to land artifacts generated from design reviews. Typically, we meet the customer where they are at (for example, using their Confluence instance to land documentation if that is their preferred process). However, similar to storing decision logs, trade studies, etc. in the development repo, there are also large benefits to maintaining design review artifacts in the repo as well. Usually these artifacts can be further added to root level documentation directory or even at the root of the corresponding project if the repo is monolithic. In adding them to the project repo, these artifacts must similarly be reviewed in Pull Requests (typically preceding but sometimes accompanying implementation) which allows async review/discussion. Furthermore, artifacts can then easily link to other sections of the repo and source code files (via markdown links).</p>"},{"location":"design/design-reviews/decision-log/","title":"Design Decision Log","text":"<p>Not all requirements can be captured in the beginning of an agile project during one or more design sessions. The initial architecture design can evolve or change during the project, especially if there are multiple possible technology choices that can be made. Tracking these changes within a large document is in most cases not ideal, as one can lose oversight over the design changes made at which point in time. Having to scan through a large document to find a specific content takes time, and in many cases the consequences of a decision is not documented.</p>"},{"location":"design/design-reviews/decision-log/#why-is-it-important-to-track-design-decisions","title":"Why is it Important to Track Design Decisions","text":"<p>Tracking an architecture design decision can have many advantages:</p> <ul> <li>Developers and project stakeholders can see the decision log and track the changes, even as the team composition changes over time.</li> <li>The log is kept up-to-date.</li> <li>The context of a decision including the consequences for the team are documented with the decision.</li> <li>It is easier to find the design decision in a log than having to read a large document.</li> </ul>"},{"location":"design/design-reviews/decision-log/#what-is-a-recommended-format-for-tracking-decisions","title":"What is a Recommended Format for Tracking Decisions","text":"<p>In addition to incorporating a design decision as an update of the overall design documentation of the project, the decisions could be tracked as Architecture Decision Records as Michael Nygard proposed in his blog.</p> <p>The effort invested in design reviews and discussions can be different throughout the course of a project. Sometimes decisions are made quickly without having to go into a detailed comparison of competing technologies. In some cases, it is necessary to have a more elaborate study of advantages and disadvantages, as is described in the documentation of Trade Studies. In other cases, it can be helpful to conduct Engineering Feasibility Spikes. An ADR can incorporate each of these different approaches.</p>"},{"location":"design/design-reviews/decision-log/#architecture-decision-record-adr","title":"Architecture Decision Record (ADR)","text":"<p>An architecture decision record has the structure</p> <p>[Ascending number]. [Title of decision]</p> <p>The title should give the reader the information on what was decided upon.</p> <p>Example:</p> <p>001. App level logging with Serilog and Application Insights</p> <p>Hint:</p> <p>When several developers regularly start ADRs in parallel, it becomes difficult to deal with conflicting ascending numbers. An easy way to overcome this is to give ADRs the ID of the work item they relate to.</p> <p>Date:</p> <p>The date the decision was made.</p> <p>Status:</p> <p>[Proposed/Accepted/Deprecated/Superseded]</p> <p>A proposed design can be reviewed by the development team prior to accepting it. A previous decision can be superseded by a new one, or the ADR record marked as deprecated in case it is not valid anymore.</p> <p>Context:</p> <p>The text should provide the reader an understanding of the problem, or as Michael Nygard puts it, a value-neutral [an objective] description of the forces at play.</p> <p>Example:</p> <p>Due to the microservices design of the platform, we need to ensure consistency of logging throughout each service so tracking of usage, performance, errors etc. can be performed end-to-end. A single logging/monitoring framework should be used where possible to achieve this, whilst allowing the flexibility for integration/export into other tools at a later stage. The developers should be equipped with a simple interface to log messages and metrics.</p> <p>If the development team had a data-driven approach to back the decision, i.e., a study that evaluates the potential choices against a set of objective criteria by following the guidance in Trade Studies, the study should be referred to in this section.</p> <p>Decision:</p> <p>The decision made, it should begin with 'We will...' or 'We have agreed to ...</p> <p>Example:</p> <p>We have agreed to utilize Serilog as the Dotnet Logging framework of choice at the application level, with integration into Log Analytics and Application Insights for analysis.</p> <p>Consequences:</p> <p>The resulting context, after having applied the decision.</p> <p>Example:</p> <p>Sampling will need to be configured in Application Insights so that it does not become overly-expensive when ingesting millions of messages, but also does not prevent capture of essential information. The team will need to only log what is agreed to be essential for monitoring as part of design reviews, to reduce noise and unnecessary levels of sampling.</p>"},{"location":"design/design-reviews/decision-log/#where-to-store-adrs","title":"Where to Store ADRs","text":"<p>ADRs can be stored and tracked in any version control system such as git. As a recommended practice, ADRs can be added as pull request in the proposed status to be discussed by the team until it is updated to accepted to be merged with the main branch. They are usually stored in a folder structure doc/adr or doc/arch. Additionally, it can be useful to track ADRs in a <code>decision-log.md</code> to provide useful metadata in an obvious format.</p>"},{"location":"design/design-reviews/decision-log/#decision-logs","title":"Decision Logs","text":"<p>A decision log is a Markdown file containing a table which provides executive summaries of the decisions contained in ADRs, as well as some other metadata. You can see a template table at <code>doc/decision-log.md</code>.</p>"},{"location":"design/design-reviews/decision-log/#when-to-track-adrs","title":"When to Track ADRs","text":"<p>Architecture design decisions are usually tracked whenever significant decisions are made that affect the structure and characteristics of the solution or framework we are building. ADRs can also be used to document results of spikes when evaluating different technology choices.</p>"},{"location":"design/design-reviews/decision-log/#examples-of-adrs","title":"Examples of ADRs","text":"<p>The first ADR could be the decision to use ADRs to track design decisions,</p> <ul> <li>0001-record-architecture-decisions.md,</li> </ul> <p>followed by actual decisions in the engagement as in the example used above,</p> <ul> <li>0002-app-level-logging.md.</li> </ul>"},{"location":"design/design-reviews/decision-log/doc/decision-log/","title":"Decision Log","text":"<p>This document is used to track key decisions that are made during the course of the project. This can be used at a later stage to understand why decisions were made and by whom.</p> Decision Date Alternatives Considered Reasoning Detailed doc Made By Work Required A one-sentence summary of the decision made. Date the decision was made. A list of the other approaches considered. A two to three sentence summary of why the decision was made. A link to the ADR with the format [Title] DR. Who made this decision? A link to the work item for the linked ADR."},{"location":"design/design-reviews/decision-log/doc/adr/0001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2020-03-20</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0001-record-architecture-decisions/#context","title":"Context","text":"<p>We need to record the architectural decisions made on this project.</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>We will use Architecture Decision Records, as described by Michael Nygard.</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>See Michael Nygard's article, linked above. For a lightweight ADR tool set, see Nat Pryce's adr-tools.</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0002-app-level-logging/","title":"2. App-level Logging with Serilog and Application Insights","text":"<p>Date: 2020-04-08</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0002-app-level-logging/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0002-app-level-logging/#context","title":"Context","text":"<p>Due to the microservices design of the platform, we need to ensure consistency of logging throughout each service so tracking of usage, performance, errors etc. can be performed end-to-end. A single logging/monitoring framework should be used where possible to achieve this, whilst allowing the flexibility for integration/export into other tools at a later stage. The developers should be equipped with a simple interface to log messages and metrics.</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0002-app-level-logging/#decision","title":"Decision","text":"<p>We have agreed to utilize Serilog as the Dotnet Logging framework of choice at the application level, with integration into Log Analytics and Application Insights for analysis.</p>"},{"location":"design/design-reviews/decision-log/doc/adr/0002-app-level-logging/#consequences","title":"Consequences","text":"<p>Sampling will need to be configured in Application Insights so that it does not become overly-expensive when ingesting millions of messages, but also does not prevent capture of essential information. The team will need to only log what is agreed to be essential for monitoring as part of design reviews, to reduce noise and unnecessary levels of sampling.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/","title":"Memory","text":"<p>These examples were taken from the Memory project, an internal tool for tracking an individual's accomplishments.</p> <p>The main example here is the Decision Log. Since this log was used from the start, the decisions are mostly based on technology choices made in the start of the project. All line items have a link out to the trade studies done for each technology choice.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/decision-log/","title":"Decision Log","text":"<p>This document is used to track key decisions that are made during the course of the project. This can be used at a later stage to understand why decisions were made and by whom.</p> Decision Date Alternatives Considered Reasoning Detailed doc Made By Work Required Use Architecture Decision Records 01/25/2021 Standard Design Docs An easy and low cost solution of tracking architecture decisions over the lifetime of a project Record Architecture Decisions Dev Team #21654 Use ArgoCD 01/26/2021 FluxCD ArgoCD is more feature rich, will support more scenarios, and will be a better tool to put in our tool belts. So we have decided at this point to go with ArgoCD GitOps Trade Study Dev Team #21672 Use Helm 01/28/2021 Kustomize, Kubes, Gitkube, Draft Platform maturity, templating, ArgoCD support K8s Package Manager Trade Study Dev Team #21674 Use CosmosDB 01/29/2021 Blob Storage, CosmosDB, SQL Server, Neo4j, JanusGraph, ArangoDB CosmosDB has better Azure integration, managed identity, and the Gremlin API is powerful. Graph Storage Trade Study and Decision Dev Team #21650 Use Azure Traffic Manager 02/02/2021 Azure Front Door A lightweight solution to route traffic between multiple k8s regional clusters Routing Trade Study Dev Team #21673 Use Linkerd + Contour 02/02/2021 Istio, Consul, Ambassador, Traefik A CNCF backed cloud native k8s stack to deliver service mesh, API gateway and ingress Routing Trade Study Dev Team #21673 Use ARM Templates 02/02/2021 Terraform, Pulumi, Az CLI Azure Native, Az Monitoring and incremental updates support Automated Deployment Trade Study Dev Team #21651 Use 99designs/gqlgen 02/04/2021 graphql, graphql-go, thunder Type safety, auto-registration and code generation GraphQL Golang Trade Study Dev Team #21775 Create normalized role data model 03/25/2021 Career Stage Profiles (CSP), Microsoft Role Library Requires a data model that support the data requirements of both role systems Role Data Model Schema Dev Team #22035 Design for edges and vertices 03/25/2021 N/A N/A Data Model Dev Team #21976 Use grammes 03/29/2021 Gremlin, gremgo, gremcos Balance of documentation and maturity Gremlin API library Trade Study Dev Team #21870 Design for Gremlin implementation 04/02/2021 N/A N/A Gremlin Dev Team #21980 Design for Gremlin implementation 04/02/2021 N/A N/A Gremlin Dev Team #21980 Expose 1:1 data model from API to DB 04/02/2021 Exposing a minified version of data model contract Team decided that there were no pieces of data that we can rule out as being useful. Will update if data model becomes too complex API README Dev Team #21658 Deprecate SonarCloud 04/05/2021 Checkstyle, PMD, FindBugs Requires paid plan to use in a private repo Code Quality &amp; Security Dev Team #22090 Adopted Stable Tagging Strategy 04/08/2021 N/A Team aligned on the proposed docker container tagging strategy Tagging Strategy Dev Team #22005"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/","title":"Graph Model","text":""},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#graph-vertices-and-edges","title":"Graph Vertices and Edges","text":"<p>The set of vertices (entities) and edges (relationships) of the graph model</p> Vertex (Source) Edge Type Relationship Type Vertex (Target) Notes Required Profession Applies 1:many Discipline Top most level of categorization * Discipline Defines 1:many Role Groups of related roles within a profession * AppliedBy 1:1 Profession 1 Role Requires 1:many Responsibility Individual role mapped to an employee 1+ Requires 1:many Competency 1+ RequiredBy 1:1 Discipline 1 Succeeds 1:1 Role Supports career progression between roles 1 Precedes 1:1 Role Supports career progression between roles 1 AssignedTo 1:many User Profile * Responsibility Expects 1:many Key Result A group of expected outcomes and key results for employees within a role 1+ ExpectedBy 1:1 Role 1 Competency Describes 1:many Behavior A set of behaviors that contribute to success 1+ DescribedBy 1:1 Role 1 Key Result ExpectedBy 1:1 Responsibility The expected outcome of performing a responsibility 1 Behavior ContributesTo 1:1 Competency The way in which one acts or conducts oneself 1 User Profile Fulfills many:1 Role 1+ Authors 1:many Entry * Reads many:many Entry * Entry SharedWith many:many User Profile Business logic should add manager to this list by default. These users should only have read access. * Demonstrates many:many Competency * Demonstrates many:many Behavior * Demonstrates many:many Responsibility * Demonstrates many:many Result * AuthoredBy many:1 UserProfile 1+ DiscussedBy 1:many Commentary * References many:many Artifact * Competency DemonstratedBy many:many Entry * Behavior DemonstratedBy many:many Entry * Responsibility DemonstratedBy many:many Entry * Result DemonstratedBy many:many Entry * Commentary Discusses many:1 Entry * Artifact ReferencedBy many:many Entry 1+"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#graph-properties","title":"Graph Properties","text":"<p>The full set of data properties available on each vertex and edge</p> Vertex/Edge Property Data Type Notes Required (Any) ID guid 1 Profession Title String 1 Description String 0 Discipline Title String 1 Description String 0 Role Title String 1 Description String 0 Level Band String SDE, SDE II, Senior, etc 1 Responsibility Title String 1 Description String 0 Competency Title String 1 Description String 0 Key Result Description String 1 Behavior Description String 1 User Profile Theme selection string there are only 2: dark, light 1 PersonaId guid[] there are only 2: User, Admin 1+ UserId guid Points to AAD object 1 DeploymentRing string[] Is used to deploy new versions 1 Project string[] list of user created projects * Entry Title string 1 DateCreated date 1 ReadyToShare boolean false if draft 1 AreaOfImpact string[] 3 options: self, contribute to others, leverage others * Commentary Data string 1 DateCreated date 1 Artifact Data string 1 DateCreated date 1 ArtifactType string describes the artifact type: markdown, blob link 1"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#vertex-descriptions","title":"Vertex Descriptions","text":""},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#profession","title":"Profession","text":"<p>Top most level of categorization</p> <pre><code>{\n    \"title\": \"Software Engineering\",\n    \"description\": \"Description of profession\",\n    \"disciplines\": []\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#discipline","title":"Discipline","text":"<p>Groups of related roles within a profession</p> <pre><code>{\n  \"title\": \"Site Reliability Engineering\",\n  \"description\": \"Description of discipline\",\n  \"roles\": []\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#role","title":"Role","text":"<p>Individual role mapped to an employee</p> <pre><code>{\n  \"title\": \"Site Reliability Engineering IC2\",\n  \"description\": \"Detailed description of role\",\n  \"responsibilities\": [],\n  \"competencies\": []\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#responsibility","title":"Responsibility","text":"<p>A group of expected outcomes and key results for employees within a role</p> <pre><code>{\n  \"title\": \"Technical Knowledge and Domain Specific Expertise\",\n  \"results\": []\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#competency","title":"Competency","text":"<p>A set of behaviors that contribute to success</p> <pre><code>{\n  \"title\": \"Adaptability\",\n  \"behaviors\": []\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#key-result","title":"Key Result","text":"<p>The expected outcome of performing a responsibility</p> <pre><code>{\n  \"description\": \"Develops a foundational understanding of distributed systems design...\"\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#behavior","title":"Behavior","text":"<p>The way in which one acts or conducts oneself</p> <pre><code>{\n  \"description\": \"Actively seeks information and tests assumptions.\"\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#user","title":"User","text":"<p>The user object refers to whom a person is. We do not store our own rather use Azure OIDs.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#user-profile","title":"User Profile","text":"<p>The user profile contains any user settings and edges specific to Memory.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#persona","title":"Persona","text":"<p>A user may hold multiple personas.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#entry","title":"Entry","text":"<p>The same entry object can hold many kinds of data, and at this stage of the project we decide that we will not store external data, so it's up to the user to provide a link to the data for a reader to click into and get redirected to a new tab to open.</p> <p>Note: This means that in the web app, we will need to ensure links are opened in new tabs.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#project","title":"Project","text":"<p>Projects are just string fields to represent what a user wants to group their entries under.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#area-of-impact","title":"Area of Impact","text":"<p>This refers to the 3 areas of impact in the venn-style diagram in the HR tool. The options are: self, contributing to impact of others, building on others' work.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#commentary","title":"Commentary","text":"<p>A comment is essentially a piece of text. However, anyone that an entry is shared with can add commentary on an entry.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#artifact","title":"Artifact","text":"<p>The artifact object contains the relevant data as markdown, or a link to the relevant data.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#full-role-json-example","title":"Full Role JSON Example","text":"<pre><code>{\n  \"id\": \"abc123\",\n  \"title\": \"Site Reliability Engineering IC2\",\n  \"description\": \"Detailed description of role\",\n  \"responsibilities\": [\n    {\n      \"id\": \"abc123\",\n      \"title\": \"Technical Knowledge and Domain Specific Expertise\",\n      \"results\": [\n        {\n          \"description\": \"Develops a foundational understanding of distributed systems design...\"\n        },\n        {\n          \"description\": \"Develops an understanding of the code, features, and operations of specific products...\"\n        }\n      ]\n    },\n    {\n      \"id\": \"abc123\",\n      \"title\": \"Contributions to Development and Design\",\n      \"results\": [\n        {\n          \"description\": \"Develops and tests basic changes to optimize code...\"\n        },\n        {\n          \"description\": \"Supports ongoing engagements with product engineering teams...\"\n        }\n      ]\n    }\n  ],\n  \"competencies\": [\n    {\n      \"id\": \"abc123\",\n      \"title\": \"Adaptability\",\n      \"behaviors\": [\n        { \"description\": \"Actively seeks information and tests assumptions.\" },\n        {\n          \"description\": \"Shifts his or her approach in response to the demands of a changing situation.\"\n        }\n      ]\n    },\n    {\n      \"id\": \"abc123\",\n      \"title\": \"Collaboration\",\n      \"behaviors\": [\n        {\n          \"description\": \"Removes barriers by working with others around a shared need or customer benefit.\"\n        },\n        {\n          \"description\": \" Incorporates diverse perspectives to thoroughly address complex business issues.\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"design/design-reviews/decision-log/examples/memory/Architecture/Data-Model/#api-data-model","title":"API Data Model","text":"<p>Because there is no internal edges or vertices that need to be hidden from API consumers, the API will expose a 1:1 mapping of the current data model for consumption. This is subject to change if our data model becomes too complex for downstream users.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/","title":"Application Deployment","text":"<p>The Memory application leverages Azure DevOps for work item tracking as well as continuous integration (CI) and continuous deployment (CD).</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#environments","title":"Environments","text":"<p>The Memory project uses multiple environments to isolate and test changes before promoting releases to the global user base.</p> <p>New environment rollouts are automatically triggered based upon a successful deployment of the previous stage /environment.</p> <p>The development, staging and production environments leverage slot deployment during an environment rollout. After a new release is deployed to a staging slot, it is validated through a series of functional integration tests. Upon a 100% pass rate of all tests the staging &amp; production slots are swapped effectively making updates to the environment available.</p> <p>Any errors or failed tests halt the deployment in the current stage and prevent changes to further environments.</p> <p>Each deployed environment is completely isolated and does not share any components. They each have unique resource instances of Azure Traffic Manager, Cosmos DB, etc.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#deployment-dependencies","title":"Deployment Dependencies","text":"Development Staging Production CI Quality Gates Development Staging Manual Approval"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#local","title":"Local","text":"<p>The local environment is used by individual software engineers during the development of new features and components.</p> <p>Engineers leverage some components from the deployed development environment that are not available on certain platforms or are unable to run locally.</p> <ul> <li>CosmosDB (Emulator only exists for Windows)</li> </ul> <p>The local environment also does not use Azure Traffic Manager. The frontend web app directly communicates to the backend REST API typically running on a separate localhost port mapping.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#development","title":"Development","text":"<p>The development environment is used as the first quality gate. All code that is checked into the <code>main</code> branch is automatically deployed to this environment after all CI quality gates have passed.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#dev-regions","title":"Dev Regions","text":"<ul> <li>West US (westus)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#staging","title":"Staging","text":"<p>The staging environment is used to validate new features, components and other changes prior to production rollout. This environment is primarily used by developers, QA and other company stakeholders.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#staging-regions","title":"Staging Regions","text":"<ul> <li>West US (westus)</li> <li>East US (eastus)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#production","title":"Production","text":"<p>The production environment is used by the worldwide user base. Changes to this environment are gated by manual approval by your product's leadership team in addition to other automatic quality gates.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#production-regions","title":"Production Regions","text":"<ul> <li>West US (westus)</li> <li>Central US (centralus)</li> <li>East US (eastus)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#environment-variable-group","title":"Environment Variable Group","text":""},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#infrastructure-setup-memory-common","title":"Infrastructure Setup (memory-common)","text":"<ul> <li>appName</li> <li>businessUnit</li> <li>serviceConnection</li> <li>subscriptionId</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#development-setup-memory-dev","title":"Development Setup (memory-dev)","text":"<ul> <li>environmentName (placeholder)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#staging-setup-memory-staging","title":"Staging Setup (memory-staging)","text":"<ul> <li>environmentName (placeholder)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/Deployment/Environments/#production-setup-memory-prod","title":"Production Setup (memory-prod)","text":"<ul> <li>environmentName (placeholder)</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/","title":"Trade Study: GitOps","text":"<ul> <li>Conducted by: Tess and Jeff</li> <li>Backlog Work Item: #21672</li> <li>Decision Makers: Wallace, whole team</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#overview","title":"Overview","text":"<p>For Memory, we will be creating a cloud native application with infrastructure as code. We will use GitOps for Continuous Deployment through pull requests infrastructure changes to be reflected.</p> <p>Overall, between our two options, one is more simple and targeted in a way that we believe would meet the requirements for this project. The other does the same, with additional features that may or may not be worth the extra configuration and setup.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#evaluation-criteria","title":"Evaluation Criteria","text":"<ol> <li>Repo style: mono versus multi</li> <li>Policy Enforcement</li> <li>Deployment Methods</li> <li>Deployment Monitoring</li> <li>Admission Control</li> <li>Azure Documentation availability</li> <li>Maintainability</li> <li>Maturity</li> <li>User Interface</li> </ol>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#solutions","title":"Solutions","text":""},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#flux","title":"Flux","text":"<p>Flux is a tool created by Waveworks and is built on top of Kubernetes' API extension system, supports multi-tenancy, and integrates seamlessly with popular tools like Prometheus.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#flux-acceptance-criteria-evaluation","title":"Flux Acceptance Criteria Evaluation","text":"<ol> <li>Repo style: mono versus multi<ul> <li>Flux supports both as of v2</li> </ul> </li> <li>Policy Enforcement<ul> <li>Azure Policy is in Preview</li> </ul> </li> <li>Deployment Methods<ul> <li>Define a Helm release using Helm Controllers</li> <li>Kustomization describes deployments</li> </ul> </li> <li>Deployment Monitoring<ul> <li>Flux works with Prometheus for deployment monitoring as well as Grafana dashboards</li> </ul> </li> <li>Admission Control<ul> <li>Flux uses RBAC from Kubernetes to lock down sync permissions.</li> <li>Uses the service account to access image pull secrets</li> </ul> </li> <li>Azure Documentation availability<ul> <li>Great, better when using Helm Operators</li> </ul> </li> <li>Maintainability<ul> <li>Manage via YAML files in git repo</li> </ul> </li> <li>Maturity<ul> <li>v2 is published under Apache license in GitHub, it works with Helm v3, and has PR commits from as recently as today</li> <li>945 stars, 94 forks</li> </ul> </li> <li>User Interface<ul> <li>CLI, the simplest lightweight option</li> </ul> </li> </ol> <p>Other features to call out (see more on website)</p> <ul> <li>Flux only supports Pull-based deployments which means it must be paired with an operator</li> <li>Flux can send notifications and receive webhooks for syncing</li> <li>Health assessments</li> <li>Dependency management</li> <li>Automatic deployment</li> <li>Garbage collection</li> <li>Deploy on commit</li> </ul>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#variations","title":"Variations","text":""},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#controllers","title":"Controllers","text":"<p>Both Controller options are optional.</p> <p>The Helm Controller additionally fetches helm artifacts to publish, see below diagram.</p> <p>The Kustomize Controller manages state and continuous deployment.</p> <p>We will not decide between the controller to use here, as that's a separate trade study, however we will note that Helm is more widely documented within Flux documentation.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#flux-v1","title":"Flux v1","text":"<p>Flux v1 is only in maintenance mode and should not be used anymore. So this section does not consider the v1 option a valid option.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#gitops-toolkit","title":"GitOps Toolkit","text":"<p>Flux v2 is built on top of the GitOps Toolkit, however we do not evaluate using the GitOps Toolkit alone as that is for when you want to make your own CD system, which is not what we want.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#argocd-with-helm-charts","title":"ArgoCD with Helm Charts","text":"<p>ArgoCD is a declarative, GitOps-based Continuous Delivery (CD) tool for Kubernetes.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#argocd-with-helm-acceptance-criteria-evaluation","title":"ArgoCD with Helm Acceptance Criteria Evaluation","text":"<ol> <li>Repo style: mono versus multi<ul> <li>ArgoCD supports both</li> </ul> </li> <li>Policy Enforcement<ul> <li>Azure Policy is in Preview</li> </ul> </li> <li>Deployment Methods<ul> <li>Deploy with Helm Chart</li> <li>Use Kustomize to apply some post-rendering to the Helm release templates</li> </ul> </li> <li>Deployment Monitoring<ul> <li>Argo CD expose two sets of Prometheus metrics (application metrics and API server metrics) for deployment monitoring.</li> </ul> </li> <li>Admission Control<ul> <li>ArgoCD use RBAC feature.    RBAC requires SSO configuration or one or more local users setup.    Once SSO or local users are configured, additional RBAC roles can be defined</li> <li>Argo CD does not have its own user management system and has only one built-in user admin.    The admin user is a superuser, and it has unrestricted access to the system</li> <li>Authorization is handled via JWT tokens and checking group claims in them</li> </ul> </li> <li>Azure Documentation availability<ul> <li>Argo has documentation on Azure AD</li> </ul> </li> <li>Maturity<ul> <li>Has PR commits from as recently as today</li> <li>5,000 stars, 1,100 forks</li> </ul> </li> <li>Maintainability<ul> <li>Can use GitOps to manage it</li> </ul> </li> <li>User Interface<ul> <li>ArgoCD has a GUI and can be used across clusters</li> </ul> </li> </ol> <p>Other features to call out (see more on website)</p> <ul> <li>ArgoCD support both pull model and push model for continuous delivery</li> <li>Argo can send notifications, but you need a separate tool for it</li> <li>Argo can receive webhooks</li> <li>Health assessments</li> <li>Potentially much more useful multi-tenancy tools.   Manages multiple projects, maps them to teams, etc.</li> <li>SSO Integration</li> <li>Garbage collection</li> </ul> <p></p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#results","title":"Results","text":"<p>This section should contain a table that has each solution rated against each of the evaluation criteria:</p> Solution Repo style Policy Enforcement Deployment Methods Deployment Monitoring Admission Control Azure Doc Maintainability Maturity UI Flux mono, multi Azure Policy, preview Helm, Kustomize Prometheus, Grafana RBAC Yes on Azure YAML in git repo 945 stars, 94 forks, currently maintained CLI ArgoCD mono, multi Azure Policy, preview Helm, Kustomize, KSonnet, ... Prometheus, Grafana RBAC Only in their own docs manifests in git repo 5,000 stars, 1,100 forks GUI, multiple clusters in same GUI"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#decision","title":"Decision","text":"<p>ArgoCD is more feature rich, will support more scenarios, and will be a better tool to put in our tool belts. So we have decided at this point to go with ArgoCD.</p>"},{"location":"design/design-reviews/decision-log/examples/memory/trade-studies/gitops/#resources","title":"Resources","text":"<ol> <li>GitOps</li> <li>Enforcement</li> <li>Monitoring</li> <li>Policies</li> <li>Deployment</li> <li>Push with ArgoCD in Azure DevOps</li> </ol>"},{"location":"design/design-reviews/recipes/","title":"Design Review Recipes","text":"<p>Design reviews come in all shapes and sizes. There are also different items to consider when creating a design at different stages during an engagement</p>"},{"location":"design/design-reviews/recipes/#design-review-process","title":"Design Review Process","text":"<ul> <li>Incorporate design reviews throughout the lifetime of an engagement</li> </ul>"},{"location":"design/design-reviews/recipes/#design-review-templates","title":"Design Review Templates","text":""},{"location":"design/design-reviews/recipes/#game-plan","title":"Game Plan","text":"<ul> <li>The same template already in use today</li> <li>High level architecture and design</li> <li>Includes technologies, languages &amp; products to complete engagement objective</li> </ul>"},{"location":"design/design-reviews/recipes/#milestone-epic-design-review","title":"Milestone / Epic Design Review","text":"<ul> <li>Should be considered when an engagement contains multiple milestones or epics</li> <li>Design should be more detailed than game plan</li> <li>May require unique deployment, security and/or privacy characteristics from other milestones</li> </ul>"},{"location":"design/design-reviews/recipes/#feature-story-design-review","title":"Feature / Story Design Review","text":"<ul> <li>Design for complex features or stories</li> <li>Will reuse deployment, security and other characteristics defined within game plan or milestone</li> <li>May require new libraries, OSS or patterns to accomplish goals</li> </ul>"},{"location":"design/design-reviews/recipes/#task-design-review","title":"Task Design Review","text":"<ul> <li>Highly detailed design for a complex tasks with many unknowns</li> <li>Will integrate into higher level feature/component designs</li> </ul>"},{"location":"design/design-reviews/recipes/async-design-reviews/","title":"Async Design Reviews","text":""},{"location":"design/design-reviews/recipes/async-design-reviews/#goals","title":"Goals","text":"<p>Allow team members to review designs as their work schedule allows.</p>"},{"location":"design/design-reviews/recipes/async-design-reviews/#impact","title":"Impact","text":"<p>This in turn results in the following benefits:</p> <ul> <li>Higher Participation &amp; Accessibility. They do not need to be online and available at the same time as others to review.</li> <li>Reduced Time Constraint. Reviewers can spend longer than the duration of a single meeting to think through the approach and provide feedback.</li> </ul>"},{"location":"design/design-reviews/recipes/async-design-reviews/#measures","title":"Measures","text":"<p>The metrics and/or KPIs used for design reviews overall would still apply. See design reviews for measures guidance.</p>"},{"location":"design/design-reviews/recipes/async-design-reviews/#participation","title":"Participation","text":"<p>The participation should be same as any design review. See design reviews for participation guidance.</p>"},{"location":"design/design-reviews/recipes/async-design-reviews/#facilitation-guidance","title":"Facilitation Guidance","text":"<p>The concept is to have the design follow the same workflow as any code changes to implement story or task. Rather than code however, the artifacts being added or changed are Markdown documents as well as any other supporting artifacts (prototypes, code samples, diagrams, etc).</p>"},{"location":"design/design-reviews/recipes/async-design-reviews/#prerequisites","title":"Prerequisites","text":""},{"location":"design/design-reviews/recipes/async-design-reviews/#source-controlled-design-docs","title":"Source Controlled Design Docs","text":"<p>Design documentation must live in a source control repository that supports pull requests (i.e. git). The following guidelines can be used to determine what repository houses the docs</p> <ol> <li>Keeping docs in the same repo as the affected code allows for the docs to be updated atomically alongside code within the same pull request.</li> <li>If the documentation represents code that lives in many different repositories, it may make more sense to keep the docs in their own repository.</li> <li>Place the docs so that they do not trigger CI builds for the affected code (assuming the documentation was the only change). This can be done by placing them in an isolated directory should they live alongside the code they represent. See directory structure example below.</li> </ol> <pre><code>-root\n  --src\n  --docs &lt;-- exclude from ci build trigger\n    --design\n</code></pre>"},{"location":"design/design-reviews/recipes/async-design-reviews/#workflow","title":"Workflow","text":"<ol> <li>The designer branches the repo with the documentation.</li> <li>The designer works on adding or updating documentation relevant to the design.</li> <li>The designer submits pull request and requests specific team members to review.</li> <li>Reviewers provide feedback to Designer who incorporates the feedback.</li> <li>(OPTIONAL) Design review meeting might be held to give deeper explanation of design to reviewers.</li> <li>Design is approved/accepted and merged to main branch.</li> </ol>"},{"location":"design/design-reviews/recipes/async-design-reviews/#tips-for-faster-review-cycles","title":"Tips for Faster Review Cycles","text":"<p>To make sure a design is reviewed in a timely manner, it's important to directly request reviews from team members. If team members are assigned without asking, or if no one is assigned it's likely the design will sit for longer without review. Try the following actions:</p> <ol> <li>Make it the designer's responsibility to find reviewers for their design</li> <li>The designer should ask a team member directly (face-to-face conversation, async messaging, etc) if they are available to review. Only if they agree, then assign them as a reviewer.</li> <li>Indicate if the design is ready to be merged once approved.</li> </ol>"},{"location":"design/design-reviews/recipes/async-design-reviews/#indicate-design-completeness","title":"Indicate Design Completeness","text":"<p>It helps the reviewer to understand if the design is ready to be accepted or if its still a work-in-progress. The level and type of feedback the reviewer provides will likely be different depending on its state. Try the following actions to indicate the design state</p> <ol> <li>Mark the PR as a Draft. Some ALM tools support opening a pull request as a Draft such as Azure DevOps.</li> <li>Prefix the title with \"DRAFT\", \"WIP\", or \"work-in-progress\".</li> <li>Set the pull request to automatically merge after approvals and checks have passed. This can indicate to the reviewer the design is complete from the designer's perspective.</li> </ol>"},{"location":"design/design-reviews/recipes/async-design-reviews/#practice-inclusive-behaviors","title":"Practice Inclusive Behaviors","text":"<p>The designated reviewers are not the only team members that can provide feedback on the design. If other team members voluntarily committed time to providing feedback or asking questions, be sure to respond. Utilize face-to-face conversation (in person or virtual) to resolve feedback or questions from others as needed. This aids in building team cohesiveness in ensuring everyone understands and is willing to commit to a given design. This practice demonstrates inclusive behavior; which will promote trust and respect within the team.</p> <ol> <li>Respond to all PR comments objectively and respectively irrespective of the authors level, position, or title.</li> <li>After two round trips of question/response, resort to synchronous communication for resolution (i.e. virtual or physical face-to-face conversation).</li> </ol>"},{"location":"design/design-reviews/recipes/engagement-process/","title":"Incorporating Design Reviews into an Engagement","text":""},{"location":"design/design-reviews/recipes/engagement-process/#introduction","title":"Introduction","text":"<p>Design reviews should not feel like a burden. Design reviews can be easily incorporated into the dev crew process with minimal overhead.</p> <ul> <li>Only create design reviews when needed. Not every story or task requires a complete design review.</li> <li>Leverage this guidance to make changes that best fit in with the team. Every team works differently.</li> <li>Leverage Microsoft subject-matter experts (SME) as needed during design reviews. Not every story needs SME or leadership sign-off. Most design reviews can be fully executed within a dev crew.</li> <li>Use diagrams to visualize concepts and architecture.</li> </ul> <p>The following guidelines outline how Microsoft and the customer together can incorporate design reviews into their day-to-day agile processes.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#envisioning-architecture-design-session-ads","title":"Envisioning / Architecture Design Session (ADS)","text":"<p>Early in an engagement Microsoft works with customers to understand their unique goals and objectives and establish a definition of done. Microsoft dives deep into existing customer infrastructure and architecture to understand potential constraints. Additionally, we seek to understand and uncover specific non-functional requirements that influence the solution.</p> <p>During this time the team uncovers many unknowns, leveraging all new-found information, in order to help generate an impactful design that meets customer goals. After ADS it can be helpful to conduct Engineering Feasibility Spikes to further de-risk technologies being considered for the engagement.</p> <p>Tip: All unknowns have not been addressed at this point.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#sprint-planning","title":"Sprint Planning","text":"<p>In many engagements Microsoft works with customers using a SCRUM agile development process which begins with sprint planning. Sprint planning is a great opportunity to dive deep into the next set of high priority work. Some key points to address are the following:</p> <ol> <li>Identify stories that require design reviews</li> <li>Separate design from implementation for complex stories</li> <li>Assign an owner to each design story</li> </ol> <p>Stories that will benefit from design reviews have one or more of the following in common:</p> <ol> <li>There are many unknown or unclear requirements</li> <li>There is a wide distribution of anticipated workload, or story pointing, across the dev crew</li> <li>The developer cannot clearly illustrate all tasks required for the story</li> </ol> <p>Tip: After sprint planning is complete the team should consider hosting an initial design review discussion to dive deep in the design requirement of the stories that were identified. This will provide more clarity so that the team can move forward with a design review, synchronously or asynchronously, and complete tasks.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#sprint-backlog-refinement","title":"Sprint Backlog Refinement","text":"<p>If your team is not already hosting a Sprint Backlog Refinement session at least once per week you should consider it. It is a great opportunity to:</p> <ol> <li>Keep the backlog clean</li> <li>Re-prioritize work based on shifting business priorities</li> <li>Fill in missing descriptions and acceptance criteria</li> <li>Identify stories that require design reviews</li> </ol> <p>The team can follow the same steps from sprint planning to help identify which stories require design reviews. This can often save much time during the actual sprint planning meetings to focus on the task at hand.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#sprint-retrospectives","title":"Sprint Retrospectives","text":"<p>Sprint retrospectives are a great time to check in with the dev team, identify what is working or not working, and propose changes to keep improving.</p> <p>It is also a great time to check in on design reviews</p> <ul> <li>Did any of the designs change from last sprint?</li> <li>How have design changes impacted the engagement?</li> <li>Have previous design artifacts been updated to reflect new changes?</li> </ul> <p>All design artifacts should be treated as a living document. As requirements change or uncover more unknowns the dev crew should retroactively update all design artifacts. Missing this critical step may cause the customer to incur future technical debt. Artifacts that are not up to date are <code>bugs</code> in the design.</p> <p>Tip: Keep your artifacts up to date by adding it to your teams definition of done for all user stories.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#sync-design-reviews","title":"Sync Design Reviews","text":"<p>It is often helpful to schedule 1-2 design sessions per sprint as part of the normal aforementioned meeting cadence. Throughout the sprint, folks can add design topics to the meeting agenda and if there is nothing to discuss for a particular meeting occurrence, it can simply be cancelled. While these sessions may not always be used, they help project members align on timing and purpose early on and establish precedence, often encouraging participation so design topics don't slip through the cracks. Oftentimes, it is helpful for those project members intending to present their design to the wider group to distribute documentation on their design prior to the session so that other participants can come prepared with context heading into the session.</p> <p>It should be noted that the necessity of these sessions certainly evolves over the course of the engagement. Early on, or in other times of more ambiguity, these meetings are typically used more often and more fully.</p> <p>Lastly, while it is suggested that sync design reviews are scheduled during the normal sprint cadence, scheduling ad-hoc sessions should not be discouraged - even if these reviews are limited to the participants of a specific workstream.</p>"},{"location":"design/design-reviews/recipes/engagement-process/#wrap-up-sprints","title":"Wrap-up Sprints","text":"<p>Wrap-up sprints are a great time to tie up loose ends with the customer and hand-off solution. Customer hand-off becomes a lot easier when there are design artifacts to reference and deliver alongside the completed solution.</p> <p>During your wrap-up sprints the dev crew should consider the following:</p> <ol> <li>Are the design artifacts up to date?</li> <li>Are the design artifacts stored in an accessible location?</li> </ol>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/","title":"Engineering Feasibility Spikes: Identifying and Mitigating Risk","text":""},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#introduction","title":"Introduction","text":"<p>Some engagements require more de-risking than others. Even after Architectural Design Sessions (ADS) an engagement may still have substantial technical unknowns. These types of engagements warrant an exploratory/validation phase where Engineering Feasibility Spikes can be conducted immediately after envisioning/ADS and before engineering sprints.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#engineering-feasibility-spikes","title":"Engineering Feasibility Spikes","text":"<ul> <li>Are regimented yet collaborative time-boxed investigatory activities conducted in a feedback loop to capitalize on individual learnings to inform the team.</li> <li>Increase the team\u2019s knowledge and understanding while minimizing engagement risks.</li> </ul> <p>The following guidelines outline how Microsoft and the customer can incorporate engineering feasibility spikes into the day-to-day agile processes.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#pre-mortem","title":"Pre-Mortem","text":"<p>A good way to gauge what engineering spikes to conduct is to do a pre-mortem.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#what-is-a-pre-mortem","title":"What is a Pre-Mortem?","text":"<ul> <li>A 90-minute meeting after envisioning/ADS that includes the entire team (and can also include the customer) which answers \"Imagine the project has failed. What problems and challenges caused this failure?\"</li> <li>Allows the entire team to initially raise concerns and risks early in the engagement.</li> </ul> <p>This input is used to decide which risks to pursue as engineering spikes.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#sharing-learnings-current-progress","title":"Sharing Learnings &amp; Current Progress","text":""},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#feedback-loop","title":"Feedback Loop","text":"<p>The key element from conducting the engineering feasibility spikes is sharing the outcomes in-flight.</p> <ul> <li>The team gets together and shares learning on a weekly basis (or more frequently if needed).</li> <li>The sharing is done via a 30-minute call.</li> <li>Everyone on the Dev Crew joins the call (even if not everyone is assigned an engineering spike story or even if the spike work was underway and not fully completed).</li> </ul> <p>The feedback loop is significantly tighter/shorter than in sprint-based agile process. Instead of using the Sprint as the forcing function to adjust/pivot/re-prioritize, the interim sharing sessions were the trigger.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#re-prioritizing-the-next-spikes","title":"Re-Prioritizing the Next Spikes","text":"<p>After the team shares current progress, another round of planning is done. This allows the team to</p> <ul> <li>Establish a very tight feedback loop.</li> <li>Re-prioritize the next spike(s) because of the outcome from the current engineering feasibility spikes.</li> </ul>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#adjusting-based-on-context","title":"Adjusting Based on Context","text":"<p>During the sharing call, and when the team believes it has enough information, the team sometimes comes to the realization that the original spike acceptance criteria is no longer valid. The team pivots into another area that provides more value.</p> <p>A decision log can be used to track outcomes.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#engineering-feasibility-sprints-diagram","title":"Engineering Feasibility Sprints Diagram","text":"<p>The process is depicted in the diagram below.</p> <p></p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#benefits","title":"Benefits","text":""},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#creating-code-samples-to-prove-out-ideas","title":"Creating Code Samples to Prove Out Ideas","text":"<p>It is important to note to be intentional about the spikes not aiming to produce production-level code.</p> <ul> <li>The team sometimes must write code to arrive at the technical learning.</li> <li>The team must be cognizant that the code written for the spikes is not going to serve as the code for the final solution.</li> <li>The code written is just enough to drive the investigation forward with greater confidence.</li> </ul> <p>For example, supposed the team was exploring the API choreography of creating a Graph client with various Azure Active Directory (AAD) authentication flows and permissions. The code to demonstrate this is implemented in a console app, but it could have been done via an Express server, etc. The fact that it was a console app was not important, but rather the ability of the Graph client to be able to do operations against the Graph API endpoint with the minimal number of permissions is the main learning goal.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#targeted-conversations","title":"Targeted Conversations","text":"<p>By sharing the progress of the spike, the team\u2019s collective knowledge increases.</p> <ul> <li>The spikes allow the team to drive succinct conversations with various Product Groups (PGs) and other subject matter experts (SMEs).</li> <li>Rather than speaking at a hypothetical level, the team playbacks project/architecture concerns and concretely points out why something is a showstopper or not a viable way forward.</li> </ul>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#increased-customer-trust","title":"Increased Customer Trust","text":"<p>This process leads to increased customer trust.</p> <p>Using this process, the team</p> <ul> <li>Brings the customer along in the decision-making process and guides them how to go forward.</li> <li>Provides answers with confidence and suggests sound architectural designs.</li> </ul> <p>Conducting engineering feasibility spikes sets the team and the customer up for success, especially if it highlights technology learnings that help the customer fully understand the feasibility/viability of an engineering solution.</p>"},{"location":"design/design-reviews/recipes/engineering-feasibility-spikes/#summary-of-key-points","title":"Summary of Key Points","text":"<ul> <li>A pre-mortem can involve the whole team in surfacing business and technical risks.</li> <li>The key purpose of the engineering feasibility spike is learning.</li> <li>Learning comes from both conducting and sharing insights from spikes.</li> <li>Use new spike infused learnings to revise, refine, re-prioritize, or create the next set of spikes.</li> <li>When spikes are completed, look for new weekly rhythms like adding a \u2018risk\u2019 column to the retro board or raising topics at daily standup to identify emerging risks.</li> </ul>"},{"location":"design/design-reviews/recipes/high-level-design-recipe/","title":"High Level / Game Plan Design Recipe","text":""},{"location":"design/design-reviews/recipes/high-level-design-recipe/#why-is-this-valuable","title":"Why is this Valuable?","text":"<p>Design at macroscopic level shows the interactions between systems and services that will be used to accomplish the project. It is intended to ensure there is high level understanding of the plan for what to build, which off-the-shelf components will be used, and which external components will need to interact with the deliverable.</p>"},{"location":"design/design-reviews/recipes/high-level-design-recipe/#things-to-keep-in-mind","title":"Things to Keep in Mind","text":"<ul> <li>As with all other aspects of the project, design reviews must provide a friendly and safe environment so that any team member feels comfortable proposing a design for review and can use the opportunity to grow and learn from the constructive / non-judgemental feedback from peers and subject-matter experts (see Team Agreements).</li> <li>Attempt to illustrate different personas involved in the use cases and how/which boxes are their entry points.</li> <li>Prefer pictures over paragraphs. The diagrams aren't intended to generate code, so they should be fairly high level.<ul> <li>Artifacts should indicate the direction of calls (are they outbound, inbound, or bidirectional?) and call out system boundaries where ports might need to be opened or additional infrastructure work may be needed to allow calls to be made.</li> <li>Sequence diagrams are helpful to show the flow of calls among components + systems.</li> <li>Generic box diagrams depicting data flow or call origination/destination are useful. However, the title should clearly define what the arrows show indicate. In most cases, a diagram will show either data flow or call directions but not both.</li> <li>Visualize the contrasting aspects of the system/diagram for ease of communication. e.g. differing technologies employed, modified vs. untouched components, or internet vs. local cloud components. Colors, grouping boxes, and iconography can be used for differentiating.</li> <li>Prefer ease-of-understanding for communicating ideas over strict UML correctness.</li> </ul> </li> <li>Design reviews should be lightweight and should not feel like an additional process overhead.</li> </ul>"},{"location":"design/design-reviews/recipes/high-level-design-recipe/#examples","title":"Examples","text":""},{"location":"design/design-reviews/recipes/milestone-epic-design-review-recipe/","title":"Milestone / Epic Design Review Recipe","text":""},{"location":"design/design-reviews/recipes/milestone-epic-design-review-recipe/#why-is-this-valuable","title":"Why is this Valuable?","text":"<p>Design at epic/milestone level can help the team make better decisions about prioritization by summarizing the value, effort, complexity, risks, and dependencies. This brief document can help the team align on the selected approach and briefly explain the rationale for other teams, subject-matter experts, project advisors, and new team members.</p>"},{"location":"design/design-reviews/recipes/milestone-epic-design-review-recipe/#things-to-keep-in-mind","title":"Things to Keep in Mind","text":"<ul> <li>As with all other aspects of the project, design reviews must provide a friendly and safe environment so that any team member feels comfortable proposing a design for review and can use the opportunity to grow and learn from the constructive / non-judgemental feedback from peers and subject-matter experts (see Team Agreements).</li> <li>Design reviews should be lightweight and should not feel like an additional process overhead.</li> <li>Dev Lead can usually provide guidance on whether a given epic/milestone needs a design review and can help other team members in preparation.</li> <li>This is not a strict template that must be followed and teams should not be bogged down with polished \"design presentations\".</li> <li>Think of the recipe below as a \"menu of options\" for potential questions to think through in designing this epic. Not all sections are required for every epic. Focus on sections and questions that are most relevant for making the decision and rationalizing the trade-offs.</li> <li>Milestone/epic design is considered high-level design but is usually more detailed than the design included in the Game Plan, but will likely re-use some technologies, non-functional requirements, and constraints mentioned in the Game Plan.</li> <li>As the team learned more about the project and further refined the scope of the epic, they may specifically call out notable changes to the overall approach and, in particular, highlight any unique deployment, security, private, scalability, etc. characteristics of this milestone.</li> </ul>"},{"location":"design/design-reviews/recipes/milestone-epic-design-review-recipe/#template","title":"Template","text":"<p>You can download the Milestone/Epic Design Review Template, copy it into your project, and use it as described in the async design review recipe.</p>"},{"location":"design/design-reviews/recipes/preferred-diagram-tooling/","title":"Preferred Diagram Tooling","text":"<p>At each stage in the engagement process, diagrams are a key part of the design review. The preferred tooling for creating and maintaining diagrams is to choose one of the following:</p> <ul> <li>Microsoft Visio</li> <li>Microsoft PowerPoint</li> <li>The <code>.drawio.png</code> (or <code>.drawio</code>) format from diagrams.net (formerly draw.io)</li> </ul> <p>In all cases, we recommend storing the exported PNG images from these diagrams in the repo along with the source files so they can easily be referenced in documentation and more easily reviewed during PRs. The <code>.drawio.png</code> format stores both at once.</p>"},{"location":"design/design-reviews/recipes/preferred-diagram-tooling/#microsoft-visio","title":"Microsoft Visio","text":"<p>It contains a lot of shapes out of the box, including Azure icons, the desktop app exists on PC, and there's a great Web app. Most diagrams in the Azure Architecture Center are Visio diagrams.</p>"},{"location":"design/design-reviews/recipes/preferred-diagram-tooling/#microsoft-powerpoint","title":"Microsoft PowerPoint","text":"<p>Diagrams can be easily reused in presentations, a PowerPoint license is pretty common, the desktop app exists on PC and on the Mac, and there's a great Web app.</p>"},{"location":"design/design-reviews/recipes/preferred-diagram-tooling/#drawiopng","title":"<code>.drawio.png</code>","text":"<p>There are different desktop, web apps and VS Code extensions. This tooling can be used like Visio or LucidChart, without the licensing/remote storage concerns. Furthermore, Diagrams.net has a collection of Azure/Office/Microsoft icons, as well as other well-known tech, so it is not only useful for swimlanes and flow diagrams, but also for architecture diagrams.</p> <p><code>.drawio.png</code> should be preferred over the <code>.drawio</code> format. The <code>.drawio.png</code> format uses the metadata layer within the PNG file-format to hide SVG vector graphics representation, then renders the .png when saving. This clever use of both the meta layer and image layer allows anyone to further edit the PNG file. It also renders like a normal PNG in browsers and other viewers, making it easy to transfer and embed. Furthermore, it can be edited within VSCode very easily using the Draw.io Integration VSCode Extension.</p>"},{"location":"design/design-reviews/recipes/technical-spike/","title":"Technical Spike","text":"<p>From Wikipedia...</p> <p>A spike in a sprint can be used in a number of ways:</p> <ul> <li>As a way to familiarize the team with new hardware or software</li> <li>To analyze a problem thoroughly and assist in properly dividing work among separate team members.</li> <li>Spike tests can also be used to mitigate future risk, and may uncover additional issues that have escaped notice.</li> </ul> <p>A distinction can be made between technical spikes and functional spikes. The technical spike is used more often for evaluating the impact new technology has on the current implementation. A functional spike is used to determine the interaction with a new feature or implementation.</p> <p>Engineering feasibility spikes can also be conducted to de-risk an engagement and increase the team's understanding.</p>"},{"location":"design/design-reviews/recipes/technical-spike/#deliverable","title":"Deliverable","text":"<p>Generally the deliverable from a Technical Spike should be a document detailing what was evaluated and the outcome of that evaluation. The specifics contained in the document will vary, but there are some general principles that might be helpful.</p> <ul> <li>Problem Statement/Goals: Be sure to include a section that clearly details why an evaluation is being done and what the outcome of this evaluation should be. This is helpful to ensure that the technical spike was productive and advanced the overall project in some way.</li> </ul> <ul> <li> <p>Make sure it is repeatable: Detail the components used, installation instructions, configuration, etc. required to build the environment that was used for evaluation and testing. If any testing is performed, make sure to include the scripts, links to the applications, configuration options, etc. so that testing could be performed again.</p> <p>There are many reasons that the evaluation environment may need to be rebuilt. For example:</p> <ul> <li>Another scenario needs to be tested.</li> <li>A new version of the technology has been released.</li> <li>The technology needs to be tested on a new platform.</li> </ul> </li> </ul> <ul> <li>Fact-Finding: The goal of a spike should be fact-finding, not decision-making or recommendation. Ideally, the technology spike digs into a number of technical questions and gets answers so that the broader project team can then come back together and agree on an appropriate course forward.</li> </ul> <ul> <li>Evidence: Generally you will use sections to summarize the results of testing which do not include the potentially hundreds of detailed results, however, you should include all detailed testing results in an appendix or an attachment. Having full results detailed somewhere will help the team trust the results. In addition, data can be interpreted lots of different ways, and it may be necessary to go back to the original data for a new interpretation.</li> </ul> <ul> <li>Organization: The technical documentation can be lengthy. It is generally a good idea to organize sections with headers and include a table of contents. Generally sections towards the beginning of the document should summarize data and use one or more appendices for more details.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/","title":"Template: Feature / Story Design Review","text":""},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#draftwip-feature-or-story-design-title","title":"[DRAFT/WIP] [Feature or Story Design Title]","text":"<p>Does the feature re-use or extend existing patterns / interfaces that have already been established for the project? Does the feature expose new patterns or interfaces that will establish a new standard for new future development?</p> <ul> <li>Feature/Story Name</li> <li>Engagement: [Engagement]</li> <li>Customer: [Customer]</li> <li>Authors: [Author1, Author2, etc.]</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#overviewproblem-statement","title":"Overview/Problem Statement","text":"<ul> <li>It can also be a link to the work item.</li> <li>Describe the feature/story with a high-level summary.</li> <li>Consider additional background and justification, for posterity and historical context.</li> <li>List any assumptions that were made for this design.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#goalsin-scope","title":"Goals/In-Scope","text":"<ul> <li>List the goals that the feature/story will help us achieve that are most relevant for the design review discussion.</li> <li>This should include acceptance criteria required to meet definition of done.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#non-goals-out-of-scope","title":"Non-Goals / Out-of-Scope","text":"<ul> <li>List the non-goals for the feature/story.</li> <li>This contains work that is beyond the scope of what the feature/component/service is intended for.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#proposed-design","title":"Proposed Design","text":"<ul> <li>Briefly describe the high-level architecture for the feature/story.</li> <li>Relevant diagrams (e.g. sequence, component, context, deployment) should be included here.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#technology","title":"Technology","text":"<ul> <li>Describe the relevant OS, Web server, presentation layer, persistence layer, caching, eventing/messaging/jobs, etc. \u2013 whatever is applicable to the overall technology solution and how are they going to be used.</li> <li>Describe the usage of any libraries of OSS components.</li> <li>Briefly list the languages(s) and platform(s) that comprise the stack.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#non-functional-requirements","title":"Non-Functional Requirements","text":"<ul> <li>What are the primary performance and scalability concerns for this feature/story?</li> <li>Are there specific latency, availability, and RTO/RPO objectives that must be met?</li> <li>Are there specific bottlenecks or potential problem areas? For example, are operations CPU or I/O (network, disk) bound?</li> <li>How large are the data sets and how fast do they grow?</li> <li>What is the expected usage pattern of the service? For example, will there be peaks and valleys of intense concurrent usage?</li> <li>Are there specific cost constraints? (e.g. $ per transaction/device/user)</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#dependencies","title":"Dependencies","text":"<ul> <li>Does this feature/story need to be sequenced after another feature/story assigned to the same team and why?</li> <li>Is the feature/story dependent on another team completing other work?</li> <li>Will the team need to wait for that work to be completed or could the work proceed in parallel?</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#risks-mitigation","title":"Risks &amp; Mitigation","text":"<ul> <li>Does the team need assistance from subject-matter experts?</li> <li>What security and privacy concerns does this milestone/epic have?</li> <li>Is all sensitive information and secrets treated in a safe and secure manner?</li> </ul>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#open-questions","title":"Open Questions","text":"<p>List any open questions/concerns here.</p>"},{"location":"design/design-reviews/recipes/templates/feature-story-design-review/#resources","title":"Resources","text":"<p>List any additional resources here including links to backlog items, work items or other documents.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/","title":"Template: Milestone / Epic Design Review","text":""},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#draftwip-milestoneepic-design-title","title":"[DRAFT/WIP] [Milestone/Epic Design Title]","text":"<p>Please refer to the milestone/epic design review recipe for things to keep in mind when using this template.</p> <ul> <li>Milestone / Epic: Name</li> <li>Project / Engagement: [Project Engagement]</li> <li>Authors: [Author1, Author2, etc.]</li> </ul>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#overview-problem-statement","title":"Overview / Problem Statement","text":"<p>Describe the milestone/epic with a high-level summary and a problem statement. Consider including or linking to any additional background (e.g. Game Plan or Checkpoint docs) if it is useful for historical context.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#goals-in-scope","title":"Goals / In-Scope","text":"<p>List a few bullet points of goals that this milestone/epic will achieve and that are most relevant for the design review discussion. You may include acceptable criteria required to meet the Definition of Done.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#non-goals-out-of-scope","title":"Non-goals / Out-of-Scope","text":"<p>List a few bullet points of non-goals to clarify the work that is beyond the scope of the design review for this milestone/epic.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#proposed-design-suggested-approach","title":"Proposed Design / Suggested Approach","text":"<p>To optimize the time investment, this should be brief since it is likely that details will change as the epic/milestone is further decomposed into features and stories. The goal being to convey the vision and complexity in something that can be understood in a few minutes and can help guide a discussion (either asynchronously via comments or in a meeting).</p> <ul> <li>A paragraph to describe the proposed design / suggested approach for this milestone/epic.</li> <li>A diagram (e.g. architecture, sequence, component, deployment, etc.) or pseudo-code snippet to make it easier to talk through the approach.</li> <li>List a few of the alternative approaches that were considered and include the brief key Pros and Cons used to help rationalize the decision. For example:</li> </ul> Pros Cons Simple to implement Creates secondary identity system Repeatable pattern/code artifact Deployment requires admin credentials"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#technology","title":"Technology","text":"<p>Briefly list the languages(s) and platform(s) that comprise the stack. This may include anything that is needed to understand the overall solution: OS, web server, presentation layer, persistence layer, caching, eventing, etc.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#non-functional-requirements","title":"Non-Functional Requirements","text":"<ul> <li>What are the primary performance and scalability concerns for this milestone/epic?</li> <li>Are there specific latency, availability, and RTO/RPO objectives that must be met?</li> <li>Are there specific bottlenecks or potential problem areas? For example, are operations CPU or I/O (network, disk) bound?</li> <li>How large are the data sets and how fast do they grow?</li> <li>What is the expected usage pattern of the service? For example, will there be peaks and valleys of intense concurrent usage?</li> <li>Are there specific cost constraints? (e.g. $ per transaction/device/user)</li> </ul>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#operationalization","title":"Operationalization","text":"<ul> <li>Are there any specific considerations for the CI/CD setup of milestone/epic?</li> <li>Is there a process (manual or automated) to promote builds from lower environments to higher ones?</li> <li>Does this milestone/epic require zero-downtime deployments, and if so, how are they achieved?</li> <li>Are there mechanisms in place to rollback a deployment?</li> <li>What is the process for monitoring the functionality provided by this milestone/epic?</li> </ul>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#dependencies","title":"Dependencies","text":"<ul> <li>Does this milestone/epic need to be sequenced after another epic assigned to the same team and why?</li> <li>Is the milestone/epic dependent on another team completing other work?</li> <li>Will the team need to wait for that work to be completed or could the work proceed in parallel?</li> </ul>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#risks-mitigations","title":"Risks &amp; Mitigations","text":"<ul> <li>Does the team need assistance from subject-matter experts?</li> <li>What security and privacy concerns does this milestone/epic have?</li> <li>Is all sensitive information and secrets treated in a safe and secure manner?</li> </ul>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#open-questions","title":"Open Questions","text":"<p>Include any open questions and concerns.</p>"},{"location":"design/design-reviews/recipes/templates/milestone-epic-design-review/#resources","title":"Resources","text":"<p>Include any additional resources including links to work items or other documents.</p>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/","title":"Template: Task Design Review","text":""},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#draftwip-task-design-title","title":"[DRAFT/WIP] [Task Design Title]","text":"<p>When developing a design document for a new task, it should contain a detailed design proposal demonstrating how it will solve the goals outlined below. Not all tasks require a design review, but when they do it is likely that there many unknowns, or the solution may be more complex. The design should include diagrams, pseudocode, interface contracts as needed to provide a detailed understanding of the proposal.</p> <ul> <li>Task Name</li> <li>Story Name</li> <li>Engagement: [Engagement]</li> <li>Customer: [Customer]</li> <li>Authors: [Author1, Author2, etc.]</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#overviewproblem-statement","title":"Overview/Problem Statement","text":"<ul> <li>It can also be a link to the work item.</li> <li>Describe the task with a high-level summary.</li> <li>Consider additional background and justification, for posterity and historical context.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#goalsin-scope","title":"Goals/In-Scope","text":"<ul> <li>List a few bullet points of what this task will achieve and that are most relevant for the design review discussion.</li> <li>This should include acceptance criteria required to meet the definition of done.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#non-goals-out-of-scope","title":"Non-goals / Out-of-Scope","text":"<ul> <li>List a few bullet points of non-goals to clarify the work that is beyond the scope of the design review for this task.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#proposed-options","title":"Proposed Options","text":"<ul> <li>Describe the detailed design to accomplish the proposed task.</li> <li>What patterns &amp; practices will be used and why were they chosen.</li> <li>Were any alternate proposals considered?</li> <li>What new components are required to be developed?</li> <li>Are there any existing components that require updates?</li> <li>Relevant diagrams (e.g. sequence, component, context, deployment) should be included here.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#technology-choices","title":"Technology Choices","text":"<ul> <li>Describe any libraries and OSS components that will be used to complete the task.</li> <li>Briefly list the languages(s) and platform(s) that comprise the stack.</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#open-questions","title":"Open Questions","text":"<p>List any open questions/concerns here.</p>"},{"location":"design/design-reviews/recipes/templates/template-task-design-review/#resources","title":"Resources","text":"<p>List any additional resources here including links to backlog items, work items or other documents.</p>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/","title":"Template: Technical Spike","text":""},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#spike-spike-name","title":"Spike: [Spike Name]","text":"<ul> <li>Conducted by: {Names and at least one email address for follow-up questions}</li> <li>Backlog Work Item: {Link to the work item to provide more context}</li> <li>Sprint: {Which sprint did the study take place. Include sprint start date}</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#goal","title":"Goal","text":"<p>Describe what question(s) the spike intends to answer and why.</p>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#method","title":"Method","text":"<p>Describe how the team will uncover the answer to the question(s) the spike intends to answer. For example:</p> <ol> <li>Build prototype to test.</li> <li>Research existing documents and samples.</li> <li>Discuss with subject matter experts.</li> </ol>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#evidence","title":"Evidence","text":"<p>Document the evidence collected that informed the conclusions below. Examples may include:</p> <ul> <li>Recorded or live demos of a prototype providing the desired capabilities</li> <li>Metrics collected while testing the prototype</li> <li>Documentation that indicates the solution can provided the desired capabilities</li> </ul>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#conclusions","title":"Conclusions","text":"<p>What was the answer to the question(s) outlined at the start of the spike? Capture what was learned that will inform future work.</p>"},{"location":"design/design-reviews/recipes/templates/template-technical-spike/#next-steps","title":"Next Steps","text":"<p>What work is expected as an outcome of the learning within this spike. Was there work that was blocked or dependent on the learning within this spike?</p>"},{"location":"design/design-reviews/trade-studies/","title":"Trade Studies","text":"<p>Trade studies are a tool for selecting the best option out of several possible options for a given problem (for example: compute, storage). They evaluate potential choices against a set of objective criteria/requirements to clearly lay out the benefits and limitations of each solution.</p> <p>Trade studies are a concept from systems engineering that we adapted for software projects. Trade studies have proved to be a critical tool to drive alignment with the stakeholders, earn credibility while doing so and ensure our decisions were backed by data and not bias.</p>"},{"location":"design/design-reviews/trade-studies/#when-to-use","title":"When to Use","text":"<p>Trade studies go hand in hand with high level architecture design. This usually occurs as project requirements are solidifying, before coding begins. Trade studies continue to be useful throughout the project any time there are multiple options that need to be selected from. New decision point could occur from changing requirements, getting results of a research spike, or identifying challenges that were not originally seen.</p> <p>Trade studies should be avoided if there is a clear solution choice. Because they require each solution to be fully thought out, they have the potential to take a lot of time to complete. When there is a clear design, the trade study should be omitted, and an entry should be made in the Decision Log documenting the decision.</p>"},{"location":"design/design-reviews/trade-studies/#why-trade-studies","title":"Why Trade Studies","text":"<p>Trade studies are a way of formalizing the design process and leaving a documentation record for why the decision was made. This gives a few advantages:</p> <ol> <li>The trade study template guides a user through the design process. This provides structure to the design stage.</li> <li>Having a uniform design process aids splitting work amongst team members. We have had success with engineers pairing to define requirements, evaluation criteria, and brainstorming possible solutions. Then they can each split to review solutions in parallel, before rejoining to make the final decision.</li> <li>The completed trade study document helps drive alignment across the team and decision makers. For presenting results of the study, the document itself can be used to highlight the main points. Alternatively, we have extracted requirements, diagrams for each solution, and the results table into a slide deck to give high level overviews of the results.</li> <li>The completed trade study gets checked into the code repository, providing documentation of the decision process. This leaves a history of the requirements at the time that lead to each decision. Also, the results table gives a quick reference for how the decision would be impacted if requirements change as the project proceeds.</li> </ol>"},{"location":"design/design-reviews/trade-studies/#flow-of-a-trade-study","title":"Flow of a Trade Study","text":"<p>Trade studies can vary widely in scope; however, they follow the common pattern below:</p> <ol> <li>Solidify the requirements \u2013 Work with the stakeholders to agree on the requirements for the functionality that you are trying to build.</li> <li>Create evaluation criteria \u2013 This is a set of qualitative and quantitative assessment points that represent the requirements. Taken together, they become an easy to measure stand-in for the potentially abstract requirements.</li> <li>Brainstorm solutions \u2013 Gather a list of possible solutions to the problem. Then, use your best judgement to pick the 2-4 solutions that seem most promising. For assistance narrowing solutions, remember to reach out to subject-matter experts and other teams who may have gone through a similar decision.</li> <li>Evaluate shortlisted solutions \u2013 Dive deep into each solution and measure it against the evaluation criteria. In this stage, time box your research to avoid overly investing in any given area.</li> <li>Compare results and choose solution - Align the decision with the team. If you are unable to decide, then a clear list of action items and owners to drive the final decision must be produced.</li> </ol>"},{"location":"design/design-reviews/trade-studies/#template","title":"Template","text":"<p>See template.md for an example of how to structure the above information. This template was created to guide a user through conducting a trade study. Once the decision has been made we recommend adding an entry to the Decision Log that has references back to the full text of the trade study.</p>"},{"location":"design/design-reviews/trade-studies/template/","title":"Trade Study Template","text":"<p>This generic template can be used for any situation where we have a set of requirements that can be satisfied by multiple solutions. They can range in scope from choice of which open source package to use, to full architecture designs.</p>"},{"location":"design/design-reviews/trade-studies/template/#trade-studydesign-trade-study-name","title":"Trade Study/Design: [Trade Study Name]","text":"<ul> <li>Conducted by: {Names of those that can answer follow-up questions and at least one email address}</li> <li>Backlog Work Item: {Link to the work item to provide more context}</li> <li>Sprint: {Which sprint did the study take place? Include sprint start date}</li> <li>Decision: {Solution chosen to proceed with}</li> <li>Decision Makers:</li> </ul> <p>IMPORTANT Designs should be completed within a sprint. Most designs will benefit from brevity. To accomplish this:</p> <ol> <li>Narrow the scope of the design.</li> <li>Narrow evaluation to 2 to 3 solutions.</li> <li>Design experiments to collect evidence as fast as possible.</li> </ol>"},{"location":"design/design-reviews/trade-studies/template/#overview","title":"Overview","text":"<p>Description of the problem we are solving. This should include:</p> <ol> <li>Assumptions about the rest of the system</li> <li>Constraints that apply to the system, both business and technical</li> <li>Requirements for the functionality that needs to be implemented, including possible inputs and outputs</li> <li>(optional) A diagram showing the different pieces</li> </ol>"},{"location":"design/design-reviews/trade-studies/template/#desired-outcomes","title":"Desired Outcomes","text":"<p>The following section should establish the desired capabilities of the solution for it to be successful. This can be done by answering the following questions either directly or via link to related artifact (i.e. PBI or Feature description).</p> <ol> <li>Acceptance: What capabilities should be demonstrable for a stakeholder to accept the solution?</li> <li>Justification: How does this contribute to the broader project objectives?</li> </ol> <p>IMPORTANT This is not intended to define outcomes for the design activity itself. It is intended to define the outcomes for the solution being designed.</p> <p>As mentioned in the User Interface section, if the trade study is analyzing an application development solution, make use of the persona stories to derive desired outcomes. For example, if a persona story exemplifies a certain accessibility requirement, the parallel desired outcome may be \"The application must be accessible for people with vision-based disabilities\".</p>"},{"location":"design/design-reviews/trade-studies/template/#evaluation-criteria","title":"Evaluation Criteria","text":"<p>The former should be condensed down to a set of \"evaluation criteria\" that we can rate any potential solutions against. Examples of evaluation criteria:</p> <ul> <li>Runs on Windows and Linux - Binary response</li> <li>Compute Usage - Could be categories that effectively rank different options: High, Medium, Low</li> <li>Cost of the solution \u2013 An estimated numeric field</li> </ul> <p>The results section contains a table evaluating each solution against the evaluation criteria.</p>"},{"location":"design/design-reviews/trade-studies/template/#key-metrics-optional","title":"Key Metrics (Optional)","text":"<p>If available, describe any measurable metrics that are important to the success of the solution. Examples include, but are not limited to:</p> <ul> <li>Performance &amp; Scale targets such as, Requests/Second, Latency, and Response time (at a given percentile).</li> <li>Azure consumption cost budget. For example, given certain usage, solution expected to cost X dollars per month.</li> <li>Availability uptime of XX% over X time period.</li> <li>Consistency. Writes available for read within X milliseconds.</li> <li>Recovery point objective (RPO) &amp; Recovery time objective (RTO).</li> </ul>"},{"location":"design/design-reviews/trade-studies/template/#constraints-optional","title":"Constraints (Optional)","text":"<p>If applicable, describe the boundaries from which we have to design the solution. This could be thought of as the \"box\" the team has to work within. This box may be defined as:</p> <ul> <li>Technologies, services, and languages an organization is comfortable operating/managing.</li> <li>Devices, operating systems, and/or browsers that must be supported.</li> <li>Backward Compatibility. For example, public interfaces consumed by client or third party apps cannot introduce breaking changes.</li> <li>Integrations or dependencies with other systems. For example, push notifications to client apps must be done via existing websockets channel.</li> </ul>"},{"location":"design/design-reviews/trade-studies/template/#accessibility","title":"Accessibility","text":"<p>Accessibility is never optional. Microsoft has made a public commitment to always produce accessible applications. For more information visit the official Microsoft accessibility site and read the Accessibility page.</p> <p>Consider the following prompts when determining application accessibility requirements:</p> <ul> <li>Does the application meet industry accessibility standards?</li> <li>Are training, support, and documentation resources accessible?</li> <li>Is the application designed to be inclusive for people will a broad range of abilities, languages, and cultures?</li> </ul>"},{"location":"design/design-reviews/trade-studies/template/#solution-hypotheses","title":"Solution Hypotheses","text":"<p>Enumerate the solutions that are believed to deliver the outcomes defined above.</p> <p>Note: Limiting the evaluated solutions to 2 or 3 potential candidates can help manage the time spent on the evaluation. If there are more than 3 candidates, prioritize what the team feels are the top 3. If appropriate, the eliminated candidates can be mentioned to capture why they were eliminated. Additionally, there should be at least two options compared, otherwise you didn't need a trade study.</p>"},{"location":"design/design-reviews/trade-studies/template/#solution-1","title":"[Solution 1]","text":"<p>Add a brief description of the solution and how its expected to produce the desired outcomes. If appropriate, illustrations/diagrams can be used to reduce the amount of text explanation required to describe the solution.</p> <p>NOTE: Using present tense language to describe the solution can help avoid confusion between current state and future state. For example, use \"This solution works by doing...\" vs. \"This solution would work by doing...\".</p> <p>Each solution section should contain the following:</p> <ol> <li>Description of the solution</li> <li>(optional) A diagram to quickly reference the solution</li> <li>Possible variations - things that are small variations on the main solution can be grouped together</li> <li>Evaluation of the idea based on the evaluation criteria above</li> </ol> <p>The depth, detail, and contents of these sections will vary based on the complexity of the functionality being developed.</p>"},{"location":"design/design-reviews/trade-studies/template/#experiments","title":"Experiment(s)","text":"<p>Describe how the solution will be evaluated to prove or dis-prove that it will produce the desired outcomes. This could take many forms such as building a prototype and researching existing documentation and sample solutions.</p> <p>Additionally, document any assumptions made as part of the experiment.</p> <p>NOTE: Time boxing these experiments can be beneficial to make sure the team is making the best use of the time by focusing on collecting key evidence in the simplest/fastest way possible.</p>"},{"location":"design/design-reviews/trade-studies/template/#evidence","title":"Evidence","text":"<p>Present the evidence collected during experimentation that supports the hypothesis that this solution will meet the desired outcomes. Examples may include:</p> <ul> <li>Recorded or live demos of a prototype providing the desired capabilities</li> <li>Metrics collected while testing the prototype</li> <li>Documentation that indicates the solution can provide the desired capabilities</li> </ul> <p>NOTE: Evidence is not required for every capability, metric, or constraint for the design to be considered done. Instead, focus on presenting evidence that is most relevant and impactful towards supporting or eliminating the hypothesis.</p>"},{"location":"design/design-reviews/trade-studies/template/#solution-2","title":"[Solution 2]","text":"<p>...</p>"},{"location":"design/design-reviews/trade-studies/template/#solution-n","title":"[Solution N]","text":"<p>...</p>"},{"location":"design/design-reviews/trade-studies/template/#results","title":"Results","text":"<p>This section should contain a table that has each solution rated against each of the evaluation criteria:</p> Solution Evaluation Criteria 1 Evaluation Criteria 2 ... Evaluation Criteria N Solution 1 Solution 2 ... Solution M <p>Note: The formatting of the table can change. In the past, we have had success with qualitative descriptions in the table entries and color coding the cells to represent good, fair, bad.</p>"},{"location":"design/design-reviews/trade-studies/template/#decision","title":"Decision","text":"<p>The chosen solution, or a list of questions that need to be answered before the decision can be made.</p> <p>In the latter case, each question needs an action item and an assigned person for answering the question. Once those questions are answered, the document must be updated to reflect the answers, and the final decision.</p> <p>In the first case, describe which solution was chosen and why. Summarize what evidence informed the decision and how that evidence mapped to the desired outcomes.</p> <p>Note: Decisions should be made with the understanding that they can change as the team learns more. It's a starting point, not a contract.</p>"},{"location":"design/design-reviews/trade-studies/template/#next-steps","title":"Next Steps","text":"<p>What work is expected once a decision has been reached? Examples include but are not limited to:</p> <ol> <li>Creating new PBI's or modifying existing ones</li> <li>Follow up spikes</li> <li>Creating specification for public interfaces and integrations between other work streams.</li> <li>Decision Log Entry</li> </ol>"},{"location":"design/diagram-types/","title":"Diagram Types","text":"<p>Creating and maintaining diagrams is a challenge for any team. Common reasons across these challenges include:</p> <ul> <li>Not leveraging tools to assist in generating diagrams</li> <li>Uncertainty on what to include in a diagram and when to create one</li> </ul> <p>Overcoming these challenges and effectively using design diagrams can amplify a team's ability to execute throughout the entire Software Development Lifecycle, from the design phase when proposing various designs to leveraging it as documentation as part of the maintenance phase.</p> <p>This section will share sample tools for diagram generation, provide a high level overview of the different types of diagrams and provide examples of some of these types.</p> <p>There are two primary classes of diagrams:</p> <ul> <li>Structural</li> <li>Behavior</li> </ul> <p>Within each of these classes, there are many types of diagrams, each intended to convey specific types of information. When different types of diagrams are effectively used in a solution, system, or repository, one can deliver a cohesive and incrementally detailed design.</p>"},{"location":"design/diagram-types/#sample-design-diagrams","title":"Sample Design Diagrams","text":"<p>This section contains educational material and examples for the following design diagrams:</p> <ul> <li>Class Diagrams - Useful to document the structural design of a codebase's relationship between classes, and their corresponding methods</li> <li>Component Diagrams - Useful to document a high level structural overview of all the components and their direct \"touch points\" with other Components</li> <li>Sequence Diagrams - Useful to document a behavior overview of the system, capturing the various \"use cases\" or \"actions\" that triggers the system to perform some business logic</li> <li>Deployment Diagram - Useful in order to document the networking and hosting environments where the system will operate in</li> </ul>"},{"location":"design/diagram-types/#supplemental-resources","title":"Supplemental Resources","text":"<p>Each of the above types of diagrams will provide specific resources related to its type. Below are the generic resources:</p> <ul> <li>Visual Paradigm UML Structural vs Behavior Diagrams</li> <li>PlantUML - requires a generator from code to PlantUML syntax to generate diagrams<ul> <li>C# to PlantUML</li> <li>Drawing manually</li> </ul> </li> </ul>"},{"location":"design/diagram-types/class-diagrams/","title":"Class Diagrams","text":""},{"location":"design/diagram-types/class-diagrams/#purpose","title":"Purpose","text":"<p>This document is intended to provide a baseline understanding for what, why, and how to incorporate Class Diagrams as part of your engagement. Regarding the how, the section at the bottom will provide tools and plugins to automate as much as possible when generating Class Diagrams through VSCode.</p> <p>Wikipedia defines UML Class Diagrams as:</p> <p>a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.</p> <p>The key terms to make a note of here are:</p> <ul> <li>static structure</li> <li>showing the system's classes, attributes, operations, and relationships</li> </ul> <p>Class Diagrams are a type of a static structure because it focuses on the properties, and relationships of classes. It is not supposed to inform about the data flow, the caller or callee responsibilities, the request flows, nor any other \"behavior\" related characteristics.</p>"},{"location":"design/diagram-types/class-diagrams/#essential-takeaways","title":"Essential Takeaways","text":"<p>Each \"Component\" (Stand alone piece of software - think datastores, microservices, serverless functions, user interfaces, etc...) of a Product or System will have it's own Class Diagram.</p> <p>Class Diagrams should tell a \"story\", where each Diagram will require Engineers to really think about:</p> <ul> <li>The responsibility / operations of each class. What can (should) the class perform?</li> <li>The class' attributes and properties. What can be set by an implementor of this class? What are all (if any) universally static properties?</li> <li>The visibility or accessibility that a class' operation may have to other classes</li> <li>The relationship between each class or the various instances</li> </ul>"},{"location":"design/diagram-types/class-diagrams/#when-to-create","title":"When to Create?","text":"<p>Because Class Diagrams represent one of the more granular depiction of what a \"product\" or \"system\" is composed of, it is recommended to begin the creation of these diagrams at the beginning and throughout the engineering portions of an engagement.</p> <p>This does mean that any code change (new feature, enhancement, code refactor) might involve updating one or many Class Diagrams. Although this might seem like a downside of Class Diagrams, it actually can become a very strong benefit.</p> <p>Because Class Diagrams tell a \"story\" for each Component of a product (see the previous section), it requires a substantial amount of upfront thought and design considerations. This amount of upfront thought ultimately results in making more effective code changes, and may even minimize the level of refactors in future stages of the engagement.</p> <p>Class Diagrams also provides quick \"alert indicators\" when a refactor might be necessary. Reasons could be due to seeing that a particular class might be doing too much, have too many dependencies, or when the codebase might produce a very \"messy\" or \"chaotic\" Class Diagram. If the Class Diagram is unreadable, the code will probably be unreadable</p>"},{"location":"design/diagram-types/class-diagrams/#examples","title":"Examples","text":"<p>One can find many examples online such as at UML Diagrams.</p> <p>Below are some basic examples:</p> <p></p> <p></p>"},{"location":"design/diagram-types/class-diagrams/#versioning","title":"Versioning","text":"<p>Because Class Diagrams will be changing rapidly, essentially anytime a class is changed in the code, and because it might be very large in size, it's recommended to \"publish\" an image of the generated diagram periodically. The frequency might vary as the engagement proceeds.</p> <p>The below approach can be used to assist the team on how often to update the published version of the diagram:</p> <ul> <li>Wait until the engagement progresses (maybe 10-20% completion) before publishing a Class Diagram. It is not worth publishing a Class Diagram from the beginning as it will be changing daily</li> <li>Once the most crucial classes are developed, update the published diagram periodically. Ideally whenever a large refactor or net new class is introduced. If the team uses an IDE plugin to automatically generate the diagram from their development environment, this becomes more of a documentation task rather than a necessity</li> <li>As the engagement approaches its end (90-100% completion), update the published diagram whenever a change to an existing class as part of a feature or story acceptance criteria</li> </ul> <p>Depending on the tool being used, automatic versioning might be performed whenever an update to the Diagram is performed. If not, it is recommended to capture distinct versions whenever there is a particular customer need to have a snapshot of the project at a particular point in time. The hard requirement is that the latest diagram should be published and everyone should know how to access it as the customer hand-off approaches.</p>"},{"location":"design/diagram-types/class-diagrams/#resources","title":"Resources","text":"<ul> <li>Wikipedia</li> <li>Visual Paradigm</li> <li>VS Code Plugins:<ul> <li>C#, Visual Basic, C++ using Class Designer Component</li> <li>TypeScript classdiagram-ts</li> <li>PlantUML - requires a generator from code to PlantUML syntax to generate diagrams<ul> <li>PlantUML Syntax</li> <li>C# to PlantUML</li> <li>Drawing manually</li> </ul> </li> </ul> </li> </ul>"},{"location":"design/diagram-types/component-diagrams/","title":"Component Diagrams","text":""},{"location":"design/diagram-types/component-diagrams/#purpose","title":"Purpose","text":"<p>This document is intended to provide a baseline understanding for what, why, and how to incorporate Component Diagrams as part of your engagement. Regarding the how, the section at the bottom will provide tools and plugins to streamline as much as possible when generating Component Diagrams through VSCode.</p> <p>Wikipedia defines UML Component Diagrams as:</p> <p>a component diagram depicts how components are wired together to form larger components or software systems.</p> <p>Component Diagrams are a type of a static structure because it focuses on the responsibility and relationships between components as part of the overall system or solution.</p> <p>It is not supposed to inform about the data flow, the caller or callee responsibilities, the request flows, nor any other \"behavior\" related characteristics.</p> <p>...Hold on a second... what is a Component?</p> <p>A Component is a runnable solution that performs a set of operations and can possibly be interfaced through a particular API. One can think of Components as a \"stand alone\" piece of software - think datastores, microservices, serverless functions, user interfaces, etc...</p>"},{"location":"design/diagram-types/component-diagrams/#essential-takeaways","title":"Essential Takeaways","text":"<p>The primary two takeaways from a Component Diagram should be:</p> <ul> <li>A quick view of all the various components (User Interface, Service, Data Storage) involved in the system</li> <li>The immediate \"touch points\" that a particular Component has with other Components, including how that \"touch point\" is accomplished (HTTP, FTP, etc...)</li> </ul> <p>Depending on the complexity of the system, a team might decide to create several Component Diagrams. Where there is one diagram per Component (depicting all it's immediate \"touch points\" with other Components).</p> <p>Or if a system is simple, the team might decide to create a single Component Diagram capturing all Components in the diagram.</p>"},{"location":"design/diagram-types/component-diagrams/#when-to-create","title":"When to Create?","text":"<p>Because Component Diagrams represent a high level overview of the entire system from a Component focus, it is recommended to begin the creation of this diagram from the beginning of an engagement, and update it as the various Components are identified, developed, and introduced into the system. Otherwise, if this is left till later, then there is risk that:</p> <ul> <li>the team won't be able to identify areas of improvement</li> <li>the team or other necessary stakeholders won't have a full understanding on how the system works as it is being developed</li> </ul> <p>Because of the inherent granularity of the system, the Component Diagrams won't have to be updated as often as Class Diagrams. Things that might merit updating a Component Diagram could be:</p> <ul> <li>A deletion or addition of a new Component into the system</li> <li>A change to a system Component's interaction APIs</li> <li>A change to a system Component's immediate \"touch points\" with other Components</li> </ul> <p>Because Component Diagrams focuses on informing the various \"touch points\" between Components, it requires some upfront thought in order to determine what Components are needed and what interaction mechanisms are most effective per the system requirements. This amount of upfront thought should be approached in a pragmatic manner - as the design may evolve over time, and that is perfectly fine,  as long as changes are influenced based on functional requirements and non-functional requirements.</p>"},{"location":"design/diagram-types/component-diagrams/#examples","title":"Examples","text":"<p>Below are some basic examples:</p> <p></p> <p></p> <p></p>"},{"location":"design/diagram-types/component-diagrams/#versioning","title":"Versioning","text":"<p>Because Component Diagrams will be changing periodically, it's recommended to \"publish\" an image of the generated diagram periodically. The frequency might vary as the engagement proceeds.</p> <p>The below approach can be used to assist the team on how often to update the published version of the diagram:</p> <ul> <li>At the beginning of the engagement, publishing an \"envisioned\" version of the Component Diagram will provide a common visual to all engineers when working on the different parts of the solution</li> <li>Throughout the engagement, update the published diagram periodically. Ideally whenever a new Component is introduced into the system, or whenever a new \"touch point\" occurs between Components</li> </ul> <p>Depending on the tool being used, automatic versioning might be performed whenever an update to the Diagram is performed. If not, it is recommended to capture distinct versions whenever there is a particular customer need to have a snapshot of the project at a particular point in time. The hard requirement is that the latest diagram should be published and everyone should know how to access it as  the customer hand-off approaches.</p>"},{"location":"design/diagram-types/component-diagrams/#resources","title":"Resources","text":"<ul> <li>Wikipedia</li> <li>Visual Paradigm</li> <li>VS Code Plugins:<ul> <li>PlantUML - requires a generator from code to PlantUML syntax to generate diagrams<ul> <li>PlantUML Syntax</li> <li>Drawing manually</li> </ul> </li> </ul> </li> </ul>"},{"location":"design/diagram-types/deployment-diagrams/","title":"Deployment Diagrams","text":""},{"location":"design/diagram-types/deployment-diagrams/#purpose","title":"Purpose","text":"<p>This document is intended to provide a baseline understanding for what, why, and how to incorporate Deployment Diagrams as part of your engagement.</p> <p>Wikipedia defines UML Deployment Diagrams as:</p> <p>models the physical deployment of artifacts on nodes</p> <p>Deployment Diagrams are a type of a static structure because it focuses on the infrastructure and hosting where all aspects of the system reside in.</p> <p>It is not supposed to inform about the data flow, the caller or callee responsibilities, the request flows, nor any other \"behavior\" related characteristics.</p>"},{"location":"design/diagram-types/deployment-diagrams/#essential-takeaways","title":"Essential Takeaways","text":"<p>The Deployment diagram should contain all Components identified in the Component Diagram(s), but captured alongside the following elements:</p> <ul> <li>Firewalls</li> <li>VNETs and subnets</li> <li>Virtual machines</li> <li>Cloud Services</li> <li>Data Stores</li> <li>Servers (Web, proxy)</li> <li>Load Balancers</li> </ul> <p>This diagram should inform the audience:</p> <ul> <li>where things are hosted / running in</li> <li>what network boundaries are involved in the system</li> </ul>"},{"location":"design/diagram-types/deployment-diagrams/#when-to-create","title":"When to Create?","text":"<p>Because Deployment Diagrams represent the final \"hosting\" architecture, it's recommended to create the \"final envisioned\" diagram from the beginning of an engagement. This allows the team to have a shared idea on what the team is working towards. Keep in mind that this might change if any non-functional requirement was not considered at the start of the engagement. This is okay, but requires creating the necessary Backlog Items and updating the Deployment diagram in order to capture these changes.</p> <p>It's also worthwhile to create and maintain a Deployment Diagram depicting the \"current\" state of the system. At times, it may be beneficial for there to be a Deployment Diagram per each environment (Dev, QA, Staging, Prod, etc...). However, this adds to the amount of maintenance required and should only be performed if there are substantial differences across environments.</p> <p>The \"current\" Deployment diagram should be updated when:</p> <ul> <li>A new element has been introduced or removed in the system (see the \"Essential Takeaways\" section for a list of possible elements)</li> </ul>"},{"location":"design/diagram-types/deployment-diagrams/#examples","title":"Examples","text":"<p>Below are some basic examples:</p> <p></p> <p></p>"},{"location":"design/diagram-types/deployment-diagrams/#versioning","title":"Versioning","text":"<p>Because Deployment Diagrams will be changing periodically, it's recommended to \"publish\" an image of the generated diagram periodically. The frequency might vary as the engagement proceeds.</p> <p>The below approach can be used to assist the team on how often to update the published version of the diagram:</p> <ul> <li>At the beginning of the engagement, publishing an \"envisioned\" version of the Component Diagram will provide a common visual to all engineers when working on the different parts of the solution</li> <li>Throughout the engagement, update the \"actual / current\" diagram (state represented from the \"main\" branch) periodically. Ideally whenever a new Component is introduced into the system, or whenever a new \"touch point\" occurs between Components.</li> </ul>"},{"location":"design/diagram-types/deployment-diagrams/#resources","title":"Resources","text":"<ul> <li>Wikipedia</li> <li>Visual Paradigm<ul> <li>PlantUML - requires a generator from code to PlantUML syntax to generate diagrams<ul> <li>PlantUML Syntax</li> <li>Drawing manually</li> </ul> </li> </ul> </li> </ul>"},{"location":"design/diagram-types/sequence-diagrams/","title":"Sequence Diagrams","text":""},{"location":"design/diagram-types/sequence-diagrams/#purpose","title":"Purpose","text":"<p>This document is intended to provide a baseline understanding for what, why, and how to incorporate Sequence Diagrams as part of an engagement. Regarding the how, the section at the bottom will provide tools and plugins to streamline as much as possible when generating Sequence Diagrams through VSCode.</p> <p>Wikipedia defines UML Sequence Diagrams responsible to:</p> <p>depict the objects involved in the scenario and the sequence of messages exchanged between the objects needed to carry out the functionality of the scenario</p> <p>What is a scenario? It can be:</p> <ul> <li>an actual user persona performing an action</li> <li>a system specific trigger (time based, condition based) that results in an action to occur</li> </ul> <p>What is a message in this context? It can be:</p> <ul> <li>a synchronous or asynchronous request</li> <li>a transfer of any form of data between any objects</li> </ul> <p>What is an object in this context? It can be:</p> <ul> <li>any specific user persona</li> <li>any service</li> <li>any data store</li> <li>a system (black box composed of unknown services, data stores or other components)</li> <li>an abstract sub-scenario (in order to minimize high complexity of a scenario)</li> </ul>"},{"location":"design/diagram-types/sequence-diagrams/#essential-takeaways","title":"Essential Takeaways","text":"<p>A Sequence Diagram should:</p> <ul> <li>start with a scenario</li> <li>indicate which object or \"actor\" initiated that scenario</li> <li>have the scenario clearly indicate what the \"end\" state is, even if it doesn't necessarily end back with the object that initiated the scenario</li> </ul> <p>It is okay for a single Sequence Diagram to have many different scenarios if they have some related context that merits them being grouped.</p> <p>Another important thing to keep in mind, is that the objects involved in a Sequence Diagram should refer to existing Components from a Component Diagram.</p> <p>There are 2 areas where complexity can result in an overly \"crowded\" Sequence Diagram, making it costly to maintain. They are:</p> <ol> <li>Large number of objects / components involved in a particular scenario</li> <li>Capturing all the possible \"failure\" situations that a scenario may encounter</li> </ol>"},{"location":"design/diagram-types/sequence-diagrams/#large-number-of-objects","title":"Large Number of Objects","text":"<p>A Sequence Diagram typically starts with an end user persona performing an action, and then shows all the various components and request/data transfers that are involved in that scenario. However, more often than not, the complete end-to-end flow for that scenario may be too complex in order to capture within a single Sequence Diagram.</p> <p>When this level of complexity occurs, consider creating separate sub-scenario Sequence Diagrams, and using it as an object in a particular Sequence Diagram. Examples for this are \"Authentication\" or \"Authorization\". Almost all user persona scenarios will have several objects/components involved in either of these sub-scenarios, but it is not necessary to include them in every Sequence Diagram once the sub-scenarios have a stand-alone Sequence Diagram created.</p> <p>Be sure that when using this approach of sub-scenarios to give it a name that encapsulates what the sub-scenarios is performing, and to determine the appropriate \"actor\" and \"action\" that initiates the sub-scenarios.</p> <p>The combination and story telling between these end user Sequence Diagrams and the sub-scenarios Sequence Diagrams can greatly improve readability by distributing the level of complexity across multiple diagrams and take advantage of reusability of common sub-scenarios.</p>"},{"location":"design/diagram-types/sequence-diagrams/#handling-large-number-of-failure-situations","title":"Handling Large Number of Failure Situations","text":"<p>Another factor of high complexity is the possible failure situations that a particular scenario may encounter. Each object / component involved in the scenario could have several different \"failure\" situations, which could result in a very crowded and messy Sequence Diagram.</p> <p>In order to make it realistic to manage all these scenarios, try to:</p> <ul> <li>Identify the most common failure situations that an \"actor\" may face as part of a scenario. Capturing these in a sequence diagram and documenting the other scenarios without having to manage them in a diagram will accomplish the goal of awareness</li> <li>\"Bubble up\" and \"abstract\" all the vast number of failure situations that can occur downstream in the system, and depict how the object / component closest to the \"actor\" handles all these failures and informs the \"actor\" of them</li> </ul>"},{"location":"design/diagram-types/sequence-diagrams/#when-to-create","title":"When to Create?","text":"<p>Because Sequence Diagrams represent a detailed overview of the behavior of the system, outlining the various messages/requests sent within the system, it is recommended to begin the creation of these diagrams from the beginning of an engagement. While updating it as the various communications between Components are introduced into the system. The risks of not creating Sequence Diagrams early on are that:</p> <ul> <li>the team will not create any because of it being perceived more as a \"chore\" instead of adding value</li> <li>the team will be unable to gain insights in time, from visualizing the various messages and requests sent between Components, in order to perform any potential refactoring</li> <li>the team or other necessary stakeholders won't have a complete understanding of the request/message/data flow within the system</li> </ul> <p>Because of the inherent granularity of the system, the Sequence Diagrams won't have to be updated as often as Class Diagrams, but may require more maintenance than Component Diagrams. Things that might merit updating a Sequence Diagram could be:</p> <ul> <li>A new request/message/data being sent across Components involved in a scenario</li> <li>A change to one or several Components involved in a Sequence Diagram. Such as splitting a component into multiple ones, or consolidating many Components into a single one</li> <li>The introduction of a new Use Case or scenario that the system now supports</li> </ul>"},{"location":"design/diagram-types/sequence-diagrams/#examples","title":"Examples","text":"<p>Place Order Scenario:</p> <ul> <li>A \"Member\" user persona places an order, which can be composed of many \"order items\"</li> <li>The \"Member\" user persona can be either of type \"VIP\" or \"Ordinary\"</li> <li>Depending on the \"Member type\", each \"order item\" will be shipped using either a Courier or via Mail</li> <li>If the \"Member\" user persona selected the option to be informed once all \"order items\" have been shipped, then the system will send a notification</li> </ul> <p></p> <p>Facebook User Authentication Scenario:</p> <ul> <li>A user persona uses a Web Browser to interact with an \"application\" which tries to access a specific \"Facebook resource\"</li> <li>The \"Facebook Authorization Server\" is involved in order to have the user to authenticate with Facebook</li> <li>The user persona then receives a \"permission form\" in order to authorize the \"application\" access to the \"Facebook resource\"</li> <li>If the \"application\" was not authorized, then the \"application\" returns back an error</li> <li>If the \"application\" was authorized, then the \"application\" retrieves an \"access token\" from the \"Facebook Authorization Server\" and uses it to securely access the \"Facebook resource\" from the \"Facebook Content Server\". Once the content is obtained, the \"application\" sends it to the Web Browser</li> </ul> <p></p>"},{"location":"design/diagram-types/sequence-diagrams/#versioning","title":"Versioning","text":"<p>Because Sequence Diagrams are more expensive to maintain, it's recommended to \"publish\" an image of the generated diagram often, whenever a new \"use case\" or \"scenario\" is identified as part of the system behavior or requirements.</p> <p>The most important element to these diagrams is to ensure that the latest version is accurate. If the latest diagram shows a sequence of communication between components that are no longer valid, then the diagram causes more harm than good.</p> <p>The below approach can be used to assist the team on how often to update the published version of the diagram:</p> <ul> <li>At the beginning of the engagement, publishing an \"envisioned\" version of the Sequence Diagram will provide a common visual to all engineers when working on the different parts of the solution (focusing on the data flow and request flow)</li> <li>Throughout the engagement, update the published diagram periodically. Ideally whenever a new \"use case\" or \"scenario\" is identified, or when a Component is introduced or removed in the system, or when a change in data/request flow is made in the system</li> </ul> <p>Depending on the tool being used, automatic versioning might be performed whenever an update to the Diagram is performed. If not, it is recommended to capture distinct versions whenever there is a particular customer need to have a snapshot of the project at a particular point in time. The hard requirement is that the latest diagram should be published and everyone should know how to access it as the customer hand-off approaches.</p>"},{"location":"design/diagram-types/sequence-diagrams/#resources","title":"Resources","text":"<ul> <li>Wikipedia</li> <li>Visual Paradigm</li> <li>VS Code Plugins:<ul> <li>PlantUML - requires a generator from code to PlantUML syntax to generate diagrams<ul> <li>PlantUML Syntax</li> <li>Drawing manually</li> </ul> </li> </ul> </li> </ul>"},{"location":"design/sustainability/","title":"Sustainable Software Engineering","text":"<p>The choices made throughout the engineering process regarding cloud services, software architecture design and automation can have a big impact on the carbon footprint of a solution. Some choices are always beneficial, like turning off unused resources. Other choices require a more nuanced understanding of the business case at hand and its potential carbon impact.</p>"},{"location":"design/sustainability/#goal","title":"Goal","text":"<p>One goal of this section is to provide tangible guidance for what sustainable actions you can apply in certain situations and the tools to be able to implement those recommendations. Another goal is to highlight the many resources available to learn about the wider domain of sustainable software.</p>"},{"location":"design/sustainability/#sustainable-engineering-checklist","title":"Sustainable Engineering Checklist","text":"<p>This checklist should be used to quickly identify scenarios for which common sustainable actions exist. Check the box if the scenario applies to your project, then go through the actions and tools you can use to build more sustainable software for those cases. If there are important nuances to consider, they will be linked in the <code>Disclaimers</code> section.</p> <p>For readability some considerations are blank, indicating that the action applies to the first consideration above it.</p> \u2705 Consideration Action Principle Tools Disclaimers For any running software/services Shutdown unused resources. Electricity Consumption Identify Unassociated Resources Resize physical or virtual machines to improve utilization. Energy Proportionality Azure Advisor Cost Recommendations Understanding Advisor Recommendations For development and testing VMs Configure VMs to shutdown during off-hours Electricity Consumption Start/Stop VMs during off-hours For VMs with attached volumes Limit the amount of attached storage capacity to what you expect to use and expand as necessary Electricity Consumption Expanding storage of active VMs Understanding the energy cost of storage For systems using object storage (Azure Blob Storage, AWS S3, GCP Cloud Storage, etc) Compress infrequently accessed data Electricity Consumption, Embodied Carbon Compressing and extracting files in .NET Understanding the energy cost of storage Delete data when it is no longer needed Electricity Consumption Configuring a lifecycle management policy Understanding the energy cost of storage For systems running in on-premise data centers Migrate to hyperscale cloud provider Embodied Carbon, Electricity Consumption Cloud Adoption Approaches Carbon benefits of cloud computing For systems migrating to a hyperscale cloud provider Consider physically shipping data to the provider Networking Azure Data Box Understanding data shipping tradeoffs For time-flexible workloads Utilize \"Spot VMs\" for compute Demand Shaping How to use Spot VMs For services with varied utilization patterns Configure Autoscaling Energy Proportionality Autoscaling Documentation Use serverless functions Energy Proportionality Serverless Architecture Design For services with geographically co-located users (EG internal employee apps) Select a data center region that is physically close to them Networking Azure products available by region Consider running edge devices to reduce excessive data transfer Networking Azure Stack Edge Understanding edge tradeoffs For systems sending data over the network Use caching policies to keep data on the local machine Networking HTTP caching APIs, Cache Management in .NET Understanding caching tradeoffs Consider caching data close to end users with a CDN Networking Benefits of a CDN Understanding CDN tradeoffs Send only the data that will be used Networking Compress data to reduce the size Networking Compressing and extracting files in .NET When designing for the end user Consider giving users visibility and control over their energy usage Electricity Consumption Demand Shaping Designing for eco-mode Design and test your application to be compatible for a wide variety of devices, especially older devices Embodied Carbon Extending device lifespan Compatibility Testing When selecting a programming language Consider the energy efficiency of languages Electricity Consumption Reasoning about the energy consumption of programming languages, Programming Language Energy Efficiency (PDF) Making informed programming language choices"},{"location":"design/sustainability/#resources","title":"Resources","text":"<ul> <li>Principles of Green Software Engineering</li> <li>Green Software Foundation</li> <li>Microsoft Cloud for Sustainability</li> <li>Learning Module: Sustainable Software Engineering</li> </ul>"},{"location":"design/sustainability/#tools","title":"Tools","text":"<ul> <li>Carbon-Aware SDK</li> <li>\"Awesome List\" of Green Software</li> <li>Emissions Impact</li> <li>Azure GreenAI Carbon-Intensity API</li> </ul>"},{"location":"design/sustainability/#projects","title":"Projects","text":"<ul> <li>Sustainability through SpotVMs</li> </ul>"},{"location":"design/sustainability/sustainable-action-disclaimers/","title":"Disclaimers","text":"<p>The following disclaimers provide more details about how to consider the impact of particular actions recommended by the Sustainable Engineering Checklist.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-resize-physical-or-virtual-machines-to-improve-utilization","title":"ACTION: Resize Physical or Virtual Machines to Improve Utilization","text":"<p>Recommendations from cost-savings tools are usually aligned with carbon-reduction, but as sustainability is not the purpose of such tools, carbon-savings are not guaranteed. How a cloud provider or data center manages unused capacity is also a factor in determining how impactful this action may be. For example:</p> <p>The sustainable impact of using smaller VMs in the same family are typically beneficial or neutral. When cores are no longer reserved they can be used by others instead of bringing new servers online.</p> <p>The sustainable impact of changing VM families can be harder to reason about because the underlying hardware and reserved cores may be changing with them.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-migrate-to-a-hyperscale-cloud-provider","title":"ACTION: Migrate to a Hyperscale Cloud Provider","text":"<p>Carbon savings from hyperscale cloud providers are generally attributable to four key features: IT operational efficiency, IT equipment efficiency, data center infrastructure efficiency, and renewable electricity. Microsoft Cloud, for example, is between 22 and 93 percent more energy efficient than traditional enterprise data centers, depending on the specific comparison being made. When taking into account renewable energy purchases, the Microsoft Cloud is between 72 and 98 percent more carbon efficient. Source (PDF)</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-consider-running-an-edge-device","title":"ACTION: Consider Running an Edge Device","text":"<p>Running an edge device negates many of the benefits of hyperscale compute facilities, so considering the local energy grid mix and the typical timing of the workloads is important to determine if this is beneficial overall.  The larger volume of data that needs to be transmitted, the more this solution becomes appealing. For example, sending large amounts of audio and video content for processing.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-consider-physically-shipping-data-to-the-provider","title":"ACTION: Consider Physically Shipping Data to the Provider","text":"<p>Shipping physical items has its own carbon impact, depending on the mode of transportation, which needs to be understood before making this decision.  The larger the volume of data that needs to be transmitted the more this options may be beneficial.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-consider-the-energy-efficiency-of-languages","title":"ACTION: Consider the Energy Efficiency of Languages","text":"<p>When selecting a programming language, the most energy efficient programming language may not always be the best choice for development speed, maintenance, integration with dependent systems, and other project factors. But when deciding between languages that all meet the project needs, energy efficiency can be a helpful consideration.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-use-caching-policies","title":"ACTION: Use Caching Policies","text":"<p>A cache provides temporary storage of resources that have been requested by an application. Caching can improve application performance by reducing the time required to get a requested resource. Caching can also improve sustainability by decreasing the amount of network traffic.</p> <p>While caching provides these benefits, it also increases the risk that the resource returned to the application is stale, meaning that it is not identical to the resource that would have been sent by the server if caching were not in use. This can create poor user experiences when data accuracy is critical.</p> <p>Additionally, caching may allow unauthorized users or processes to read sensitive data. An authenticated response that is cached may be retrieved from the cache without an additional authorization. Due to security concerns like this, caching is not recommended for middle tier scenarios.</p>"},{"location":"design/sustainability/sustainable-action-disclaimers/#action-consider-caching-data-close-to-end-users-with-a-cdn","title":"ACTION: Consider Caching Data Close to End Users with a CDN","text":"<p>Including CDNs in your network architecture adds many additional servers to your software footprint, each with their own  local energy grid mix.  The details of CDN hardware and the impact of the power that runs it is important to determine if the carbon emissions from running them is lower than the emissions from sending the data over the wire from a more distant source.  The larger the volume of data, distance it needs to travel, and frequency of requests, the more this solution becomes appealing.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/","title":"Sustainable Principles","text":"<p>The following principle overviews provide the foundations supporting specific actions in the Sustainable Engineering Checklist. More details about each principle can be found by following the links in the headings or visiting the Principles of Green Software Engineering website.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/#electricity-consumption","title":"Electricity Consumption","text":"<p>Most electricity is still produced through the burning of fossil fuels and is responsible for 49% of the carbon emitted into the atmosphere.</p> <p>Software consumes electricity in its execution. Running hardware consumes electricity even at zero percent utilization.  Some of the best ways we can reduce electricity consumption and the subsequent emissions of carbon pollution is to make our applications more energy efficient when they are running and limit idle hardware.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/#energy-proportionality","title":"Energy Proportionality","text":"<p>The relationship between power and utilization is not proportional.</p> <p>The more you utilize a computer, the more efficient it becomes at converting electricity to useful computing operations. Running your work on as few servers as possible with the highest utilization rate maximizes their energy efficiency.</p> <p>An idle computer, even running at zero percent utilization, still draws electricity.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/#embodied-carbon","title":"Embodied Carbon","text":"<p>Embodied carbon (otherwise referred to as \"Embedded Carbon\") is the amount of carbon pollution emitted during the creation and disposal of a device. When calculating the total carbon pollution for the computers running your software, account for both the carbon pollution to run the computer and the embodied carbon of the computer. Therefore a great way to reduce embodied carbon is to prevent the need for new devices to be manufactured by extending the usefulness of existing ones.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/#demand-shaping","title":"Demand Shaping","text":"<p>Demand shaping is a strategy of shaping our demand for resources so it matches the existing supply.</p> <p>If supply is high, increase the demand by doing more in your applications. If the supply is low, decrease demand.  This means doing less in your applications or delaying work until supply is higher.</p>"},{"location":"design/sustainability/sustainable-engineering-principles/#networking","title":"Networking","text":"<p>A network is a series of switches, routers, and servers. All the computers and network equipment in a network consume electricity and have embedded carbon. The internet is a global network of devices typically run off the standard local grid energy mix.</p> <p>When you send data across the internet, you are sending that data through many devices in the network, each one of those devices consuming electricity. As a result, any data you send or receive over the internet emits carbon.</p> <p>The amount of carbon emitted to send data depends on many factors including:</p> <ul> <li>Distance the data travels</li> <li>Number of hops between network devices</li> <li>Energy efficiency of the network devices</li> <li>Carbon intensity of energy used by each device at the time the data is transmitted.</li> <li>Network protocol used to coordinate data transmission - e.g. multiplex, header compression, TLS/Quic</li> </ul> <p>Recent networking studies - Cloud Carbon Footprint</p>"},{"location":"developer-experience/","title":"Developer Experience (DevEx)","text":"<p>Developer experience refers to how easy or difficult it is for a developer to perform essential tasks needed to implement a change. A positive developer experience would mean these tasks are relatively easy for the team (see measures below).</p> <p>The essential tasks are identified below.</p> <ul> <li>Build - Verify that changes are free of syntax error and compile.</li> <li>Test - Verify that all automated tests pass.</li> <li>Start - Launch end-to-end to simulate execution in a deployed environment.</li> <li>Debug - Attach debugger to started solution, set breakpoints, step through code, and inspect variables.</li> </ul> <p>If effort is invested to make these activities as easy as possible, the returns on that effort will increase the longer the project runs, and the larger the team is.</p>"},{"location":"developer-experience/#defining-end-to-end","title":"Defining End-to-End","text":"<p>This document makes several references to running a solution end-to-end (aka E2E). End-to-end for the purposes of this document is scoped to the software that is owned, built, and shipped by the team. Systems owned by other teams or third-party vendors is not within the E2E scope for the purposes of this document.</p>"},{"location":"developer-experience/#goals","title":"Goals","text":"<ul> <li>Maximize the amount of time engineers spend on writing code that fulfills story acceptance and done-done criteria.</li> <li>Minimize the amount of time spent manual setup and configuration of tooling</li> <li>Minimize regressions and new defects by making end-to-end testing easy</li> </ul>"},{"location":"developer-experience/#impact","title":"Impact","text":"<p>Developer experience can have a significant impact on the efficiency of the day-to-day execution of the team. A positive experience can pay dividends throughout the lifetime of the project; especially as new developers join the team.</p> <ul> <li>Increased Velocity - Team spends less time on non-value-add activities such as dev/local environment setup, waiting on remote environments to test, and rework (fixing defects).</li> <li>Improved Quality - When it's easy to debug and test, developers will do more of it. This will translate to fewer defects being introduced.</li> <li>Easier Onboarding &amp; Adoption - When dev essential tasks are automated, there is less documentation to write and, subsequently, less to read to get started!</li> </ul> <p>Most importantly, the customer will continue to accrue these benefits long after the code-with engagement.</p>"},{"location":"developer-experience/#measures","title":"Measures","text":""},{"location":"developer-experience/#time-to-first-e2e-result-aka-f5-contract","title":"Time to First E2E Result (aka F5 Contract)","text":"<p>Assuming a laptop/pc that has never run the solution, how long does it take to set up and run the whole system end-to-end and see a result.</p>"},{"location":"developer-experience/#time-to-first-commit","title":"Time To First Commit","text":"<p>How long does it take to make a change that can be verified/tested locally. A locally verified/tested change is one that passes test cases without introducing regression or breaking changes.</p>"},{"location":"developer-experience/#participation","title":"Participation","text":"<p>Providing a positive developer experience is a team effort. However, certain members can take ownership of different areas to help hold the entire team accountable.</p>"},{"location":"developer-experience/#dev-lead-set-the-bar","title":"Dev Lead - Set the Bar","text":"<p>The following are examples of how the Dev Lead might set the bar for dev experience</p> <ul> <li>Determines development environment (suggested IDE, hosting, etc)</li> <li>Determines source control environment and number of repos required</li> <li>Given development environment and repo structure, sets expectations for team to meet in terms of steps to perform the essential dev tasks</li> <li>Nominates the DevEx Champion</li> </ul> <p>IDE choice is NOT intended to mandate that all team members must use the same IDE. However, this choice will direct where tight-integration investment will be prioritized. For example, if Visual Studio Code is the suggested IDE then, the team would focus on integrating VS code tasks and launch configurations over similar integrations for other IDEs. Team members should still feel free to use their preferred IDE as long as it does not negatively impact the team.</p>"},{"location":"developer-experience/#devex-champion-identify-iterative-improvements","title":"DevEx Champion - Identify Iterative Improvements","text":"<p>The DevEx champion takes ownership in holding the team accountable for providing a positive developer experience. The following outline responsibilities for the DevEx champion.</p> <ul> <li>Actively seek opportunities for improving the solution developer experience</li> <li>Work with the Dev Lead to iteratively improve team expectations for developer experience</li> </ul> <ul> <li>Curate a backlog actionable stories that identify areas for improvement and prioritize with respect to project delivery goals by engaging directly with the Product Owner and Customer.</li> <li>Serve as subject-matter expert for the rest of the team. Help the team determine how to implement DevEx expectations and identify deviations.</li> </ul>"},{"location":"developer-experience/#team-members-assert-expectations","title":"Team Members - Assert Expectations","text":"<p>The team members of the team can also help hold each other accountable for providing a positive developer experience. The following are examples of areas team members can help identify where the team's DevEx expectations are not being met.</p> <ul> <li>Pull requests. Try the changes locally to see if they are adhering to the team's DevEx expectations.</li> <li>Design Reviews. Look for proposals that may negatively affect the solution's DevEx. These might include<ul> <li>Introduction of new tech whose testability is limited to manual steps in a deployed environment.</li> <li>Addition of new repository</li> </ul> </li> </ul>"},{"location":"developer-experience/#new-team-members-identify-iterative-improvements","title":"New Team Members - Identify Iterative Improvements","text":"<p>New team members are uniquely positioned to identify instances of undocumented Collective Wisdom. The following outlines responsibilities of new team members as it relates to DevEx:</p> <ul> <li>If you come across missing, incomplete or incorrect documentation while onboarding, you should record the issue as a new defect(s) and assign it to the product owner to triage.</li> <li>If no onboarding documentation exists, note the steps you took in a new user story. Assign the new story to the product owner to triage.</li> </ul>"},{"location":"developer-experience/#facilitation-guidance","title":"Facilitation Guidance","text":"<p>The following outline examples of several strategies that can be adopted to promote a positive developer experience. It is expected that each team should define what a positive dev experience means within the context of their project. Additionally, refine that over time via feedback mechanisms such as sprint and project retrospectives.</p>"},{"location":"developer-experience/#establish-hotkeys","title":"Establish Hotkeys","text":"<p>Assign hotkeys to each of the essential tasks.</p> Task Windows Build CTRL+SHIFT+B Test CTRL+R,T Start With Debugging F5"},{"location":"developer-experience/#the-f5-contract","title":"The F5 Contract","text":"<p>The F5 contract aims for the ability to run the end-to-end solution with the following steps.</p> <ol> <li>Clone - git clone [<code>my-repo-url-here</code>]</li> <li>Configure - set any configuration values that need to be unique to the individual (i.e. update a .env file)</li> <li>Press F5 - launch the solution with debugging attached.</li> </ol> <p>Most IDEs have some form of a task runner that can be used to automate the build, execute, and attach steps. Try to leverage these such that the steps can all be run with as few manual steps as possible.</p>"},{"location":"developer-experience/#devex-champion-actively-seek-improvements","title":"DevEx Champion Actively Seek Improvements","text":"<p>The DevEx champion should actively seek areas where the team has opportunity to improve. For example, do they need to deploy their changes to an environment off their laptop before they can validate if what they did worked. Rather than debugging locally, do they have to do this repetitively to get to a working solution? Does this take several minutes each iteration? Does this block other developers due to the contention on the environment?</p> <p>The following are ceremonies that the DevEx champion can use to find potential opportunities</p> <ul> <li>Retrospectives. Is feedback being raised that relates to the essential tasks being difficult or unwieldy?</li> <li>Standup Blockers. Are individuals getting blocked or stumbling on the essential tasks?</li> </ul> <p>As opportunities are identified, the DevEx champion can translate these into actionable stories for the product backlog.</p>"},{"location":"developer-experience/#make-tasks-cross-platform","title":"Make Tasks Cross Platform","text":"<p>For essential tasks being standardized during the engagement, ensure that different platforms are accounted for. Team members may have different operating systems and ensuring the tasks are cross-platform will provide an additional opportunity to improve the experience.</p> <ul> <li>See the making tasks cross platform recipe for guidance on how tasks can be configured to include different platforms.</li> </ul>"},{"location":"developer-experience/#create-an-onboarding-guide","title":"Create an Onboarding Guide","text":"<p>When welcoming new team members to the engagement, there are many areas for them to get adjusted to and bring them up to speed including codebase, coding standards, team agreements, and team culture. By adopting a strong onboarding practice such as an onboarding guide in a centralized location that explains the scope of the project, processes, setup details, and software required, new members can have all the necessary resources for them to be efficient, successful and a valuable team member from the start.</p> <p>See the onboarding guide recipe for guidance on what an onboarding guide may look like.</p>"},{"location":"developer-experience/#standardize-essential-tasks","title":"Standardize Essential Tasks","text":"<p>Apply a common strategy across solution components for performing the essential tasks</p> <ul> <li>Standardize the configuration for solution components</li> <li>Standardize the way tests are run for each component</li> <li>Standardize the way each component is started and stopped locally</li> <li>Standardize how to document the essential tasks for each component</li> </ul> <p>This standardization will enable the team to more easily automate these tasks across all components at the solution level. See Solution-level Essential Tasks below.</p>"},{"location":"developer-experience/#solution-level-essential-tasks","title":"Solution-level Essential Tasks","text":"<p>Automate the ability to execute each essential task across all solution components. An example would be mapping the build action in the IDE to run the build task for each component in the solution. More importantly, configure the IDE start action to start all components within the solution. This will provide significant efficiency for the engineering team when dealing with multi-component solutions.</p> <p>When this is not implemented, the engineers must repeat each of the essential tasks manually for each component in the solution. In this situation, the number of steps required to perform each essential task is multiplied by the number of components in the system</p> <p>[Configuration steps + Build steps + Start/Debug steps + Stop steps + Run test steps + Documenting all of the above] * [many solution components] = TOO MANY STEPS</p> <p>VS.</p> <p>[Configuration steps + Build steps + Start/Debug steps + Stop steps + Run test steps + Documenting all of the above] * [1 solution] = MINIMUM NUMBER OF STEPS</p>"},{"location":"developer-experience/#observability","title":"Observability","text":"<p>Observability alleviates unforeseen challenges for the developer in a complex distributed system. It identifies project bottlenecks quicker and with more precision, enhancing performance as the developer seeks to deploy code changes. Adding observability improves the experience when identifying and resolving bugs or broken code. This results in fewer or less severe current and future production failures.</p> <p>There are many observability strategies a developer can use alongside best engineering practices. These resources improve the DevEx by ensuring a shared view of the complex system throughout the entire lifecycle. Observability in code via logging, exception handling and exposing of relevant application metrics for example, promotes the consistent visibility of real time performance. The observability pillars, logging, metrics, and tracing, detail when to enable each of the three specific types of observability.</p>"},{"location":"developer-experience/#minimize-the-number-of-repositories","title":"Minimize the Number of Repositories","text":"<p>Splitting a solution across multiple repositories can negatively impact the above measures. This can also negatively impact other areas such as Pull Requests, Automated Testing, Continuous Integration, and Continuous Delivery. Similar to the IDE instances, the negative impact is multiplied by the number of repositories.</p> <p>[Clone steps + Branching steps + Commit steps + CI steps + Pull Request reviews &amp; merges ] * [many source code repositories] = TOO MANY STEPS</p> <p>VS.</p> <p>[Clone steps + Branching steps + Commit steps + CI steps + Pull Request reviews &amp; merges ] * [1 source code repository] = MINIMUM NUMBER OF STEPS</p>"},{"location":"developer-experience/#atomic-pull-requests","title":"Atomic Pull Requests","text":"<p>When the solution is encapsulated within a single repository, it also allows pull requests to represent a change across multiple layers. This is especially helpful when a change requires changes to a shared contract between multiple components. For example, a story requires that an api endpoint is changed. With this strategy the api and web client could be updated with the same pull request. This avoids the main branch being broken temporarily while waiting on dependent pull requests to merge.</p>"},{"location":"developer-experience/#minimize-remote-dependencies-for-local-development","title":"Minimize Remote Dependencies for Local Development","text":"<p>The fewer dependencies on components that cannot run a developer's machine translate to fewer steps required to get started. Therefore, fewer dependencies will positively impact the measures above.</p> <p>The following strategies can be used to reduce these dependencies</p>"},{"location":"developer-experience/#use-an-emulator","title":"Use an Emulator","text":"<p>If available, emulators are implementations of technologies that are typically only available in cloud environments. A good example is the CosmosDB emulator.</p>"},{"location":"developer-experience/#use-di-toggle-to-mock-remote-dependencies","title":"Use DI + Toggle to Mock Remote Dependencies","text":"<p>When the solution depends on a technology that cannot be run on a developer's machine, the setup and testing of that solution can be challenging. One strategy that can be employed is to create the ability to swap that dependency for one that can run locally.</p> <p>Abstract the layer that has the remote dependency behind an interface owned by the solution (not the remote dependency). Create an implementation of that interface using a technology that can be run locally. Create a factory that decides which instance to use. This decision could be based on environment configuration (i.e. the toggle). Then, the original class that depends on the remote tech instead should depend on the factory to provide which instance to use.</p> <p>Much of this strategy can be simplified with proper dependency injection technique and/or framework.</p> <p>See example below that swaps Azure Service Bus implementation for RabbitMQ which can be run locally.</p> <pre><code>interface IPublisher {\n    send(message: string): void\n}\nclass RabbitMQPublisher implements IPublisher {\n    send(message: string) {\n        //todo: send the message via RabbitMQ\n    }\n}\nclass AzureServiceBusPublisher implements IPublisher {\n    send(message: string) {\n        //todo: send the message via Azure Service Bus\n    }\n}\ninterface IPublisherFactory{\n    create(): IPublisher\n}\nclass PublisherFactory{\n    create(): IPublisher {\n        // use env var value to determine which instance should be used\n        if(process.env.UseAsb){\n            return new AzureServiceBusPublisher();\n        }\n        else{\n            return new RabbitMqPublisher();\n        }\n    }\n}\nclass MyService {\n    //inject the factory\n    constructor(private readonly publisherFactory: IPublisherFactory){\n    }\n    sendAMessage(message: string): void{\n        //use the factory to determine which instance to use\n        const publisher: IPublisher = this.publisherFactory.create();\n        publisher.send(message);\n    }\n}\n</code></pre> <p>The recipes section has a more complete discussion on DI as part of a high productivity inner dev loop</p>"},{"location":"developer-experience/client-app-inner-loop/","title":"Separating Client Apps from the Services They Consume During Development","text":"<p>Client Apps typically rely on remote services to power their apps. However, development schedules between the client app and the services don't always fully align. For a high velocity inner dev loop, client app development must be decoupled from the backend services while still allowing the app to \"invoke\" the services for local testing.</p>"},{"location":"developer-experience/client-app-inner-loop/#options","title":"Options","text":"<p>Several options exist to decouple client app development from the backend services. The options range from embedding mock implementation of the services into the application, others rely on simplified versions of the services.</p> <p>This document lists several options and discusses trade-offs.</p>"},{"location":"developer-experience/client-app-inner-loop/#embedded-mocks","title":"Embedded Mocks","text":"<p>An embedded mock solution includes classes that implement the service interfaces locally. Interfaces and data classes, also called models or data transfer objects or DTOs, are often generated from the services' API specs using tools like nswag (RicoSuter/NSwag: The Swagger/OpenAPI toolchain for .NET, ASP.NET Core and TypeScript. (github.com)) or autorest (Azure/autorest: OpenAPI (f.k.a Swagger) Specification code generator. Supports C#, PowerShell, Go, Java, Node.js, TypeScript, Python, Ruby (github.com)).</p> <p>A simple service implementation can return a static response. For RESTful services, the JSON responses for the stubs can be stored as application resources or simply as static strings.</p> <pre><code>public Task&lt;UserProfile&gt; GetUserAsync(long userId, CancellationToken cancellationToken)\n{\n\u00a0 \u00a0 PetProfile result = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;UserProfile&gt;(\n        MockUserProfile.UserProfile, new Newtonsoft.Json.JsonSerializerSettings());\n\n\u00a0 \u00a0 return Task.FromResult(result);\n}\n</code></pre> <p>More sophisticated can randomly return errors to test the app's resiliency code paths.</p> <p>Mocks can be activated via conditional compilation or dynamically via app configuration. In either case, it is recommended to ensure that mocks, service responses and externalized configurations are not included in the final release to avoid confusing behavior and inclusion of potential vulnerabilities.</p>"},{"location":"developer-experience/client-app-inner-loop/#sample-registering-mocks-via-dependency-injection","title":"Sample: Registering Mocks via Dependency Injection","text":"<p>Dependency Injection Containers like Unity (Unity Container Introduction | Unity Container) make it easy to switch between mock services and real service client implementations. Since both implement the same interface, implementations can be registered with the Unity container.</p> <pre><code>public static void Bootstrap(IUnityContainer container)\n{\n\n#if DEBUG\n\u00a0 \u00a0 container.RegisterSingleton&lt;IUserServiceClient, MockUserService&gt;();\n#else\n\u00a0 \u00a0 container.RegisterSingleton&lt;IUserServiceClient, UserServiceClient&gt;();\n#endif\n\n}\n</code></pre>"},{"location":"developer-experience/client-app-inner-loop/#consuming-mocks-via-dependency-injection","title":"Consuming Mocks via Dependency Injection","text":"<p>The code consuming the interfaces will not notice the difference.</p> <pre><code>public class UserPageModel\n{\n\u00a0 \u00a0 private readonly IUserServiceClient userServiceClient;\n\n\u00a0 \u00a0 public UserPageModel(IUserServiceClient userServiceClient)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 this.userServiceClient = userServiceClient;\n\u00a0 \u00a0 }\n\n    // ...\n}\n</code></pre>"},{"location":"developer-experience/client-app-inner-loop/#local-services","title":"Local Services","text":"<p>The approach with Locally Running Services is to replace the call in the client from pointing to the actual endpoint (whether dev, QA, prod, etc.) to a local endpoint.</p> <p>This approach also enables injecting traffic capture and shaping proxies like Postman (Postman API Platform | Sign Up for Free) or Fiddler (Fiddler | Web Debugging Proxy and Troubleshooting Solutions (telerik.com)).</p> <p>The advantage of this approach is that the APIs are decoupled from the client and can be independently updated/modified (e.g. changing response codes, changing data) without requiring changes to the client. This helps to unlock new development scenarios and provides flexibility during the development phase.</p> <p>The challenge with this approach is that it does require setup, configuration, and running of the services locally. There are tools that help to simplify that process (e.g. JsonServer, Postman Mock Server).</p>"},{"location":"developer-experience/client-app-inner-loop/#high-fidelity-local-services","title":"High-Fidelity Local Services","text":"<p>A local service stub implements the expected APIs. Just like the embedded mock, it can be generated based on existing API contracts (e.g. OpenAPI).</p> <p>A high-fidelity approach packages the real services together with simplified data in docker containers that can be run locally using docker-compose before the client app is started for local debugging and testing. To enable running services fully local the \"local version\" substitutes dependent cloud services with local alternatives, e.g. file storage instead of blobs, locally running SQL Server instead of SQL AzureDB.</p> <p>This approach also enables full fidelity integration testing without spinning up distributed deployments.</p>"},{"location":"developer-experience/client-app-inner-loop/#stub-fake-services","title":"Stub / Fake Services","text":"<p>Lower fidelity approaches run stub services, that could be generated from API specs, or run fake servers like JsonServer (JsonServer.io: A fake json server API Service for prototyping and testing.) or Postman. All these services would respond with predetermined and configured JSON messages.</p>"},{"location":"developer-experience/client-app-inner-loop/#how-to-decide","title":"How to Decide","text":"Pros Cons Example when developing for: Example When not to Use Embedded Mocks Simplifies the F5 developer experience Tightly coupled with Client More static type data scenarios Testing  (e.g. unit tests, integration tests) No external dependencies to manage Hard coded data Initial integration with services Mocking via Dependency Injection can be a non-trivial effort High-Fidelity Local Services Loosely Coupled from Client Extra tooling required i.e. local infrastructure overhead URL Routes When API contract are not available Easier to independently modify response Extra setup and configuration of services Independent updates to services Can utilize HTTP traffic Easier to replace with real services at a later time Stub/Fake Services Loosely coupled from client Extra tooling required i.e. local infrastructure overhead Response Codes When API Contracts available Easier to independently modify response Extra setup and configuration of services Complex/variable data scenarios When API Contracts are note available Independent updates to services Might not provide full fidelity of expected API Can utilize HTTP traffic Easier to replace with real services at a later time"},{"location":"developer-experience/copilots/","title":"Copilots","text":"<p>There are a number of AI tools that can improve the developer experience. This article will discuss tooling that is available as well as advice on when it might be appropriate to use such tooling.</p>"},{"location":"developer-experience/copilots/#github-copilot","title":"GitHub Copilot","text":"<p>The current version of GitHub Copilot can provide code completion in many popular IDEs. For instance, the VS Code extension that can be installed from the VS Code Marketplace. It requires a GitHub account to use. For more information about what IDEs are supported, what languages are supported, cost, features, etc., please checkout out the information on Copilot and Copilot for Business.</p> <p>Some example use-cases for GitHub Copilot include:</p> <ul> <li>Write Documentation. For example, the above paragraph was written using Copilot.</li> </ul> <ul> <li>Write Unit Tests. Given that setup and assertions are often consistent across unit tests, Copilot tends to be very accurate.</li> </ul> <ul> <li>Unblock. It is often hard start writing when staring at a blank page, Copilot can fill the space with something that may or may not be what you ultimately want to do, but it can help get you in the right head space.</li> </ul> <p>If you want Copilot to write something useful for you, try writing a comment that describes what your code is going to do - it can often take it from there.</p>"},{"location":"developer-experience/copilots/#github-copilot-labs","title":"GitHub Copilot Labs","text":"<p>Copilot has a GitHub Copilot labs extension that offers additional features that are not yet ready for prime-time. For VS Code, you can install it from the VS Code Marketplace. These features include:</p> <ul> <li>Explain. Copilot can explain what the code is doing in natural language.</li> </ul> <ul> <li>Translate. Copilot can translate code from one language to another.</li> </ul> <ul> <li>Brushes. You can select code that Copilot then modifies inline based on a \"brush\" you select, for example, to make the code more readable, fix bugs, improve debugging, document, etc.</li> </ul> <ul> <li>Generate Tests. Copilot can generate unit tests for your code. Though currently this is limited to JavaScript and TypeScript.</li> </ul>"},{"location":"developer-experience/copilots/#github-copilot-x","title":"GitHub Copilot X","text":"<p>The next version of Copilot offers a number of new use-cases beyond code completion. These include:</p> <ul> <li>Chat. Rather than just providing code completion, Copilot will be able to have a conversation with you about what you want to do. It has context about the code you are working on and can provide suggestions based on that context. Beyond just writing code, consider using chat to:</li> </ul> <ul> <li>Build SQL Indexes. Given a query, Copilot can generate a SQL index that will improve the performance of the query.</li> </ul> <ul> <li>Write Regular Expressions. These are notoriously difficult to write, but Copilot can generate them for you if you give some sample input and describe what you want to extract.</li> </ul> <ul> <li>Improve and Validate. If you are unsure of the implications of writing code a particular way, you can ask questions about it. For instance, you might ask if there is a way to write the code that is more performant or uses less memory. Once it gives you an opinion, you can ask it to provide documentation validating that assertion.</li> </ul> <ul> <li>Explain. Copilot can explain what the code is doing in natural language.</li> </ul> <ul> <li>Write Code. Given prompting by the developer it can write code that you can one-click deploy into existing or new files.</li> </ul> <ul> <li>Debug. Copilot can analyze your code and propose solutions to fix bugs.</li> </ul> <p>It can do most of what Labs can do with \"brushes\" as \"topics\", but whereas Labs changes the code in your file, the chat functionality just shows what it would change in the window. However, there is also an \"inline mode\" for GitHub Copilot Chat that allows you to make changes to your code inline which does not have this same limitation.</p>"},{"location":"developer-experience/copilots/#chatgpt-bing-chat","title":"ChatGPT / Bing Chat","text":"<p>For coding, generic AI chat tools such as ChatGPT and Bing Chat are less useful, but they still have their place. GitHub Copilot will only answer \"questions about coding\" and it's interpretation of that rule can be a little restrictive. Some cases for using ChatGPT or Bing Chat include:</p> <ul> <li>Write Documentation. Copilot can write documentation, but using ChatGPT or Bing Chat, you can expand your documentation to include business information, use-cases, additional context, etc.</li> </ul> <ul> <li>Change Perspective. ChatGPT can impersonate a persona or even a system and answer questions from that perspective. For example, you can ask it to explain what a particular piece of code does from the perspective of a user. You might have ChatGPT imagine it is a database administrator and ask it to explain how to improve a particular query.</li> </ul> <p>When using Bing Chat, experiment with modes, sometimes changing to Creative Mode can give the results you need.</p>"},{"location":"developer-experience/copilots/#prompt-engineering","title":"Prompt Engineering","text":"<p>Chat AI tools are only as good as the prompts you give them. The quality and appropriateness of the output can vary greatly depending on the prompt. In addition, many of these tools restrict the number of prompts you can send in a given amount of time. To learn more about prompt engineering, you might review some open source documentation here.</p>"},{"location":"developer-experience/copilots/#considerations","title":"Considerations","text":"<p>It is important when using AI tools to understand how the data (including private or commercial code) might be used by the system. Read more about how GitHub Copilot handles your data and code here.</p>"},{"location":"developer-experience/cross-platform-tasks/","title":"Cross Platform Tasks","text":"<p>There are several options to alleviate cross-platform compatibility issues.</p> <ul> <li>Running tasks in a container</li> <li>Using the tasks-system in VS Code which provides options to allow commands to be executed specific to an operating system.</li> </ul>"},{"location":"developer-experience/cross-platform-tasks/#docker-or-container-based","title":"Docker or Container Based","text":"<p>Using containers as development machines allows developers to get started with minimal setup and abstracts the development environment from the host OS by having it run in a container. DevContainers can also help in standardizing the local developer experience across the team.</p> <p>The following are some good resources to get started with running tasks in DevContainers</p> <ul> <li>Developing inside a container.</li> <li>Tutorial on Development in Containers</li> <li>For samples projects and dev container templates see VS Code Dev Containers Recipe</li> <li>Dev Containers Library</li> </ul>"},{"location":"developer-experience/cross-platform-tasks/#tasks-in-vscode","title":"Tasks in VSCode","text":""},{"location":"developer-experience/cross-platform-tasks/#running-nodejs","title":"Running Node.js","text":"<p>The example below offers insight into running Node.js executable as a command with tasks.json and how it can be treated differently on Windows and Linux.</p> <pre><code>{\n  \"label\": \"Run Node\",\n  \"type\": \"process\",\n  \"windows\": {\n    \"command\": \"C:\\\\Program Files\\\\nodejs\\\\node.exe\"\n  },\n  \"linux\": {\n    \"command\": \"/usr/bin/node\"\n  }\n}\n</code></pre> <p>In this example, to run Node.js, there is a specific windows command, and a specific linux command. This allows for platform specific properties. When these are defined, they will be used instead of the default properties when the command is executed on the Windows operating system or on Linux.</p>"},{"location":"developer-experience/cross-platform-tasks/#custom-tasks","title":"Custom Tasks","text":"<p>Not all scripts or tasks can be auto-detected in the workspace. It may be necessary at times to defined your own custom tasks. In this example, we have a script to run in order to set up some environment correctly. The script is stored in a folder inside your workspace and named test.sh for Linux &amp; macOS and test.cmd for Windows. With the tasks.json file, the execution of this script can be made possible with a custom task that defines what to do on different operating systems.</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Run tests\",\n      \"type\": \"shell\",\n      \"command\": \"./scripts/test.sh\",\n      \"windows\": {\n        \"command\": \".\\\\scripts\\\\test.cmd\"\n      },\n      \"group\": \"test\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    }\n  ]\n}\n</code></pre> <p>The command here is a shell command and tells the system to run either the test.sh or test.cmd. By default, it will run test.sh with that given path. This example here also defines Windows specific properties and tells it execute test.cmd instead of the default.</p>"},{"location":"developer-experience/cross-platform-tasks/#resources","title":"Resources","text":"<p>VS Code Docs - operating system specific properties</p>"},{"location":"developer-experience/devcontainers-getting-started/","title":"Dev Containers: Getting Started","text":"<p>If you are a developer and have experience with Visual Studio Code (VS Code) or Docker, then it's probably time you look at development containers (dev containers). This readme is intended to assist developers in the decision-making process needed to build dev containers. The guidance provided should be especially helpful if you are experiencing VS Code dev containers for the first time.</p> <p>Note: This guide is not about setting up a Docker file for deploying a running Python program for CI/CD.</p>"},{"location":"developer-experience/devcontainers-getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Experience with VS Code</li> <li>Experience with Docker</li> </ul>"},{"location":"developer-experience/devcontainers-getting-started/#what-are-dev-containers","title":"What are Dev Containers?","text":"<p>Development containers are a VS Code feature that allows developers to package a local development tool stack into the internals of a Docker container while also bringing the VS Code UI experience with them. Have you ever set a breakpoint inside a Docker container? Maybe not. Dev containers make that possible. This is all made possible through a VS Code extension called the Remote Development Extension Pack that works together with Docker to spin-up a VS Code Server within a Docker container. The VS Code UI component remains local, but your working files are volume mounted into the container. The diagram below, taken directly from the official VS Code docs, illustrates this:</p> <p></p> <p>If the above diagram is not clear, a basic analogy that might help you intuitively understand dev containers is to think of them as a union between Docker's interactive mode (<code>docker exec -it 987654e0ff32</code>), and the VS Code UI experience that you are used to.</p> <p>To set yourself up for the dev container experience described above, use your VS Code's Extension Marketplace to install the Remote Development Extension Pack.</p>"},{"location":"developer-experience/devcontainers-getting-started/#how-can-dev-containers-improve-project-collaboration","title":"How can Dev Containers Improve Project Collaboration?","text":"<p>VS Code dev containers have improved project collaboration between developers on recent team projects by addressing two very specific problems:</p> <ul> <li>Inconsistent local developer experiences within a team.</li> <li>Slow onboarding of developers joining a project.</li> </ul> <p>The problems listed above were addressed by configuring and then sharing a dev container definition. Dev containers are defined by their base image, and the artifacts that support that base image. The base image and the artifacts that come with it live in the .devcontainer directory. This directory is where configuration begins. A central artifact to the dev container definition is a configuration file called <code>devcontainer.json</code>. This file orchestrates the artifacts needed to support the base image and the dev container lifecycle. Installation of the Remote Development Extension Pack is required to enable this orchestration within a project repo.</p> <p>All developers on the team are expected to share and use the dev container definition (.devcontainer directory) in order to spin-up a container. This definition provides consistent tooling for locally developing an application across a team.</p> <p>The code snippets below demonstrate the common location of a .devcontainer directory and devcontainer.json file within a project repository. They also highlight the correct way to reference a Docker file.</p> <pre><code>$ tree vs-code-remote-try-python  # main repo directory\n\u2514\u2500\u2500\u2500.devcontainers\n        \u251c\u2500\u2500\u2500Dockerfile\n        \u251c\u2500\u2500\u2500devcontainer.json\n</code></pre> <pre><code># devcontainer.json\n{\n    \"name\": \"Python 3\",\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\",\n        \"context\": \"..\",\n        // Update 'VARIANT' to pick a Python version: 3, 3.6, 3.7, 3.8\n        \"args\": {\"VARIANT\": \"3.8\"}\n    },\n}\n</code></pre> <p>For a list of devcontainer.json configuration properties, visit VS Code documentation on dev container properties.</p>"},{"location":"developer-experience/devcontainers-getting-started/#how-do-i-decide-which-dev-container-is-right-for-my-use-case","title":"How do I Decide Which Dev Container is Right for my Use Case?","text":"<p>Fortunately, VS Code has a repo gallery of platform specific folders that host dev container definitions (.devcontainer directories) to make getting started with dev containers easier. The code snippet below shows a list of gallery folders that come directly from the VS Code dev container gallery repo:</p> <pre><code>$ tree vs-code-dev-containers  # main repo directory\n\u2514\u2500\u2500\u2500containers\n        \u251c\u2500\u2500\u2500dotnetcore\n        |   \u2514\u2500\u2500\u2500.devcontainers # dev container\n        \u251c\u2500\u2500\u2500python-3\n        |   \u2514\u2500\u2500\u2500.devcontainers # dev container\n        \u251c\u2500\u2500\u2500ubuntu\n        |   \u2514\u2500\u2500\u2500.devcontainers # dev container\n        \u2514\u2500\u2500\u2500....\n</code></pre> <p>Here are the final high-level steps it takes to build a dev container:</p> <ol> <li>Decide which platform you'd like to build a local development tool stack around.</li> <li>Browse the VS Code provided dev container gallery of project folders that target your platform and choose the most appropriate one.</li> <li>Inspect the dev container definitions (.devcontainer directory) of a project for the base image, and the artifacts that support that base image.</li> <li>Use what you've discovered to begin setting up the dev container as it is, extending it or building your own from scratch.</li> </ol>"},{"location":"developer-experience/devcontainers-getting-started/#going-further","title":"Going further","text":"<p>There are use cases where you would want to go further in configuring your Dev Container. More details here</p>"},{"location":"developer-experience/devcontainers-going-further/","title":"Dev Containers: Going further","text":"<p>Dev Containers allow developers to share a common working environment, ensuring that the runtime and all dependencies versions are consistent for all developers.</p> <p>Dev containers also allow us to:</p> <ol> <li>Leverage existing tools to enhance the Dev Containers with more features,</li> <li>Provide custom tools (such as scripts) for other developers.</li> </ol>"},{"location":"developer-experience/devcontainers-going-further/#existing-tools","title":"Existing tools","text":"<p>In the development phase, you will most probably need to use tools not installed by default in your Dev Container. For instance, if your project's target is to be deployed on Azure, you will need Azure-cli and maybe Terraform for resources and application deployment. You can find such Dev Containers in the VS Code dev container gallery repo.</p> <p>Some other tools may be:</p> <ul> <li>Linters for markdown files,</li> <li>Linters for bash scripts,</li> <li>Etc...</li> </ul> <p>Linting files that are not the source code can ensure a common format with common rules for each developer. These checks should be also run in a Continuous Integration Pipeline, but it is a good practice to run them prior opening a Pull Request.</p>"},{"location":"developer-experience/devcontainers-going-further/#limitation-of-custom-tools","title":"Limitation of custom tools","text":"<p>If you decide to include Azure-cli in your Dev Container, developers will be able to run commands against their tenant. However, to make the developers' lives easier, we could go further by letting them prefill their connection information, such as the <code>tenant ID</code> and the <code>subscription ID</code> in a secure and persistent way (do not forget that your Dev Container, being a Docker container, might get deleted, or the image could be rebuilt, hence, all customization inside will be lost).</p> <p>One way to achieve this is to leverage environment variables, with untracked <code>.env</code> file part of the solution being injected in the Dev Container.</p> <p>Consider the following files structure:</p> <pre><code>My Application  # main repo directory\n\u2514\u2500\u2500\u2500.devcontainer\n|       \u251c\u2500\u2500\u2500Dockerfile\n|       \u251c\u2500\u2500\u2500devcontainer.json\n\u2514\u2500\u2500\u2500config\n|       \u251c\u2500\u2500\u2500.env\n|       \u251c\u2500\u2500\u2500.env-sample\n</code></pre> <p>The file <code>config/.env-sample</code> is a tracked file where anyone can find environment variables to set (with no values, obviously):</p> <pre><code>TENANT_ID=\nSUBSCRIPTION_ID=\n</code></pre> <p>Then, each developer who clones the repository can create the file <code>config/.env</code> and fills it in with the appropriate values.</p> <p>In order now to inject the <code>.env</code> file into the container, you can update the file <code>devcontainer.json</code> with the following:</p> <pre><code>{\n    ...\n    \"runArgs\": [\"--env-file\",\"config/.env\"],\n    ...\n}\n</code></pre> <p>As soon as the Dev Container is started, these environment variables are sent to the container.</p> <p>Another approach would be to use Docker Compose, a little bit more complex, and probably too much for just environment variables. Using Docker Compose can unlock other settings such as custom dns, ports forwarding or multiple containers.</p> <p>To achieve this, you need to add a file <code>.devcontainer/docker-compose.yml</code> with the following:</p> <pre><code>version: '3'\nservices:\n  my-workspace:\n    env_file: ../config/.env\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: sleep infinity\n</code></pre> <p>To use the <code>docker-compose.yml</code> file instead of <code>Dockerfile</code>, we need to adjust <code>devcontainer.json</code> with:</p> <pre><code>{\n    \"name\": \"My Application\",\n    \"dockerComposeFile\": [\"docker-compose.yml\"],\n    \"service\": \"my-workspace\"\n    ...\n}\n</code></pre> <p>This approach can be applied for many other tools by preparing what would be required. The idea is to simplify developers' lives and new developers joining the project.</p>"},{"location":"developer-experience/devcontainers-going-further/#custom-tools","title":"Custom tools","text":"<p>While working on a project, any developer might end up writing a script to automate a task. This script can be in <code>bash</code>, <code>python</code> or whatever scripting language they are comfortable with.</p> <p>Let's say you want to ensure that all markdown files written are validated against specific rules you have set up. As we have seen above, you can include the tool markdownlint in your Dev Container . Having the tool installed does not mean developer will know how to use it!</p> <p>Consider the following solution structure:</p> <pre><code>My Application  # main repo directory\n\u2514\u2500\u2500\u2500.devcontainer\n|       \u251c\u2500\u2500\u2500Dockerfile\n|       \u251c\u2500\u2500\u2500docker-compose.yml\n|       \u251c\u2500\u2500\u2500devcontainer.json\n\u2514\u2500\u2500\u2500scripts\n|       \u251c\u2500\u2500\u2500check-markdown.sh\n\u2514\u2500\u2500\u2500.markdownlint.json\n</code></pre> <p>The file <code>.devcontainer/Dockerfile</code> installs markdownlint</p> <pre><code>...\nRUN apt-get update \\\n    &amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n    &amp;&amp; apt-get install -y nodejs npm\n\n# Add NodeJS tools\nRUN npm install -g markdownlint-cli\n...\n</code></pre> <p>The file <code>.markdownlint.json</code> contains the rules you want to validate in your markdown files (please refer to the markdownlint site for details).</p> <p>And finally, the script <code>scripts/check-markdown.sh</code> contains the following code to execute <code>markdownlint</code>:</p> <pre><code># Get the repository root\nrepoRoot=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pwd )\"\n\n# Execute markdownlint for the entire solution\nmarkdownlint -c \"${repoRoot}\"/.markdownlint.json\n</code></pre> <p>When the Dev Container is loaded, any developer can now run this script in their terminal:</p> <pre><code>/&gt; ./scripts/check-markdown.sh\n</code></pre> <p>This is a small use case, there are unlimited other possibilities to capitalize on work done by developers to save time.</p>"},{"location":"developer-experience/devcontainers-going-further/#other-considerations","title":"Other considerations","text":""},{"location":"developer-experience/devcontainers-going-further/#platform-architecture","title":"Platform architecture","text":"<p>When installing tooling, you also need to ensure that you know what host computers developers are using. All Intel based computers, whether they are running Windows, Linux or MacOs will have the same behavior. However, the latest Mac architecture (Apple M1/Silicon) being ARM64, means that the behavior is not the same when building Dev Containers.</p> <p>For instance, if you want to install Azure-cli in your Dev Container, you won't be able to do it the same way you do it for Intel based machines. On Intel based computers you can install the <code>deb</code> package. However, this package is not available on ARM architecture. The only way to install Azure-cli on Linux ARM is via the Python installer <code>pip</code>.</p> <p>To achieve this you need to check the architecture of the host building the Dev Container, either in the Dockerfile, or by calling an external bash script to install remaining tools not having a universal version.</p> <p>Here is a snippet to call from the Dockerfile:</p> <pre><code># If Intel based, then use the deb file\nif [[ `dpkg --print-architecture` == \"amd64\" ]]; then\n    sudo curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash;\nelse\n# arm based, install pip (and gcc) then azure-cli\n    sudo apt-get -y install gcc\n    python3 -m pip install --upgrade pip\n    python3 -m pip install azure-cli\nfi\n</code></pre>"},{"location":"developer-experience/devcontainers-going-further/#reuse-of-credentials-for-github","title":"Reuse of credentials for GitHub","text":"<p>If you develop inside a Dev Container, you will also want to share your GitHub credentials between your host and the Dev Container. Doing so, you would avoid copying your ssh keys back and forth (if you are using ssh to access your repositories).</p> <p>One approach would be to mount your local <code>~/.ssh</code> folder into your Dev Container. You can either use the <code>mounts</code> option of the <code>devcontainer.json</code>, or use Docker Compose</p> <ul> <li>Using <code>mounts</code>:</li> </ul> <pre><code>{\n    ...\n    \"mounts\": [\"source=${localEnv:HOME}/.ssh,target=/home/vscode/.ssh,type=bind\"],\n    ...\n}\n</code></pre> <p>As you can see, <code>${localEnv:HOME}</code> returns the host <code>home</code> folder, and it maps it to the container <code>home</code> folder.</p> <ul> <li>Using Docker Compose:</li> </ul> <pre><code>version: '3'\nservices:\n  my-worspace:\n    env_file: ../configs/.env\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - \"~/.ssh:/home/alex/.ssh\"\n    command: sleep infinity\n</code></pre> <p>Please note that using Docker Compose requires to edit the <code>devcontainer.json</code> file as we have seen above.</p> <p>You can now access GitHub using the same credentials as your host machine, without worrying of persistence.</p>"},{"location":"developer-experience/devcontainers-going-further/#allow-some-customization","title":"Allow some customization","text":"<p>As a final note, it is also interesting to leave developers some flexibility in their environment for customization.</p> <p>For instance, one might want to add aliases to their environment. However, changing the <code>~/.bashrc</code> file in the Dev Container is not a good approach as the container might be destroyed. There are numerous ways to set persistence, here is one approach.</p> <p>Consider the following solution structure:</p> <pre><code>My Application  # main repo directory\n\u2514\u2500\u2500\u2500.devcontainer\n|       \u251c\u2500\u2500\u2500Dockerfile\n|       \u251c\u2500\u2500\u2500docker-compose.yml\n|       \u251c\u2500\u2500\u2500devcontainer.json\n\u2514\u2500\u2500\u2500me\n|       \u251c\u2500\u2500\u2500bashrc_extension\n</code></pre> <p>The folder <code>me</code> is untracked in the repository, leaving developers the flexibility to add personal resources. One of these resources can be a <code>.bashrc</code> extension containing customization. For instance:</p> <pre><code># Sample alias\nalias gaa=\"git add --all\"\n</code></pre> <p>We can now adapt our <code>Dockerfile</code> to load these changes when the Docker image is built (and of course, do nothing if there is no file):</p> <pre><code>...\nRUN echo \"[ -f PATH_TO_WORKSPACE/me/bashrc_extension ] &amp;&amp; . PATH_TO_WORKSPACE/me/bashrc_extension\" &gt;&gt; ~/.bashrc;\n...\n</code></pre>"},{"location":"developer-experience/execute-local-pipeline-with-docker/","title":"Executing Pipelines Locally","text":""},{"location":"developer-experience/execute-local-pipeline-with-docker/#abstract","title":"Abstract","text":"<p>Having the ability to execute pipeline activities locally has been identified as an opportunity to promote positive developer experience. In this document we will explore a solution which will allow us to have the local CI experience to be as similar as possible to the remote process in the CI server.</p> <p>Using the suggested method will allow us to:</p> <ul> <li>Build</li> <li>Lint</li> <li>Unit test</li> <li>E2E test</li> <li>Run Solution</li> <li>Be OS and environment agnostic.</li> </ul>"},{"location":"developer-experience/execute-local-pipeline-with-docker/#enter-docker-compose","title":"Enter Docker Compose","text":"<p>Docker Compose allows you to build push or run multi-container Docker applications.</p>"},{"location":"developer-experience/execute-local-pipeline-with-docker/#method-of-work","title":"Method of Work","text":"<ol> <li>Dockerize your application(s), including a build step if possible.</li> <li>Add a step in your docker file to execute unit tests.</li> <li>Add a step in the docker file for linting.</li> <li>Create a new dockerfile, possibly in a different folder, which executes end-to-end tests against the cluster. Make sure the default endpoints are configurable (This will become handy in your remote CI server, where you will be able to test against a live environment, if you choose to).</li> <li>Create a docker-compose file which allows you to choose which of the services to run. The default will run all applications and tests, and an optional parameter can run specific services, for example only the application without the tests.</li> </ol>"},{"location":"developer-experience/execute-local-pipeline-with-docker/#prerequisites","title":"Prerequisites","text":"<ol> <li>Docker</li> <li>Optional: if you clone the sample app, you need to have dotnet core installed.</li> </ol>"},{"location":"developer-experience/execute-local-pipeline-with-docker/#step-by-step-with-examples","title":"Step by Step with Examples","text":"<p>For this tutorial we are going to use a sample dotnet core api application. Here is the docker file for the sample app:</p> <pre><code># https://hub.docker.com/_/microsoft-dotnet\nFROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\nWORKDIR /app\n\n# copy csproj and restore as distinct layers\nCOPY ./ ./\nRUN dotnet restore\n\nRUN dotnet test\n\n# copy everything else and build app\nCOPY SampleApp/. ./\nRUN dotnet publish -c release -o out --no-restore\n\n# final stage/image\nFROM mcr.microsoft.com/dotnet/aspnet:5.0\nWORKDIR /app\nCOPY --from=build /app/out .\nENTRYPOINT [\"dotnet\", \"SampleNetApi.dll\"]\n</code></pre> <p>This script restores all dependencies, builds and runs tests. The dotnet app includes <code>stylecop</code> which fails the build in case of linting issues.</p> <p>Next we will also create a dockerfile to perform an end-to-end test. Usually this will look like a set of scripts, or a dedicated app which performs actual HTTP calls to a running application. For the sake of simplicity the dockerfile itself will run a simple curl command:</p> <pre><code>FROM alpine:3.7\nRUN apk --no-cache add curl\nENTRYPOINT [\"curl\",\"0.0.0.0:8080/weatherforecast\"]\n</code></pre> <p>Now we are ready to combine both of the dockerfiles in a docker-compose script:</p> <pre><code>version: '3'\nservices:\n  app:\n    image: app:0.01\n    build:\n      context: .\n    ports:\n      - \"8080:80\"\n  e2e:\n    image: e2e:0.01\n    build:\n      context: ./E2E\n</code></pre> <p>The docker-compose script will launch the 2 dockerfiles, and it will build them if they were not built before. The following command will run docker compose:</p> <pre><code>docker-compose up --build -d\n</code></pre> <p>Once the images are up, you can make calls to the service. The e2e image will perform the set of e2e tests. If you want to skip the tests, you can simply tell compose to run a specific service by appending the name of the service, as follows:</p> <pre><code>docker-compose up --build -d app\n</code></pre> <p>Now you have a local script which builds and tests you application. The next step would be make your CI run the docker-compose script.</p> <p>Here is an example of a yaml file used by Azure DevOps pipelines:</p> <pre><code>trigger:\n- master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n\nsteps:\n- task: DockerCompose@0\n  displayName: Build, Test, E2E\n  inputs:\n    action: Run services\n    dockerComposeFile: docker-compose.yml\n- script: dotnet restore SampleApp\n- script: dotnet build --configuration $(buildConfiguration) SampleApp\n  displayName: 'dotnet build $(buildConfiguration)'\n</code></pre> <p>In this script the first step is docker-compose, which uses the same file we created the previous steps. The next steps, do the same using scripts, and are here for comparison. By the end of this step, your CI effectively runs the same build and test commands you run locally.</p>"},{"location":"developer-experience/fake-services-inner-loop/","title":"Fake Services Inner Dev Loop","text":""},{"location":"developer-experience/fake-services-inner-loop/#introduction","title":"Introduction","text":"<p>Consumers of remote services often find that their development cycle is not in sync with development of remote services, leaving developers of these consumers waiting for the remote services to \"catch up\". One approach to mitigate this issue and improve the inner dev loop is by decoupling and using Mock Services. Various Mock Service options are detailed here.</p> <p>This document will focus on providing an example using the Fake Services approach.</p>"},{"location":"developer-experience/fake-services-inner-loop/#api","title":"API","text":"<p>For our example API, we will work against a <code>/User</code> endpoint and the properties for <code>User</code> will be:</p> <ol> <li>id - int</li> <li>username - string</li> <li>firstName - string</li> <li>lastName - string</li> <li>email - string</li> <li>password - string</li> <li>phone - string</li> <li>userStatus - int</li> </ol>"},{"location":"developer-experience/fake-services-inner-loop/#tooling","title":"Tooling","text":"<p>For the Fake Service approach, we will be using Json-Server. Json-Server is a tool that provides the ability to fully fake REST APIs and run the server locally. It is designed to spin up REST APIs with CRUD functionality with minimal setup. Json-Server requires NodeJS and is installed via NPM.</p> <pre><code>npm install -g json-server\n</code></pre>"},{"location":"developer-experience/fake-services-inner-loop/#setup","title":"Setup","text":"<p>In order to run Json-Server, it simply requires a source for data and will infer routes, etc. based on the data file. Note that additional customization can be performed for more advanced scenarios (e.g. custom routes). Details can be found here.</p> <p>For our example, we will use the following data file, <code>db.json</code>:</p> <pre><code>{\n  \"user\": [\n    {\n      \"id\": 0,\n      \"username\": \"user1\",\n      \"firstName\": \"Kobe\",\n      \"lastName\": \"Bryant\",\n      \"email\": \"kobe@example.com\",\n      \"password\": \"superSecure1\",\n      \"phone\": \"(123) 123-1234\",\n      \"userStatus\": 0\n    },\n    {\n      \"id\": 1,\n      \"username\": \"user2\",\n      \"firstName\": \"Shaquille\",\n      \"lastName\": \"O'Neal\",\n      \"email\": \"shaq@example.com\",\n      \"password\": \"superSecure2\",\n      \"phone\": \"(123) 123-1235\",\n      \"userStatus\": 0\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-experience/fake-services-inner-loop/#run","title":"Run","text":"<p>Running Json-Server can be performed by simply running:</p> <pre><code>json-server --watch src/db.json\n</code></pre> <p>Once running, the User endpoint can be hit on the default localhost port: <code>http:/localhost:3000/user</code></p> <p>Note that Json-Server can be configured to use other ports using the following syntax:</p> <pre><code>json-server --watch db.json --port 3004\n</code></pre>"},{"location":"developer-experience/fake-services-inner-loop/#endpoint","title":"Endpoint","text":"<p>The endpoint can be tested by running curl against it and we can narrow down which user object to get back with the following command:</p> <pre><code>curl http://localhost:3000/user/1\n</code></pre> <p>which, as expected, returns:</p> <pre><code>{\n  \"id\": 1,\n  \"username\": \"user2\",\n  \"firstName\": \"Shaquille\",\n  \"lastName\": \"O'Neal\",\n  \"email\": \"shaq@example.com\",\n  \"password\": \"superSecure2\",\n  \"phone\": \"(123) 123-1235\",\n  \"userStatus\": 0\n}\n</code></pre>"},{"location":"developer-experience/onboarding-guide-template/","title":"Onboarding Guide Template","text":"<p>When developing an onboarding document for a team, it should contain details of engagement scope, team processes, codebase, coding standards, team agreements, software requirements and setup details. The onboarding guide can be used as an index to project specific content if it already exists elsewhere. Allowing this guide to be utilized as a foundation with the links will help keep the guide concise and effective.</p>"},{"location":"developer-experience/onboarding-guide-template/#overview-and-goals","title":"Overview and Goals","text":"<ul> <li>List a few sentences explaining the high-level summary and the scope of the engagement.</li> <li>Consider adding any additional background and context as needed.</li> <li>Include the value proposition of the project, goals, what success looks like, and what the team is trying to achieve and why.</li> </ul>"},{"location":"developer-experience/onboarding-guide-template/#contacts","title":"Contacts","text":"<ul> <li>List a few of the main contacts for the team and project overall such as the Dev Lead and Product Owner.</li> <li>Consider including the roles of these main contacts so that the team knows who to reach out to depending on the situation.</li> </ul>"},{"location":"developer-experience/onboarding-guide-template/#team-agreement-and-code-of-conduct","title":"Team Agreement and Code of Conduct","text":"<ul> <li>Include the team's code of conduct or agreement that defines a set of expectation from each team member and how the team has agreed to operate.</li> <li>Working Agreement Template - working agreement</li> </ul>"},{"location":"developer-experience/onboarding-guide-template/#dev-environment-setup","title":"Dev Environment Setup","text":"<ul> <li>Consider adding steps to run the project end-to-end. This could be in form of a separate wiki page or document that can be linked here.</li> <li>Include any software that needs to be downloaded and specify if a specific version of the software is needed.</li> </ul>"},{"location":"developer-experience/onboarding-guide-template/#project-building-blocks","title":"Project Building Blocks","text":"<ul> <li>This can include a more in depth description with different areas of the project to help increase the project understanding.</li> <li>It can include different sections on the various components of the project including deployment, e2e testing, repositories.</li> </ul>"},{"location":"developer-experience/onboarding-guide-template/#resources","title":"Resources","text":"<ul> <li>This can include any additional links to documents related to the project</li> <li>It may include links to backlog items, work items, wiki pages or project history.</li> </ul>"},{"location":"developer-experience/toggle-vnet-dev-environment/","title":"Toggle VNet On and Off for Production and Development Environment","text":""},{"location":"developer-experience/toggle-vnet-dev-environment/#problem-statement","title":"Problem Statement","text":"<p>When deploying resources on Azure in a secure environment, resources are usually created behind a Private Network (VNet), without public access and with private endpoints to consume resources. This is the recommended approach for pre-production or production environments.</p> <p>Accessing protected resources from a local machine implies one of the following options:</p> <ul> <li>Use a VPN</li> <li>Use a jump box<ul> <li>With SSH activated (less secure)</li> <li>With Bastion (recommended approach)</li> </ul> </li> </ul> <p>However, a developer may want to deploy a test environment (in a non-production subscription) for their tests during development phase, without the complexity of networking.</p> <p>In addition, infrastructure code should not be duplicated: it has to be the same whether resources are deployed in a production like environment or in development environment.</p>"},{"location":"developer-experience/toggle-vnet-dev-environment/#option","title":"Option","text":"<p>The idea is to offer, via a single boolean variable, the option to deploy resources behind a VNet or not using one infrastructure code base. Securing resources behind a VNet usually implies that public accesses are disabled and private endpoints are created. This is something to have in mind because, as a developer, public access must be activated in order to connect to this environment.</p> <p>The deployment pipeline will set these resources behind a VNet and will secure them by removing public accesses. Developers will be able to run the same deployment script, specifying that resources will not be behind a VNet nor have public accesses disabled.</p> <p>Let's consider the following use case: we want to deploy a VNet, a subnet, a storage account with no public access and a private endpoint for the table.</p> <p>The magic variable that will help toggling security will be called <code>behind_vnet</code>, of type boolean.</p> <p>Let's implement this use case using <code>Terraform</code>.</p> <p>The code below does not contain everything, the purpose is to show the pattern and not how to deploy these resources. For more information on Terraform, please refer to the official documentation.</p> <p>There is no <code>if</code> per se in Terraform to define whether a specific resource should be deployed or not based on a variable value. However, we can use the <code>count</code> meta-argument. The strength of this meta-argument is if its value is <code>0</code>, the block is skipped.</p> <p>Here is below the code snippets for this deployment:</p> <ul> <li>variables.tf<pre><code>variable \"behind_vnet\" {\n    type    = bool\n}\n</code></pre> </li> </ul> <ul> <li>main.tf<pre><code>resource \"azurerm_virtual_network\" \"vnet\" {\n    count = var.behind_vnet ? 1 : 0\n\n    name                = \"MyVnet\"\n    address_space       = [x.x.x.x/16]\n    resource_group_name = \"MyResourceGroup\"\n    location            = \"WestEurope\"\n\n    ...\n\n    subnet {\n        name              = \"subnet_1\"\n        address_prefix    = \"x.x.x.x/24\"\n    }\n}\n\nresource \"azurerm_storage_account\" \"storage_account\" {\n    name                = \"storage\"\n    resource_group_name = \"MyResourceGroup\"\n    location            = \"WestEurope\"\n    tags                = var.tags\n\n    ...\n\n    public_network_access_enabled = var.behind_vnet ? false : true\n}\n\nresource \"azurerm_private_endpoint\" \"storage_account_table_private_endpoint\" {\n    count = var.behind_vnet ? 1 : 0\n\n    name                = \"pe-storage\"\n    subnet_id           = azurerm_virtual_network.vnet[0].subnet[0].id\n\n    ...\n\n    private_service_connection {\n        name                           = \"psc-storage\"\n        private_connection_resource_id = azurerm_storage_account.storage_account.id\n        subresource_names              = [ \"table\" ]\n        ...\n    }\n\n    private_dns_zone_group {\n        name = \"privateDnsZoneGroup\"\n        ...\n    }\n}\n</code></pre> </li> </ul> <p>If we run</p> <pre><code>terraform apply -var behind_vnet=true\n</code></pre> <p>then all the resources above will be deployed, and it is what we want on a pre-production or production environment. The instruction <code>count = var.behind_vnet ? 1 : 0</code> will set <code>count</code> with the value <code>1</code>, therefore blocks will be executed.</p> <p>However, if we run</p> <pre><code>terraform apply -var behind_vnet=false\n</code></pre> <p>the <code>azurerm_virtual_network</code> and <code>azurerm_private_endpoint</code> resources will be skipped (because <code>count</code> will be <code>0</code>). The resource <code>azurerm_storage_account</code> will be created, with minor differences in some properties: for instance, here, <code>public_network_access_enabled</code> will be set to <code>true</code> (and this is the goal for a developer to be able to access resources created).</p> <p>The same pattern can be applied over and over for the entire infrastructure code.</p>"},{"location":"developer-experience/toggle-vnet-dev-environment/#conclusion","title":"Conclusion","text":"<p>With this approach, the same infrastructure code base can be used to target a production like environment with secured resources behind a VNet with no public accesses and also a more permissive development environment.</p> <p>However, there are a couple of trade-offs with this approach:</p> <ul> <li>if a resource has the <code>count</code> argument, it needs to be treated as a list, and not a single item. In the example above, if there is a need to reference the resource <code>azurerm_virtual_network</code> later in the code,<pre><code>azurerm_virtual_network.vnet.id\n</code></pre> <p>will not work. The following must be used</p> <pre><code>azurerm_virtual_network.vnet[0].id # First (and only) item of the collection\n</code></pre> </li> </ul> <ul> <li>The meta-argument <code>count</code> cannot be used with <code>for_each</code> for a whole block. That means that the use of loops to deploy multiple endpoints for instance will not work. Each private endpoints will need to be deployed individually.</li> </ul>"},{"location":"documentation/","title":"Documentation","text":"<p>Every software development project requires documentation. Agile Software Development values working software over comprehensive documentation. Still, projects should include the key information needed to understand the development and the use of the generated software.</p> <p>Documentation shouldn't be an afterthought. Different written documents and materials should be created during the whole life cycle of the project, as per the project needs.</p>"},{"location":"documentation/#goals","title":"Goals","text":"<ul> <li>Facilitate onboarding of new team members.</li> <li>Improve communication and collaboration between teams (especially when distributed across time zones).</li> <li>Improve the transition of the project to another team.</li> </ul>"},{"location":"documentation/#challenges","title":"Challenges","text":"<p>When working in an engineering project, we typically encounter one or more of these challenges related to documentation (including some examples):</p> <ul> <li>Non-existent.<ul> <li>No onboarding documentation, so it takes a long time to set up the environment when you join the project.</li> <li>No document in the wiki explaining existing repositories, so you cannot tell which of the 10 available repositories you should clone.</li> <li>No main README, so you don't know where to start when you clone a repository.</li> <li>No \"how to contribute\" section, so you don't know which is the branch policy, where to add new documents, etc.</li> <li>No code guidelines, so everyone follows different naming conventions, etc.</li> </ul> </li> <li>Hidden.<ul> <li>Impossible to find useful documentation as it\u2019s scattered all over the place. E.g., no idea how to compile, run and test the code as the README is hidden in a folder within a folder within a folder.</li> <li>Useful processes (e.g., grooming process) explained outside the backlog management tool and not linked anywhere.</li> <li>Decisions taken in different channels other than the backlog management tool and not recorded anywhere else.</li> </ul> </li> <li>Incomplete.<ul> <li>No clear branch policy, so everyone names their branches differently.</li> <li>Missing settings in the \"how to run this\" document that are required to run the application.</li> </ul> </li> <li>Inaccurate.<ul> <li>Documents not updated along with the code, so they don't mention the right folders, settings, etc.</li> </ul> </li> <li>Obsolete.<ul> <li>Design documents that don't apply anymore, sitting next to valid documents. Which one shows the latest decisions?</li> </ul> </li> <li>Out of order (subject / date).<ul> <li>Documents not organized per subject/workstream so not easy to find relevant information when you change to a new workstream.</li> <li>Design decision logs out of order and without a date that helps to determine which is the final decision on something.</li> </ul> </li> <li>Duplicate.<ul> <li>No settings file available in a centralized place as a single source of truth, so developers must keep sharing their own versions, and we end up with many files that might or might not work.</li> </ul> </li> <li>Afterthought.<ul> <li>Key documents created several weeks into the project: onboarding, how to run the app, etc.</li> <li>Documents created last minute just before the end of a project, forgetting that they also help the team while working on the project.</li> </ul> </li> </ul>"},{"location":"documentation/#what-documentation-should-exist","title":"What Documentation Should Exist","text":"<ul> <li>Project and Repositories</li> <li>Commit Messages</li> <li>Pull Requests</li> <li>Code</li> <li>Work Items</li> <li>REST APIs</li> <li>Engineering Feedback</li> </ul>"},{"location":"documentation/#best-practices","title":"Best Practices","text":"<ul> <li>Establishing and managing documentation</li> <li>Creating good documentation</li> <li>Replacing documentation with automation</li> </ul>"},{"location":"documentation/#tools","title":"Tools","text":"<ul> <li>Wikis</li> <li>Languages<ul> <li>markdown</li> <li>mermaid</li> </ul> </li> <li>How to automate simple checks</li> <li>Integration with Teams/Slack</li> </ul>"},{"location":"documentation/#recipes","title":"Recipes","text":"<ul> <li>How to sync a wiki between repositories</li> <li>Using DocFx and Companion Tools to generate a Documentation website</li> <li>Deploy the DocFx Documentation website to an Azure Website automatically</li> <li>How to create a static website for your documentation based on MkDocs and Material for MkDocs</li> </ul>"},{"location":"documentation/#resources","title":"Resources","text":"<ul> <li>Software Documentation Types and Best Practices</li> </ul>"},{"location":"documentation/best-practices/automation/","title":"Replacing Documentation with Automation","text":"<p>You can document how to set up your dev machine with the right version of the framework required to run the code, which extensions are useful to develop the application with your editor, or how to configure your editor to launch and debug the application. If it is possible, a better solution is to provide the means to automate tool installs, application startup, etc., instead.</p> <p>Some examples are provided below:</p>"},{"location":"documentation/best-practices/automation/#dev-containers-in-visual-studio-code","title":"Dev Containers in Visual Studio Code","text":"<p>The Visual Studio Code Remote - Containers extension lets you use a Docker container as a full-featured development environment. It allows you to open any folder inside (or mounted into) a container and take advantage of Visual Studio Code's full feature set.</p> <p>Additional information: Developing inside a Container.</p>"},{"location":"documentation/best-practices/automation/#launch-configurations-and-tasks-in-visual-studio-code","title":"Launch Configurations and Tasks in Visual Studio Code","text":"<p>Launch configurations allows you to configure and save debugging setup details.</p> <p>Tasks can be configured to run scripts and start processes so that many of these existing tools can be used from within VS Code without having to enter a command line or write new code.</p>"},{"location":"documentation/best-practices/establish-and-manage/","title":"Establishing and Managing Documentation","text":"<p>Documentation should be source-controlled. Pull Requests can be used to tell others about the changes, so they can be reviewed and discussed. E.g., Async Design Reviews.</p> <p>Tools:</p> <ul> <li>Wikis.</li> </ul>"},{"location":"documentation/best-practices/good-documentation/","title":"Creating Good Documentation","text":"<p>Review the Documentation Review Checklist for advice on how to write good documentation.</p> <p>Good documentation should follow good writing guidelines: Writing Style Guidelines.</p>"},{"location":"documentation/guidance/code/","title":"Code","text":"<p>You might have heard more than once that you should write self-documenting code. This doesn't mean that you should never comment your code.</p> <p>There are two types of code comments, implementation comments and documentation comments.</p>"},{"location":"documentation/guidance/code/#implementation-comments","title":"Implementation Comments","text":"<p>They are used for internal documentation, and are intended for anyone who may need to maintain the code in the future, including your future self.</p> <p>There can be single line and multi-line comments (e.g., C# Comments). Comments are human-readable and not executed, thus ignored by the compiler. So you could potentially add as many as you want.</p> <p>Now, the use of these comments is often considered a code smell. If you need to clarify your code, that may mean the code is too complex. So you should work towards the removal of the clarification by making the code simpler, easier to read, and understand. Still, these comments can be useful to give overviews of the code, or provide additional context information that is not available in the code itself.</p> <p>Examples of useful comments:</p> <ul> <li>Single line comment in C# that explains why that piece of code is there (from a private method in System.Text.Json.JsonSerializer):</li> </ul> <pre><code>// For performance, avoid obtaining actual byte count unless memory usage is higher than the threshold.\nSpan&lt;byte&gt; utf8 = json.Length &lt;= (ArrayPoolMaxSizeBeforeUsingNormalAlloc / JsonConstants.MaxExpansionFactorWhileTranscoding) ? ...\n</code></pre> <ul> <li>Multi-line comment in C# that provides additional context (from a private method in System.Text.Json.Utf8JsonReader):</li> </ul> <pre><code>// Transcoding from UTF-16 to UTF-8 will change the length by somewhere between 1x and 3x.\n// Un-escaping the token value will at most shrink its length by 6x.\n// There is no point incurring the transcoding/un-escaping/comparing cost if:\n// - The token value is smaller than charTextLength\n// - The token value needs to be transcoded AND unescaped and it is more than 6x larger than charTextLength\n//      - For an ASCII UTF-16 characters, transcoding = 1x, escaping = 6x =&gt; 6x factor\n//      - For non-ASCII UTF-16 characters within the BMP, transcoding = 2-3x, but they are represented as a single escaped hex value, \\uXXXX =&gt; 6x factor\n//      - For non-ASCII UTF-16 characters outside of the BMP, transcoding = 4x, but the surrogate pair (2 characters) are represented by 16 bytes \\uXXXX\\uXXXX =&gt; 6x factor\n// - The token value needs to be transcoded, but NOT escaped and it is more than 3x larger than charTextLength\n//      - For an ASCII UTF-16 characters, transcoding = 1x,\n//      - For non-ASCII UTF-16 characters within the BMP, transcoding = 2-3x,\n//      - For non-ASCII UTF-16 characters outside of the BMP, transcoding = 2x, (surrogate pairs - 2 characters transcode to 4 UTF-8 bytes)\n\nif (sourceLength &lt; charTextLength\n    || sourceLength / (_stringHasEscaping ? JsonConstants.MaxExpansionFactorWhileEscaping : JsonConstants.MaxExpansionFactorWhileTranscoding) &gt; charTextLength)\n{\n</code></pre>"},{"location":"documentation/guidance/code/#documentation-comments","title":"Documentation Comments","text":"<p>Doc comments are a special kind of comment, added above the definition of any user-defined type or member, and are intended for anyone who may need to use those types or members in their own code.</p> <p>If, for example, you are building a library or framework, doc comments can be used to generate their documentation. This documentation should serve as API specification, and/or programming guide.</p> <p>Doc comments won't be included by the compiler in the final executable, as with single and multi-line comments.</p> <p>Example of a doc comment in C# (from Deserialize method in System.Text.Json.JsonSerializer):</p> <pre><code>/// &lt;summary&gt;\n/// Parse the text representing a single JSON value into a &lt;typeparamref name=\"TValue\"/&gt;.\n/// &lt;/summary&gt;\n/// &lt;returns&gt;A &lt;typeparamref name=\"TValue\"/&gt; representation of the JSON value.&lt;/returns&gt;\n/// &lt;param name=\"json\"&gt;JSON text to parse.&lt;/param&gt;\n/// &lt;param name=\"options\"&gt;Options to control the behavior during parsing.&lt;/param&gt;\n/// &lt;exception cref=\"System.ArgumentNullException\"&gt;\n/// &lt;paramref name=\"json\"/&gt; is &lt;see langword=\"null\"/&gt;.\n/// &lt;/exception&gt;\n/// &lt;exception cref=\"JsonException\"&gt;\n/// The JSON is invalid.\n///\n/// -or-\n///\n/// &lt;typeparamref name=\"TValue\" /&gt; is not compatible with the JSON.\n///\n/// -or-\n///\n/// There is remaining data in the string beyond a single JSON value.&lt;/exception&gt;\n/// &lt;exception cref=\"NotSupportedException\"&gt;\n/// There is no compatible &lt;see cref=\"System.Text.Json.Serialization.JsonConverter\"/&gt;\n/// for &lt;typeparamref name=\"TValue\"/&gt; or its serializable members.\n/// &lt;/exception&gt;\n/// &lt;remarks&gt;Using a &lt;see cref=\"string\"/&gt; is not as efficient as using the\n/// UTF-8 methods since the implementation natively uses UTF-8.\n/// &lt;/remarks&gt;\n[RequiresUnreferencedCode(SerializationUnreferencedCodeMessage)]\npublic static TValue? Deserialize&lt;TValue&gt;(string json, JsonSerializerOptions? options = null)\n{\n</code></pre> <p>In C#, doc comments can be processed by the compiler to generate XML documentation files. These files can be distributed alongside your libraries so that Visual Studio and other IDEs can use IntelliSense to show quick information about types or members. Additionally, these files can be run through tools like DocFx to generate API reference websites.</p> <p>More information:</p> <ul> <li>Recommended XML tags for C# documentation comments.</li> </ul> <p>In other languages, you may require external tools. For example, Java doc comments can be processed by Javadoc tool to generate HTML documentation files.</p> <p>More information:</p> <ul> <li>How to Write Doc Comments for the Javadoc Tool</li> <li>Javadoc Tool</li> </ul>"},{"location":"documentation/guidance/engineering-feedback/","title":"Engineering Feedback","text":"<p>Good engineering feedback is:</p> <ul> <li>Actionable</li> <li>Specific</li> <li>Detailed<ul> <li>Includes assets (script, data, code, etc.) to reproduce scenario and validate solution</li> <li>Includes details about the customer scenario / what the customer was trying to achieve</li> </ul> </li> </ul> <p>Refer to Microsoft Engineering Feedback for more details, including guidance, FAQ and examples.</p>"},{"location":"documentation/guidance/project-and-repositories/","title":"Projects and Repositories","text":"<p>Every source code repository should include documentation that is specific to it (e.g., in a Wiki within the repository), while the project itself should include general documentation that is common to all its associated repositories (e.g., in a Wiki within the backlog management tool).</p>"},{"location":"documentation/guidance/project-and-repositories/#documentation-specific-to-a-repository","title":"Documentation Specific to a Repository","text":"<ul> <li>Introduction</li> <li>Getting started<ul> <li>Onboarding</li> <li>Setup: programming language, frameworks, platforms, tools, etc.</li> <li>Sandbox environment</li> <li>Working agreement</li> <li>Contributing guide</li> </ul> </li> <li>Structure: folders, projects, etc.</li> <li>How to compile, test, build, deploy the solution/each project<ul> <li>Different OS versions</li> <li>Command line + editors/IDEs</li> </ul> </li> <li>Design Decision Logs<ul> <li>Architecture Decision Record (ADRs)</li> <li>Trade Studies</li> </ul> </li> </ul> <p>Some sections in the documentation of the repository might point to the project\u2019s documentation (e.g., Onboarding, Working Agreement, Contributing Guide).</p>"},{"location":"documentation/guidance/project-and-repositories/#common-documentation-to-all-repositories","title":"Common Documentation to all Repositories","text":"<ul> <li>Introduction<ul> <li>Project</li> <li>Stakeholders</li> <li>Definitions</li> <li>Requirements</li> </ul> </li> <li>Onboarding</li> <li>Repository guide<ul> <li>Production, Spikes</li> </ul> </li> <li>Team agreements<ul> <li>Team Manifesto<ul> <li>Short summary of expectations around the technical way of working and supported mindset in the team.</li> <li>E.g., ownership, respect, collaboration, transparency.</li> </ul> </li> <li>Working Agreement<ul> <li>How we work together as a team and what our expectations and principles are.</li> <li>E.g., communication, work-life balance, scrum rhythm, backlog management, code management.</li> </ul> </li> <li>Definition of Done<ul> <li>List of tasks that must be completed to close a user story, a sprint, or a milestone.</li> </ul> </li> <li>Definition of Ready<ul> <li>How complete a user story should be in order to be selected as candidate for estimation in the sprint planning.</li> </ul> </li> </ul> </li> <li>Contributing Guide<ul> <li>Repo structure</li> <li>Design documents</li> <li>Branching and branch name strategy</li> <li>Merge and commit history strategy</li> <li>Pull Requests</li> <li>Code Review Process</li> <li>Code Review Checklist<ul> <li>Language Specific Checklists</li> </ul> </li> </ul> </li> <li>Project Design<ul> <li>High Level / Game Plan</li> <li>Milestone / Epic Design Review</li> </ul> </li> <li>Design Review Recipes<ul> <li>Milestone / Epic Design Review Template</li> <li>Feature / Story Design Review Template</li> <li>Task Design Review Template</li> <li>Decision Log Template</li> <li>Architecture Decision Record (ADR) Template (Example 1,   Example 2)</li> <li>Trade Study Template</li> </ul> </li> </ul>"},{"location":"documentation/guidance/pull-requests/","title":"Pull Requests","text":"<p>When we create Pull Requests, we must ensure they are properly documented:</p> <ul> <li>Title and Description<ul> <li>Pull Request Description</li> <li>Pull Request Template</li> </ul> </li> <li>Linked worked items</li> <li>Comments<ul> <li>As an author, address all comments</li> <li>As a reviewer, make comments clear</li> </ul> </li> </ul>"},{"location":"documentation/guidance/rest-apis/","title":"REST APIs","text":"<p>When creating REST APIs, you can leverage the OpenAPI-Specification (OAI) (originally known as the Swagger Specification) to describe them:</p> <p>The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic.</p> <p>Use cases for machine-readable API definition documents include, but are not limited to: interactive documentation; code generation for documentation, clients, and servers; and automation of test cases. OpenAPI documents describe an APIs services and are represented in either YAML or JSON formats. These documents may either be produced and served statically or be generated dynamically from an application.</p> <p>There are implementations available for many languages like C#, including low-level tooling, editors, user interfaces, code generators, etc. Here you can find a list of known tooling for the different languages: OpenAPI-Specification/IMPLEMENTATIONS.md.</p>"},{"location":"documentation/guidance/rest-apis/#using-microsoft-typespec","title":"Using Microsoft TypeSpec","text":"<p>While the OpenAPI-Specification (OAI) is a popular method for defining and documenting RESTful APIs, there are other languages available that can simplify and expedite the documentation process. Microsoft TypeSpec is one such language that allows for the description of cloud service APIs and the generation of API description languages, client and service code, documentation, and other assets.</p> <p>Microsoft TypeSpec is a highly extensible language that offers a set of core primitives that can describe API shapes common among REST, OpenAPI, GraphQL, gRPC, and other protocols. This makes it a versatile option for developers who need to work with a range of different API styles and technologies.</p> <p>Microsoft TypeSpec is a widely adopted tool within Azure teams, particularly for generating OpenAPI Specifications in complex and interconnected APIs that span multiple teams. To ensure consistency across different parts of the API, teams commonly leverage shared libraries which contain reusable patterns. This makes easier to follow best practices rather than deviating from them. By promoting highly regular API designs that adhere to best practices by construction, TypeSpec can help improve the quality and consistency of APIs developed within an organization.</p>"},{"location":"documentation/guidance/rest-apis/#resources","title":"Resources","text":"<ul> <li>ASP.NET Core web API documentation with Swagger / OpenAPI.</li> <li>Microsoft TypeSpec.</li> <li>Design Patterns - REST API Guidance</li> </ul>"},{"location":"documentation/guidance/work-items/","title":"Work Items","text":"<p>While many teams can work with a flat list of items, sometimes it helps to group related items into a hierarchical structure. You can use portfolio backlogs to bring more order to your backlog.</p> <p>Agile process backlog work item hierarchy:</p> <p></p> <p>Scrum process backlog work item hierarchy:</p> <p></p> <p>Bugs can be set at the same level as User Stories / Product Backlog Items or Tasks.</p>"},{"location":"documentation/guidance/work-items/#epics-and-features","title":"Epics and Features","text":"<p>User stories / Product Backlog Items roll up into Features, which typically represent a shippable deliverable that addresses a customer need e.g., \"Add shopping cart\". And Features roll up into Epics, which represent a business initiative to be accomplished e.g., \"Increase customer engagement\". Take that into account when naming them.</p> <p>Each Feature or Epic should include as much detail as the team needs to:</p> <ul> <li>Understand the scope.</li> <li>Estimate the work required.</li> <li>Develop tests.</li> <li>Ensure the end product meets acceptance criteria.</li> </ul> <p>Details that should be added:</p> <ul> <li>Value Area: Business (directly deliver customer value) vs. Architectural (technical services to implement business features).</li> <li>Effort / Story Points / Size: Relative estimate of the amount of work required to complete the item.</li> <li>Business Value: Priority of an item compared to other items of the same type.</li> <li>Time Criticality: Higher values indicate an item is more time critical than items with lower values.</li> <li>Target Date by which the feature should be implemented.</li> </ul> <p>You may use work item tags to support queries and filtering.</p>"},{"location":"documentation/guidance/work-items/#user-stories-product-backlog-items","title":"User Stories / Product Backlog Items","text":"<p>Each User Story / Product Backlog Item should be sized so that they can be completed within a sprint.</p> <p>You should add the following details to the items:</p> <ul> <li>Title: Usually expressed as \"As a [persona], I want [to perform an action], so that [I can achieve an end result].\".</li> <li>Description: Provide enough detail to create shared understanding of scope and support estimation efforts. Focus on the user, what they want to accomplish, and why. Don't describe how to develop the product. Provide enough details so the team can write tasks and test cases to implement the item.<ul> <li>Include Design Reviews.</li> </ul> </li> <li>Acceptance Criteria: Define what \"Done\" means.</li> <li>Activity: Deployment, Design, Development, Documentation, Requirements, Testing.</li> <li>Effort / Story Points / Size: Relative estimate of the amount of work required to complete the item.</li> <li>Business Value: Priority of an item compared to other items of the same type.</li> <li>Original Estimate: The amount of estimated work required to complete a task.</li> </ul> <p>Remember to use the Discussion section of the items to keep track of related comments, and mention individuals, groups, work items or pull requests when required.</p>"},{"location":"documentation/guidance/work-items/#tasks","title":"Tasks","text":"<p>Each Task should be sized so that they can be completed within a day.</p> <p>You should at least add the following details to the items:</p> <ul> <li>Title.</li> <li>Description: Provide enough detail to create shared understanding of scope. Any developer should be able to take the item and know what needs to be implemented.<ul> <li>Include Design Reviews.</li> </ul> </li> <li>Reference to the working branch in related code repository.</li> </ul> <p>Remember to use the Discussion section of the tasks to keep track of related comments.</p>"},{"location":"documentation/guidance/work-items/#bugs","title":"Bugs","text":"<p>You should use bugs to capture both the initial issue and ongoing discoveries.</p> <p>You should at least add the following details to the bug items:</p> <ul> <li>Title.</li> <li>Description.</li> <li>Steps to Reproduce.</li> <li>System Info / Found in Build: Software and system configuration that is relevant to the bug and tests to apply.</li> <li>Acceptance Criteria: Criteria to meet so the bug can be closed.</li> <li>Integrated in Build: Name of the build that incorporates the code that fixes the bug.</li> <li>Priority:<ul> <li>1: Product should not ship without the successful resolution of the work item. The bug should be addressed as soon as possible.</li> <li>2: Product should not ship without the successful resolution of the work item, but it does not need to be addressed immediately.</li> <li>3: Resolution of the work item is optional based on resources, time, and risk.</li> </ul> </li> <li>Severity:<ul> <li>1 - Critical: Must fix. No acceptable alternative methods.</li> <li>2 - High: Consider fix. An acceptable alternative method exists.</li> <li>3 - Medium: (Default).</li> <li>4 - Low.</li> </ul> </li> </ul>"},{"location":"documentation/guidance/work-items/#issues-impediments","title":"Issues / Impediments","text":"<p>Don't confuse with bugs. They represent unplanned activities that may block work from getting done. For example: feature ambiguity, personnel or resource issues, problems with environments, or other risks that impact scope, quality, or schedule.</p> <p>In general, you link these items to user stories or other work items.</p>"},{"location":"documentation/guidance/work-items/#actions-from-retrospectives","title":"Actions from Retrospectives","text":"<p>After a retrospective, every action that requires work should be tracked with its own Task or Issue / Impediment. These items might be unparented (without link to parent backlog item or user story).</p>"},{"location":"documentation/guidance/work-items/#related-information","title":"Related information","text":"<ul> <li>Best practices for Agile project management - Azure Boards | Microsoft Docs.</li> <li>Define features and epics, organize backlog items - Azure Boards | Microsoft Docs.</li> <li>Create your product backlog - Azure Boards | Microsoft Docs.</li> <li>Add tasks to support sprint planning - Azure Boards | Microsoft Docs.</li> <li>Define, capture, triage, and manage bugs or code defects - Azure Boards | Microsoft Docs.</li> <li>Add and manage issues or impediments - Azure Boards | Microsoft Docs.</li> </ul>"},{"location":"documentation/recipes/deploy-docfx-azure-website/","title":"Deploy the DocFx Documentation Website to an Azure Website Automatically","text":"<p>In the article Using DocFx and Companion Tools to generate a Documentation website the process is described to generate content of a documentation website using DocFx. This document describes how to setup an Azure Website to host the content and automate the deployment to it using a pipeline in Azure DevOps.</p> <p>The QuickStart sample that is provided for a quick setup of DocFx generation also contains the files explained in this document. Especially the .pipelines and infrastructure folders.</p> <p>The following steps can be followed when using the Quick Start folder. In the infrastructure folder you can find the Terraform files to create the website in an Azure environment. Out of the box, the script will create a website where the documentation content can be deployed to.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#1-install-terraform","title":"1. Install Terraform","text":"<p>You can use tools like Chocolatey to install Terraform:</p> <pre><code>choco install terraform\n</code></pre>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#2-set-the-proper-variables","title":"2. Set the Proper Variables","text":"<p>Note: Make sure you modify the value of the app_name, rg_name and rg_location variables. The app_name value is appended by azurewebsites.net and must be unique. Otherwise the script will fail that it cannot create the website.</p> <p>In the Quick Start, authentication is disabled. If you want that enabled, make sure you have create an Application in the Azure AD and have the client ID. This client id must be set as the value of the client_id variable in variables.tf. In the main.tf make sure you uncomment the authentication settings in the app-service. For more information see Configure Azure AD authentication - Azure App Service.</p> <p>If you want to set a custom domain for your documentation website with an SSL certificate you have to do some extra steps. You have to create a Key Vault and store the certificate there. Next step is to uncomment and set the values in variables.tf. You also have to uncomment the necessary steps in main.tf. All is indicated by comment-boxes. For more information see Add a TLS/SSL certificate in Azure App Service.</p> <p>Some extra information on SSL certificate, custom domain and Azure App Service can be found in the following paragraphs. If you are familiar with that or don't need it, go ahead and continue with Step 3.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#ssl-certificate","title":"SSL Certificate","text":"<p>To secure a website with a custom domain name and a certificate, you can find the steps to take in the article Add a TLS/SSL certificate in Azure App Service. That article also contains a description of ways to obtain a certificate and the requirements for a certificate. Usually you'll get a certificate from the customers IT department. If you want to start with a development certificate to test the process, you can create one yourself. You can do that in PowerShell with the script below. Replace:</p> <ul> <li>[YOUR DOMAIN] with the domain you would like to register, e.g. <code>docs.somewhere.com</code></li> <li>[PASSWORD] with a password of the certificate. It's required for uploading a certificate in the Key Vault to have a password. You'll need this password in that step.</li> <li>[FILENAME] for the output file name of the certificate. You can even insert the path here where it should be store on your machine.</li> </ul> <p>You can store this script in a PowerShell script file (ps1 extension).</p> <pre><code>$cert = New-SelfSignedCertificate -CertStoreLocation cert:\\currentuser\\my -Subject \"cn=[YOUR DOMAIN]\" -DnsName \"[YOUR DOMAIN]\"\n$pwd = ConvertTo-SecureString -String '[PASSWORD]' -Force -AsPlainText\n$path = 'cert:\\currentuser\\my\\' + $cert.thumbprint\nExport-PfxCertificate -cert $path -FilePath [FILENAME].pfx -Password $pwd\n</code></pre> <p>The certificate needs to be stored in the common Key Vault. Go to <code>Settings &gt; Certificates</code> in the left menu of the Key Vault and click <code>Generate/Import</code>. Provide these details:</p> <ul> <li>Method of Certificate Creation: <code>Import</code></li> <li>Certificate name: e.g. <code>ssl-certificate</code></li> <li>Upload Certificate File: select the file on disc for this.</li> <li>Password: this is the [PASSWORD] we reference earlier.</li> </ul>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#custom-domain-registration","title":"Custom Domain Registration","text":"<p>To use a custom domain a few things need to be done. The process in the Azure portal is described in the article Tutorial: Map an existing custom DNS name to Azure App Service. An important part is described under the header Get a domain verification ID. This ID needs to be registered with the DNS description as a TXT record.</p> <p>Important to know is that this <code>Custom Domain Verification ID</code> is the same for all web resources in the same Azure subscription. See this StackOverflow issue. This means that this ID needs to be registered only once for one Azure Subscription. And this enables (re)creation of an App Service with the custom domain though script.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#add-get-permissions-for-microsoft-azure-app-service","title":"Add Get-permissions for Microsoft Azure App Service","text":"<p>The Azure App Service needs to access the Key Vault to get the certificate. This is needed for the first run, but also when the certificate is renewed in the Key Vault. For this purpose the Azure App Service accesses the Key Vault with the App Service resource provided identity. This identity can be found with the service principal name abfa0a7c-a6b6-4736-8310-5855508787cd or Microsoft Azure App Service and is of type Application. This ID is the same for all Azure subscriptions. It needs to have Get-permissions on secrets and certificates. For more information see this article Import a certificate from Key Vault.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#add-the-custom-domain-and-ssl-certificate-to-the-app-service","title":"Add the Custom Domain and SSL Certificate to the App Service","text":"<p>Once we have the SSL certificate and there is a complete DNS registration as described, we can uncomment the code in the Terraform script from the Quick Start folder to attach this to the App Service. In this script you need to reference the certificate in the common Key Vault and use it in the custom hostname binding. The custom hostname is assigned in the script as well. The settings <code>ssl_state</code> needs to be <code>SniEnabled</code> if you're using an SSL certificate. Now the creation of the authenticated website with a custom domain is automated.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#3-deploy-azure-resources-from-your-local-machine","title":"3. Deploy Azure Resources from Your Local Machine","text":"<p>Open up a command prompt. For the commands to be executed, you need to have a connection to your Azure subscription. This can be done using Azure Cli. Type this command:</p> <pre><code>az login\n</code></pre> <p>This will use the web browser to login to your account. You can check the connected subscription with this command:</p> <pre><code>az account show\n</code></pre> <p>If you have to change to another subscription, use this command where you replace [id] with the id of the subscription to select:</p> <pre><code>az account set --subscription [id]\n</code></pre> <p>Once this is done run this command to initialize:</p> <pre><code>terraform init\n</code></pre> <p>Now you can run the command to plan what the script will do. You run this command every time changes are made to the terraform scripts:</p> <pre><code>terraform plan\n</code></pre> <p>Inspect the result shown. If that is what you expect, apply these changes with this command:</p> <pre><code>terraform apply\n</code></pre> <p>When asked for approval, type \"yes\" and ENTER. You can also add the -auto-approve flag to the apply command.</p> <p>The deployment using Terraform is not included in the pipeline from the Quick Start folder as described in the next step, as that asks for more configuration. But of course that can always be added.</p>"},{"location":"documentation/recipes/deploy-docfx-azure-website/#4-deploy-the-website-from-a-pipeline","title":"4. Deploy the Website from a Pipeline","text":"<p>The best way to create the resources and deploy to it, is to do this automatically in a pipeline. For this purpose the .pipelines/documentation.yml pipeline is provided. This pipeline is built for an Azure DevOps environment. Create a pipeline and reference this YAML file.</p> <p>Note: the Quick Start folder contains a web.config that is needed for deployment to IIS or Azure App Service. This enables the use of the json file for search requests. If you don't have this in place, the search of text will never return anything and result in 404's under the hood.</p> <p>You have to create a Service Connection in your DevOps environment to connect to the Azure Subscription you want to deploy to.</p> <p>Note: set the variables AzureConnectionName to the name of the Service Connection and the AzureAppServiceName to the name you determined in the infrastructure/variables.tf.</p> <p>In the Quick Start folder the pipeline uses <code>master</code> as trigger, which means that any push being done to master triggers the pipeline. You will probably change this to another branch.</p>"},{"location":"documentation/recipes/static-website-with-mkdocs/","title":"How to Create a Static Website for Your Documentation Based on mkdocs and mkdocs-material","text":"<p>MkDocs is a tool built to create static websites from raw markdown files. Other alternatives include Sphinx, and Jekyll.</p> <p>We used MkDocs to create ISE Engineering Fundamentals Playbook static website from the contents in the GitHub repository. Then we deployed it to GitHub Pages.</p> <p>We found MkDocs to be a good choice since:</p> <ol> <li>It's easy to set up and looks great even with the vanilla version.</li> <li>It works well with markdown, which is what we already have in the Playbook.</li> <li>It uses a Python stack which is friendly to many contributors of this Playbook.</li> </ol> <p>For comparison, Sphinx mainly generates docs from restructured-text (rst) format, and Jekyll is written in Ruby.</p> <p>To setup an MkDocs website, the main assets needed are:</p> <ol> <li>An <code>mkdocs.yaml</code> file, similar to the one we have in the Playbook. This is the configuration file that defines the appearance of the website, the navigation, the plugins used and more.</li> <li>A folder named <code>docs</code> (the default value for the directory) that contains the documentation source files.</li> <li>A GitHub Action for automatically generating the website (e.g. on every commit to main), similar to this one from the Playbook.</li> <li>A list of plugins used during the build phase of the website. We specified ours here. And these are the plugins we've used:<p>- Material for MkDocs: Material design appearance and user experience.   - pymdown-extensions: Improves the appearance of markdown based content.   - mdx_truly_sane_lists: For defining the indent level for lists without having to refactor the entire documentation we already had in the Playbook.</p> </li> </ol> <p>Setting up locally is very easy. See Getting Started with MkDocs for details.</p> <p>For publishing the website, there's a good integration with GitHub for storing the website as a GitHub Page.</p>"},{"location":"documentation/recipes/static-website-with-mkdocs/#resources","title":"Resources","text":"<ul> <li>MkDocs Plugins</li> <li>The best MkDocs plugins and customizations</li> </ul>"},{"location":"documentation/recipes/sync-wiki-between-repos/","title":"How to Sync a Wiki Between Repositories","text":"<p>This is a quick guide to mirroring a Project Wiki to another repository.</p> <pre><code># Clone the wiki\ngit clone &lt;source wiki repo url&gt;\n\n# Add mirror repository as a remote\ncd &lt;source wiki repo working folder&gt;\ngit remote add mirror &lt;mirror repo that must already exist&gt;\n</code></pre> <p>Now each time you wish to sync run the following to get latest from the source wiki repo:</p> <pre><code># Get everything\ngit pull -v\n</code></pre> <p>Warning: Check that the output of the pull shows \"From source repo URL\". If this shows the mirror repo url then you've forgotten to reset the tracking. Run <code>git branch -u origin/wikiMaster</code> then continue.</p> <p>Then run this to push it to the mirror repo and reset the branch to track the source repo again:</p> <pre><code># Push all branches up to mirror remote\ngit push -u mirror\n\n# Reset local to track source remote\ngit branch -u origin/wikiMaster\n</code></pre> <p>Your output should look like this when run:</p> <pre><code>PS C:\\Git\\MyProject.wiki&gt; git pull -v\nPOST git-upload-pack (909 bytes)\nremote: Azure Repos\nremote: Found 5 objects to send. (0 ms)\nUnpacking objects: 100% (5/5), done.\nFrom https://.....  wikiMaster -&gt; origin/wikiMaster\nUpdating 7412b94..a0f543b\nFast-forward\n .../dffffds.md | 4 ++++\n 1 file changed, 4 insertions(+)\n\n\nPS C:\\Git\\MyProject.wiki&gt; git push -u mirror\nEnumerating objects: 9, done.\nCounting objects: 100% (9/9), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 2.08 KiB | 2.08 MiB/s, done.\nTotal 5 (delta 4), reused 0 (delta 0)\nremote: Analyzing objects... (5/5) (6 ms)\nremote: Storing packfile... done (48 ms)\nremote: Storing index... done (59 ms)\nTo https://......\n   7412b94..a0f543b  wikiMaster -&gt; wikiMaster\nBranch 'wikiMaster' set up to track remote branch 'wikiMaster' from 'mirror'.\n\n\nPS C:\\Git\\MyProject.wiki&gt; git branch -u origin/wikiMaster\nBranch 'wikiMaster' set up to track remote branch 'wikiMaster' from 'origin'.\n</code></pre>"},{"location":"documentation/recipes/using-docfx-and-tools/","title":"Using DocFx and Companion Tools to Generate a Documentation Website","text":"<p>If you want an easy way to have a website with all your documentation coming from Markdown files and comments coming from code, you can use DocFx. The website generated by DocFx also includes fast search capabilities. There are some gaps in the DocFx solution, but we've provided companion tools that help you fill those gaps. Also see the blog post Providing quality documentation in your project with DocFx and Companion Tools for more explanation about the solution.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#prerequisites","title":"Prerequisites","text":"<p>This document is followed best by cloning the sample from https://github.com/mtirionMSFT/DocFxQuickStart first. Copy the contents of the QuickStart folder to the root of your own repository to get started in your own environment.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#quick-start","title":"Quick Start","text":"<p>TLDR;</p> <p>If you want a really quick start using Azure DevOps and Azure App Service without reading the what and how, follow these steps:</p> <ol> <li>Azure DevOps: If you don't have it yet, create a project in Azure DevOps and create a Service Connection to your Azure environment. Clone the repository.</li> <li>QuickStart folder: Copy the contents of the QuickStart folder in there repository that can be found on  https://github.com/mtirionMSFT/DocFxQuickStart to the root of the repository.</li> <li>Azure: Create a resource group in your Azure environment where the documentation website resources should be created.</li> <li>Create Azure resources: Fill in the default values in infrastructure/variables.tf and run the commands from Step 3 - Deploy Azure resources from your local machine to create the Azure Resources.</li> <li>Pipeline: Fill in the variables in .pipelines/documentation.yml, commit the changes and push the contents of the repository to your branch (possibly through a PR).    Now you can create a pipeline in your Azure DevOps project that uses the .pipelines/documentation.yml and run it. </li> </ol>"},{"location":"documentation/recipes/using-docfx-and-tools/#documents-and-projects-folder-structure","title":"Documents and Projects Folder Structure","text":"<p>The easiest is to work with a mono repository where documentation and code live together. If that's not the case in your situation but you still want to combine multiple repositories into one documentation website, you'll have to clone all repositories first to be able to combine the information. In this recipe we'll assume a monorepo is used.</p> <p>In the steps below we'll consider the generation of the documentation website from this content structure:</p> <pre><code>\u251c\u2500\u2500 .pipelines             // Azure DevOps pipeline for automatic generation and deployment\n\u2502\n\u251c\u2500\u2500 docs                     // all documents\n\u2502   \u251c\u2500\u2500 .attachments  // all images and other attachments used by documents\n\u2502\n\u251c\u2500\u2500 infrastructure       // Terraform scripts for creation of the Azure website\n\u2502\n\u251c\u2500\u2500 src                        // all projects\n\u2502   \u251c\u2500\u2500 build              // build settings\n\u2502          \u251c\u2500\u2500 dotnet     // .NET build settings\n\u2502   \u251c\u2500\u2500 Directory.Build.props   // project settings for all .NET projects in sub folders\n\u2502   \u251c\u2500\u2500 [Project folders]\n\u2502\n\u251c\u2500\u2500 x-cross\n\u2502   \u251c\u2500\u2500 toc.yml              // Cross reference definition (optional)\n\u2502\n\u251c\u2500\u2500 .markdownlint.json // Markdownlinter settings\n\u251c\u2500\u2500 docfx.json               // DocFx configuration\n\u251c\u2500\u2500 index.md                 // Website landing page\n\u251c\u2500\u2500 toc.yml                    // Definition of the website header content links\n\u251c\u2500\u2500 web.config              // web.config to enable search in deployed website\n</code></pre> <p>We'll be using the <code>DocLinkChecker</code> tool to validate all links in documentation and for orphaned attachments. That's the reason we have all attachments in the <code>.attachments</code> folder.</p> <p>In the generated website from the QuickStart folder you'll see that the hierarchies of documentation and references is combined in the left table of contents. This is achieved by the definition and use of x-cross\\toc.yml. If you don't want the hierarchies combined, just remove the  folder and file from your environment and (re)generate the website.</p> <p>A <code>.markdownlint.json</code> is included with the contents below. The MD013 setting is set to false to prevent checking for maximum line length. You can modify this file to your likings to include or exclude certain tests.</p> <pre><code>{\n    \"MD013\": false\n}\n</code></pre> <p>The contents of the .pipelines and infrastructure folders are explained in the recipe Deploy the DocFx Documentation website to an Azure Website automatically.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#reference-documentation-from-source-code","title":"Reference Documentation from Source Code","text":"<p>DocFx can generate reference documentation from code, where C# and Typescript are supported best at the moment. In the QuickStart folder we only used C# projects. For DocFx to generate quality reference documentation, quality triple slash-comments are required. See Triple-slash (///) Code Comments Support. To enforce this, it's a good idea to enforce the use of StyleCop. There are a few steps that will give you an easy start with this.</p> <p>First, you can use the Directory.Build.props file in the /src folder in combination with the files in the build/dotnet folder. By having this, you enforce StyleCop in all Visual Studio project files in it's sub folders with a configuration of which rules should be used or ignored. You can tailor this to your needs of course. For more information, see Customize your build and Use rule sets to group code analysis rules.</p> <p>To make sure developers are forced to add the triple-slash comments by throwing compiler errors and to have the proper settings for the generation of documentation XML-files, add the TreatWarningsAsErrors and GenerateDocumentationFile settings to every .csproj file. You can add that in the first PropertyGroup settings like this:</p> <pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n  &lt;PropertyGroup&gt;\n      ...\n    &lt;GenerateDocumentationFile&gt;true&lt;/GenerateDocumentationFile&gt;\n    &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt;\n  &lt;/PropertyGroup&gt;\n\n    ...\n&lt;/Project&gt;\n</code></pre> <p>Now you are all set to generate documentation from your C# code. For more information about languages supported by DocFx and how to configure it, see Introduction to Multiple Languages Support.</p> <p>Note: You can also add a PropertyGroup definition with the two settings in Directory.Build.props to have that settings in all projects. But in that case it will also be inherited in your Test projects.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#1-install-docfx-and-markdownlint-cli","title":"1. Install DocFx and markdownlint-cli","text":"<p>Go to the DocFx website to the Download section and download the latest version of DocFx. Go to the github page of markdownlint-cli to find download and install options.</p> <p>You can also use tools like Chocolatey to install:</p> <pre><code>choco install docfx\nchoco install markdownlint-cli\n</code></pre>"},{"location":"documentation/recipes/using-docfx-and-tools/#2-configure-docfx","title":"2. Configure DocFx","text":"<p>Configuration for DocFx is done in a <code>docfx.json</code> file. Store this file in the root of your repository.</p> <p>Note: You can store the docfx.json somewhere else in the hierarchy, but then you need to provide the path of the file as an argument to the docfx command so it can be located.</p> <p>Below is a good configuration to start with, where documentation is in the /docs folder and the sources are in the /src folder:</p> <pre><code>{\n    \"metadata\": [\n    {\n          \"src\": [\n          {\n              \"files\": [ \"src/**.csproj\" ],\n              \"exclude\": [ \"_site/**\", \"**/bin/**\", \"**/obj/**\", \"**/[Tt]ests/**\" ]\n          }\n          ],\n          \"dest\": \"reference\",\n          \"disableGitFeatures\": false\n       }\n    ],\n    \"build\": {\n        \"content\": [\n            { \"files\": [ \"reference/**\" ] },\n            {\n                \"files\": [ \"**.md\", \"**/toc.yml\" ],\n                \"exclude\": [ \"_site/**\", \"**/bin/**\", \"**/obj/**\", \"**/[Tt]ests/**\" ]\n            }\n        ],\n        \"resource\": [\n            { \"files\": [\"docs/.attachments/**\"] },\n            { \"files\": [\"web.config\"] }\n        ],\n        \"template\": [ \"templates/cse\" ],\n        \"globalMetadata\": {\n            \"_appTitle\": \"CSE Documentation\",\n            \"_enableSearch\": true\n        },\n        \"markdownEngineName\": \"markdig\",\n        \"dest\": \"_site\",\n        \"xrefService\": [\"https://xref.learn.microsoft.com/query?uid={uid}\"]\n    }\n}\n</code></pre>"},{"location":"documentation/recipes/using-docfx-and-tools/#3-setup-some-basic-documents","title":"3. Setup Some Basic Documents","text":"<p>We suggest starting with a basic documentation structure in the /docs folder. In the provided QuickStart folder we have a basic setup:</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 .attachments                     // All images and other attachments used by documents\n\u2502\n\u2502   \u251c\u2500\u2500 architecture-decisions\n\u2502           \u2514\u2500\u2500 .order\n\u2502           \u2514\u2500\u2500 decision-log.md       // Sample index into all ADRs\n\u2502           \u2514\u2500\u2500 README.md          // Landing page architecture decisions\n\u2502\n\u2502   \u251c\u2500\u2500 getting-started\n\u2502           \u2514\u2500\u2500 .order\n\u2502           \u2514\u2500\u2500 README.md          // This recipe document. Replace the content with something meaningful to the project\n\u2502\n\u2502   \u251c\u2500\u2500 guidelines\n\u2502           \u2514\u2500\u2500 .order\n\u2502           \u2514\u2500\u2500 docs-guidelines.md  // General documentation guidelines\n\u2502           \u2514\u2500\u2500 README.md          // Landing page guidelines\n\u2502\n\u2502   \u251c\u2500\u2500 templates                          // all templates like ADR template and such\n\u2502           \u2514\u2500\u2500 .order\n\u2502           \u2514\u2500\u2500 README.md          // Landing page templates\n\u2502\n\u2502   \u251c\u2500\u2500 working-agreements\n\u2502           \u2514\u2500\u2500 .order\n\u2502           \u2514\u2500\u2500 README.md          // Landing page working agreements\n\u2502\n\u2502   \u251c\u2500\u2500 .order                                // Providing a fixed order of files and directories\n\u2502   \u251c\u2500\u2500 index.md                          // Landing page documentation\n</code></pre> <p>You can use templates like working agreements and such from the ISE Playbook.</p> <p>To have a proper landing page of your documentation website, you can use a markdown file called INDEX.MD in the root of your repository. Contents can be something like this:</p> <pre><code># ISE Documentation\n\nThis is the landing page of the ISE Documentation website. This is the page to introduce everything on the website.\n\nYou can add specific links that are important to provide direct access.\n\n&gt; Try not to duplicate the links on the top of the page, unless it really makes sense.\n\nTo get started with the setup of this website, read the getting started document with the title [Using DocFx and Companion Tools](using-docfx-and-tools.md).\n</code></pre>"},{"location":"documentation/recipes/using-docfx-and-tools/#4-compile-the-companion-tools-and-run-them","title":"4. Compile the Companion Tools and Run Them","text":"<p>Note: To explain each step, we'll be going through the various steps in the next few paragraphs. In the provided sample, a batch-file called GenerateDocWebsite.cmd is included. This script will take all the necessary steps to compile the tools, execute the checks, generate the table of contents and execute docfx to generate the website.</p> <p>To check for proper markdown formatting the markdownlint-cli tool is used. The command takes it's configuration from the <code>.markdownlint.json</code> file in the root of the project. To check all markdown files, simply execute this command:</p> <pre><code>markdownlint **/*.md\n</code></pre> <p>In the QuickStart folder you should have copied in the two companion tools TocDocFxCreation and DocLinkChecker as described in the introduction of this article.</p> <p>You can compile the tools from Visual Studio, but you can also run <code>dotnet build</code> in both tool folders.</p> <p>The DocLinkChecker companion tool is used to validate what's in the docs folder. It validates links between documents and attachments in the docs folder and checks if there aren't orphaned attachments. An example of executing this tool, where the check of attachments is included:</p> <pre><code>DocLinkChecker.exe -d ./docs -a\n</code></pre> <p>The TocDocFxCreation tool is needed to generate a table of contents for your documentation, so users can navigate between folders and documents. If you have compiled the tool, use this command to generate a table of content file <code>toc.yml</code>. To generate a table of contents with the use of the .order files for determining the sequence of articles and to automatically generate index.md documents if no default document is available in a folder, this command can be used:</p> <pre><code>TocDocFxCreation.exe -d ./docs -sri\n</code></pre>"},{"location":"documentation/recipes/using-docfx-and-tools/#5-run-docfx-to-generate-the-website","title":"5. Run DocFx to Generate the Website","text":"<p>Run the <code>docfx</code> command to generate the website, by default in the _site folder.</p> <p>TIP: If you want to check the website in your local environment, provide the --serve option to either the docfx command or the GenerateDocWebsite script. A small webserver is launched that hosts your website, which is accessible on localhost.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#style-of-the-website","title":"Style of the Website","text":"<p>If you started with the QuickStart folder, the website is generated using a custom theme using material design and the Microsoft logo. You can change this to your likings. For more information see How-to: Create A Custom Template | DocFX website (dotnet.github.io).</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#deploy-to-an-azure-website","title":"Deploy to an Azure Website","text":"<p>After you completed the steps, you should have a default website generated in the _site folder. But of course, you want this to be accessible for everyone. So, the next step is to create for instance an Azure Website and have a process to automatically generate and deploy the contents to that website. That process is described in the recipe Deploy the DocFx Documentation website to an Azure Website automatically.</p>"},{"location":"documentation/recipes/using-docfx-and-tools/#resources","title":"Resources","text":"<ul> <li>DocFX - static documentation generator</li> <li>Deploy the DocFx Documentation website to an Azure Website automatically</li> <li>Providing quality documentation in your project with DocFx and Companion Tools</li> <li>Monorepo For Beginners</li> </ul>"},{"location":"documentation/tools/automation/","title":"How to Automate Simple Checks","text":"<p>If you want to automate some checks on your Markdown documents, there are several tools that you could leverage. For example:</p> <ul> <li>Code Analysis / Linting<ul> <li>markdownlint to verify Markdown syntax and enforce rules that make the text more readable.</li> <li>lychee to extract links from markdown texts and check whether each link is alive (200 OK) or dead.</li> <li>write-good to check English prose.</li> <li>Docker image for node-markdown-spellcheck, a lightweight docker image to spellcheck markdown files.</li> <li>static code analysis</li> </ul> </li> </ul> <ul> <li>VS Code Extensions<ul> <li>Write Good Linter to get grammar and language advice while editing a document.</li> <li>markdownlint to examine Markdown documents and get warnings for rule violations while editing.</li> </ul> </li> </ul> <ul> <li>Automation<ul> <li>pre-commit to use Git hook scripts to identify simple issues before submitting our code or documentation for review.</li> <li>Check Build validation to automate linting for PRs.</li> <li>Check CI Pipeline for better documentation for a sample pipeline with <code>markdownlint</code>, <code>lychee</code> and <code>write-good</code>.</li> </ul> </li> </ul> <p>Sample output:</p> <p></p>"},{"location":"documentation/tools/automation/#on-linting-rules","title":"On Linting Rules","text":"<p>The team needs to be clear what linting rules are required and shouldn't be overridden with tooling or comments. The team should have consensus on when to override tooling rules.</p>"},{"location":"documentation/tools/integrations/","title":"Integration with Teams/Slack","text":"<p>Monitor your Azure repositories and receive notifications in your channel whenever code is pushed/checked in and whenever a pull request (PR) is created, updated, or a merge is attempted.</p> <ul> <li>Azure Repos with Microsoft Teams</li> <li>Azure Repos with Slack</li> </ul>"},{"location":"documentation/tools/languages/","title":"Languages","text":""},{"location":"documentation/tools/languages/#markdown","title":"Markdown","text":"<p>Markdown is one of the most popular markup languages to add rich formatting, tables and images to your documentation using plain text documents.</p> <p>Markdown files (.md) can be source-controlled along with your code.</p> <p>More information:</p> <ul> <li>Getting Started</li> <li>Cheat Sheet</li> <li>Basic Syntax</li> <li>Extended Syntax</li> <li>Wiki Markdown Syntax</li> </ul> <p>Tools:</p> <ul> <li>Markdown and Visual Studio Code</li> <li>How to automate simple checks</li> </ul>"},{"location":"documentation/tools/languages/#mermaid","title":"Mermaid","text":"<p>Mermaid lets you create diagrams using text definitions that can later be rendered with a diagramming and charting tool.</p> <p>Mermaid files (.mmd) can be source-controlled along with your code. It's also recommended to include image files (.png) with the rendered diagrams under source control. Your markdown files should link the image files, so they can be read without the need of a Mermaid rendering tool (e.g., during Pull Request review).</p>"},{"location":"documentation/tools/languages/#example-mermaid-diagram","title":"Example Mermaid Diagram","text":"<p>This is an example of a Mermaid flowchart diagram written as code.</p> <pre><code>graph LR\n    A[Diagram Idea] --&gt;|Write mermaid code| B(mermaid.mmd file)\n    B --&gt;|Add to source control| C{Code repo}\n    B --&gt;|Export as .png| G(.png file of diagram)\n    G --&gt;|Add to source control| C\n</code></pre> <p>This is an example of how it can be rendered as an image.</p> <p></p> <p>More information:</p> <ul> <li>About Mermaid</li> <li>Diagram syntax</li> </ul> <p>Tools:</p> <ul> <li>Mermaid Live Editor</li> <li>Markdown Preview Mermaid Support for Visual Studio Code</li> </ul>"},{"location":"documentation/tools/wikis/","title":"Wikis","text":"<p>Use a team project wiki to share information with other team members. When you provision a wiki from scratch, a new Git repository stores your Markdown files, images, attachments, and sequence of pages. This wiki supports collaborative editing of its content and structure.</p> <p>In Azure DevOps, you have the following options for maintaining wiki content:</p> <ul> <li>Provision a wiki for your team project. This option supports only one wiki for the team project.</li> <li>Publish Markdown files defined in a Git repository to a wiki. With this option, you can maintain several versioned wikis to support your content needs.</li> </ul> <p>More information:</p> <ul> <li>About Wikis, READMEs, and Markdown.</li> <li>Provisioned wikis vs. published code as a wiki.</li> <li>Create a Wiki for your project.</li> <li>Manage wikis.</li> </ul>"},{"location":"documentation/tools/wikis/#wikis-vs-digital-notebooks-eg-onenote","title":"Wikis vs. Digital Notebooks (e.g., OneNote)","text":"<p>When you work on a project, you may decide to document relevant details or record important decisions about the project in a digital notebook. Tools like OneNote allows you to easily organize, navigate and search your notes. You can provide type, highlighting, or ink annotations to your notes. These notes can easily be shared and created together with others. Still, Wikis greatly facilitate the process of establishing and managing documentation by allowing us to source control the documentation.</p>"},{"location":"engineering-feedback/","title":"Microsoft Engineering Feedback","text":""},{"location":"engineering-feedback/#why-is-it-important-to-submit-microsoft-engineering-feedback","title":"Why is it Important to Submit Microsoft Engineering Feedback","text":"<p>Engineering Feedback captures the \"voice of the customer\" and is an important mechanism to provide actionable insights and help Microsoft product groups continuously improve the platform and cloud services to enable all customers to be as productive as possible.</p> <p>Please note that Engineering Feedback is an asynchronous (i.e. not real-time) method to capture and aggregate friction points across multiple customers and code-with engagements. Therefore, if you need to report a service outage, or an immediately-blocking bug, you should file an official Azure support ticket and, if possible, reference the ticket id in the feedback that you submit later.</p> <p>Even if the feedback has already been raised directly with a product group or on through online channels like GitHub or Stack Overflow, it is still important to raise it via Microsoft Engineering feedback, so it can be consolidated with other customer projects that have the same feedback to help with prioritization.</p>"},{"location":"engineering-feedback/#when-to-submit-engineering-feedback","title":"When to Submit Engineering Feedback","text":"<p>Capturing and providing high-quality actionable Engineering Feedback is an integral ongoing part of all code-with engagements. It is recommended to submit feedback on an ongoing basis instead of batching it up for submission at the end of the engagement.</p> <p>You should jot down the details of the feedback close to the time when you encounter the specific blockers, challenges, and friction since that is when it is freshest in your mind. The project team can then decide how to prioritize and when to submit the feedback into the official CSE Feedback system (accessible to ISE team members) during each sprint.</p>"},{"location":"engineering-feedback/#what-is-good-and-high-quality-engineering-feedback","title":"What is Good and High-quality Engineering Feedback","text":"<p>Good engineering feedback provides enough information for those who are not part of the code-with engagement to understand the customer pain, the associated product issues, the impact and priority of these issues, and any potential workarounds that exist to minimize that impact.</p>"},{"location":"engineering-feedback/#high-quality-engineering-feedback-is","title":"High-Quality Engineering Feedback is","text":"<ul> <li>Goal Oriented - states what the customer is trying to accomplish</li> <li>Specific - details the scenario, observation, or challenge faced by the customer</li> <li>Actionable - includes the necessary clarifying information to enable a decision</li> </ul>"},{"location":"engineering-feedback/#examples-of-good-engineering-feedback","title":"Examples of Good Engineering Feedback","text":"<p>For example, here is an evolution of transforming a fictitious feedback with the above high-quality engineering feedback guidance in mind:</p> Stage Feedback Evolution Initial feedback Azure Functions Service Bus Trigger is slow for in-order scenarios Making it Goal Oriented Customer requests batch receiving for Azure Functions Service Bus trigger with sessions enabled to better support higher throughput messaging. They want to use Azure Functions to process as many messages per second as possible with minimum latency and in a given order. Adding Specifics Customer scenario was to receive a total of 250 messages/second from 50 producers with requirement for ordering per producer &amp; minimum latency, using a Service Bus topic with sessions enabled for ordering. Batch receiving is not supported in Azure Functions Service Bus Trigger. Making it Actionable Customer scenario was to receive a total of 250 messages/second from 50 producers with requirement for ordering per producer &amp; minimum latency, using a Service Bus topic with sessions enabled for ordering. According to Microsoft documentation, batch receiving is recommended for better performance but this is not currently supported in the Azure Functions Service Bus Trigger. The impact and workaround was choosing containers over Functions. The desired outcome is for Azure Functions to support Service Bus sessions with batch and non-batch processing for all Azure Functions GA languages. <p>For real-world examples please follow Feedback Examples.</p>"},{"location":"engineering-feedback/#how-to-submit-engineering-feedback","title":"How to Submit Engineering Feedback","text":"<p>Please follow the Engineering Feedback Guidance to ensure that you provide feedback that can be triaged and processed most efficiently.</p> <p>Please review the Frequently Asked Questions page for additional information on the engineering feedback process.</p>"},{"location":"engineering-feedback/feedback-examples/","title":"Engineering Feedback Examples","text":"<p>The following are real-world examples of Engineering Feedback that have led to product improvements and unblocked customers.</p>"},{"location":"engineering-feedback/feedback-examples/#windows-server-container-support-for-azure-kubernetes-service","title":"Windows Server Container Support for Azure Kubernetes Service","text":"<p>The Azure Kubernetes Service should have first class Windows container support so solutions that require Windows workloads can be deployed on a wildly popular container orchestration platform. The need was to be able to deploy Windows Server containers on AKS the managed Azure Kubernetes Service. According to this FAQ (and in parallel confirmation) it is not available yet.</p> <p>We tried to deploy anyway as a test, and it did not work \u2013 the deployment would be pending without success.</p> <p>More than a dozen large partners/customers are blocked in deploying Windows workloads to AKS due to a lack of support for Windows Server containers. They need this feature so solutions requiring Windows workloads can be deployed to this popular container orchestration platform.</p> <p>We are seeing an emergence of companies beginning to try Windows containers as an option to move their Windows workloads to the cloud.\u202f Gartner is claiming that 80% of enterprise apps run on Windows. Containers have become the de facto deployment mechanism in the industry, and deployment consistency and speed are a few of the important factors companies are looking for. Enabling Windows applications and ensuring that developers have a good experience when moving their workloads to Azure via Windows containers is key to keeping existing Windows customers within the Azure ecosystem and driving Azure adoption for new workloads.</p> <p>We are also seeing increased interest, particularly among enterprise customers, in using a single orchestrator control plane for managing both Linux and Windows workloads.</p> <p>This feedback was created as a high priority feedback and followed up internally until addressed. Here is the announcement.</p>"},{"location":"engineering-feedback/feedback-examples/#support-batch-receiving-with-sessions-in-azure-functions-service-bus-trigger","title":"Support Batch Receiving with Sessions in Azure Functions Service Bus Trigger","text":"<p>Customer scenario was to receive a total of 250 messages per second from 50 producers with requirement for ordering &amp; minimum latency, using a Service Bus topic with sessions enabled for ordering. According to Microsoft documentation, batch receiving is recommended for better performance but this is not currently supported in Azure Functions Service Bus Trigger. The impact (and work around) was choosing containers over Functions. The Acceptance Criteria is for Azure Functions to support Service Bus sessions with batch and non-batch processing for all Azure Functions GA languages.</p> <p>This feedback was created as a feedback with the Azure Functions product group and also followed up internally until addressed.</p>"},{"location":"engineering-feedback/feedback-examples/#stream-analytics-no-support-for-zero-downtime-scale-down","title":"Stream Analytics - No Support for Zero-Downtime Scale-Down","text":"<p>In order to update the Streaming Unit number in Stream Analytics you need to stop the service and wait for minutes for it to restart. This unacceptable by customers who need near real-time analysis\u200b. In order to have a job re-started, up to 2 minutes are needed and this is not acceptable for a real-time streaming solution. It would also be optimal if scale-up and scale-down could be done automatically, by setting threshold values that when reached increase or decrease automatically the amount of RU available. This feedback is for customers' request for zero down-time scale-down capability in stream analytics.</p> <p>Problem Statement: In order to update the \"Streaming Unit\" number, partners must stop the service and wait until it restarts. The partner needs to be able to update the number without stopping the service.</p> <p>Desired Experience: Partners should be able to update the Streaming Unit number without stopping the associated service.</p> <p>This feedback was created as a high priority feedback and followed up until addressed in December 2019.</p>"},{"location":"engineering-feedback/feedback-examples/#python-support-for-azure-functions","title":"Python Support for Azure Functions","text":"<p>Several customers already use Python as part of their workflow, and would like to be able to use Python for Azure Functions. This is specially true since many of them are already have scripts running on other clouds and services.</p> <p>In addition, Python support has been in Preview for a very long time, and it's missing a lot of functionality.</p> <p>This feature request is one of the most asked, and a huge upside potential to pull through Machine Learning (ML) based workloads.</p> <p>This feedback was created as a feedback with the Azure Functions product group and also followed up internally until addressed. Here is the announcement.</p>"},{"location":"engineering-feedback/feedback-faq/","title":"Engineering Feedback Frequently Asked Questions (F.A.Q.)","text":"<p>The questions below are common questions related to the feedback process. The answers are intended to help both Microsoft employees and customers.</p>"},{"location":"engineering-feedback/feedback-faq/#when-should-i-submit-feedback-vs-creating-an-issue-on-github-uservoice-or-sending-an-email-directly-to-a-microsoft-employee","title":"When Should I Submit Feedback vs. Creating an Issue on GitHub, UserVoice, or Sending an Email Directly to a Microsoft Employee?","text":"<p>It is appropriate to do both. As a customer or Microsoft employee, you are empowered to create an issue or submit feedback via the medium appropriate for service.</p> <p>In addition to an issue on GitHub, feedback on UserVoice, or a personal email, Microsoft employees in CSE should submit feedback via CSE Feedback.  In doing so, please reference the GitHub issue, UserVoice feedback, or email by including a link to the item or attaching the email.</p> <p>Submitting to ISE Feedback allows the ISE Feedback team to coalesce feedback across a wide range of sources, and thus create a unified case to submit to the appropriate Azure engineering team(s).</p>"},{"location":"engineering-feedback/feedback-faq/#how-can-a-customer-track-the-status-of-a-specific-feedback-item","title":"How can a Customer Track the Status of a Specific Feedback Item?","text":"<p>At this time, customers are not able to directly track the status of feedback submitted via ISE Feedback.  The ISE Feedback process is internal to Microsoft, and as such, available only to Microsoft employees.  Customers may request an update from their ISE engineering partner or Microsoft account representative(s).</p> <p>Customers can also submit their feedback directly via GitHub or UserVoice (as appropriate for the specific service), and inform their ISE engineering partner.  The ISE engineer should submit the feedback via the ISE Feedback process, and in doing so reference the previously created issue.  Customers can follow the GitHub or UserVoice item to be alerted on updates.</p>"},{"location":"engineering-feedback/feedback-faq/#how-can-a-microsoft-employee-track-the-status-of-a-specific-feedback-item","title":"How can a Microsoft Employee Track the Status of a Specific Feedback Item?","text":"<p>The easiest way for a Microsoft employee within ISE to track a specific feedback item is to follow the feedback (a work item) in Azure DevOps.</p>"},{"location":"engineering-feedback/feedback-faq/#as-a-microsoft-employee-within-ise-if-i-submit-a-feedback-and-move-to-another-dev-crew-engagement-how-would-my-customer-get-an-update-on-that-feedback","title":"As a Microsoft Employee Within ISE, if I Submit a Feedback and Move to Another Dev Crew Engagement, how Would my Customer get an Update on that Feedback?","text":"<p>If the feedback is also submitted via GitHub or UserVoice, the customer may elect to follow that item for publicly available updates.  The customer may also contact their Microsoft account representative to request an update.</p>"},{"location":"engineering-feedback/feedback-faq/#as-a-microsoft-employee-within-ise-what-should-i-expectdo-after-submitting-feedback-via-ise-feedback","title":"As a Microsoft Employee Within ISE, what Should I Expect/Do After Submitting Feedback via ISE Feedback?","text":"<p>After submitting the feedback, it is recommended to follow the feedback (a work item) in Azure DevOps.  If you have configured Azure DevOps notifications to send an email on work item updates, you will receive an email when the feedback is updated.</p> <p>If more information about the feedback is needed, a member of the ISE Feedback team will contact you to gather more information.</p>"},{"location":"engineering-feedback/feedback-faq/#howwhen-are-feedback-aggregated","title":"How/When are Feedback Aggregated?","text":"<p>Members of the ISE Feedback team will make a best effort to triage and review new ISE Feedback items within two weeks of the original submission date.</p> <p>If there is similarity across multiple feedback items, a member of the ISE Feedback team may decide to create a new feedback item which is an aggregate of similar items.  This is done to aid in the creation of a unified feedback item to present to the appropriate Microsoft engineering team.</p> <p>On a monthly basis, the ISE Feedback team will review all feedback and generate a report consisting of the highest priority feedback.  The report is presented to appropriate ISE and Microsoft leadership teams.</p>"},{"location":"engineering-feedback/feedback-guidance/","title":"Engineering Feedback Guidance","text":"<p>The following guidance provides a minimum set of details that will result in actionable engineering feedback. Ensure that you provide as much detail for each of the following sections as relevant and possible.</p>"},{"location":"engineering-feedback/feedback-guidance/#title","title":"Title","text":"<p>Provide a meaningful and descriptive title. There is no need to include the Azure service in the title as this will be included as part of the Categorization section.</p> <p>Good examples:</p> <ul> <li>Supported X versions not documented</li> <li>Require all-in-one Y story</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#summary","title":"Summary","text":"<p>Summarize the feedback in a short paragraph.</p>"},{"location":"engineering-feedback/feedback-guidance/#categorization","title":"Categorization","text":""},{"location":"engineering-feedback/feedback-guidance/#azure-service","title":"Azure Service","text":"<p>Which Azure service does this feedback item refer to? If there are multiple Azure services involved, pick the primary service and include the details of the others in the Notes section.</p>"},{"location":"engineering-feedback/feedback-guidance/#type","title":"Type","text":"<p>Select one of the following to describe what type of feedback is being provided:</p> <ul> <li>Business Blocker (e.g. No SLA on X, Service Y not GA, Service A not in Region B)</li> <li>Technical Blocker (e.g. Accelerated networking not available on Service X)</li> <li>Documentation (e.g. Instructions for configuring scenario X missing)</li> <li>Feature Request (e.g. Enable simple integration to X on Service Y)</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#stage","title":"Stage","text":"<p>Select one of the following to describe the lifecycle stage of the engagement that has generated this feedback:</p> <ul> <li>Production</li> <li>Staging</li> <li>Testing</li> <li>Development</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#impact","title":"Impact","text":"<p>Describe the impact to the customer and engagement that this feedback implies.</p>"},{"location":"engineering-feedback/feedback-guidance/#time-frame","title":"Time Frame","text":"<p>Provide a time frame that this feedback item needs to be resolved within (if relevant).</p>"},{"location":"engineering-feedback/feedback-guidance/#priority","title":"Priority","text":"<p>Please provide the customer perspective priority of the feedback.  Feedback is prioritized at one of the following four levels:</p> <ul> <li>P0 - Impact is critical and large: Needs to be addressed immediately; impact is critical and large in scope (i.e. major service outage; makes service or functions unusable/unavailable to a high portion of addressable space; no known workaround).</li> <li>P1 - Impact is high and significant: Needs to be addressed quickly; impacts a large percentage of addressable space and impedes progress. A partial workaround exists or is overly painful.</li> <li>P2 - Impact is moderate and varies in scope: Needs to be addressed in a reasonable time frame (i.e. issues that are impeding adoption and usage with no reasonable workarounds). For example, feedback may be related to feature-level issue to solve for friction.</li> <li>P3 - Impact is low: Issue can be address when able or eventually (i.e. relevant to core addressable space but issue does not impede progress or has reasonable workaround). For example, feedback may be related to feature ideas or opportunities.</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#reproduction-steps","title":"Reproduction Steps","text":"<p>The reproduction steps are important since they help confirm and replay the issue, and are essential in demonstrating success once there is a resolution.</p>"},{"location":"engineering-feedback/feedback-guidance/#pre-requisites","title":"Pre-requisites","text":"<p>Provide a clear set of all conditions and pre-requisites required before following the set of reproduction steps. These could include:</p> <ul> <li>Platform (e.g. AKS 1.16.4 cluster with Azure CNI, Ubuntu 19.04 VM)</li> <li>Services (e.g. Azure Key Vault, Azure Monitor)</li> <li>Networking (e.g. VNET with subnet)</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#steps","title":"Steps","text":"<p>Provide a clear set of repeatable steps that will allow for this feedback to be reproduced. This can take the form of:</p> <ul> <li>Scripts (e.g. bash, PowerShell, terraform, arm template)</li> <li>Command line instructions (e.g. az, helm, terraform)</li> <li>Screen shots (e.g. azure portal screens)</li> </ul>"},{"location":"engineering-feedback/feedback-guidance/#notes","title":"Notes","text":"<p>Include items like architecture diagrams, screenshots, logs, traces etc which can help with understanding your notes and the feedback item. Also include details about the scenario customer/partner verbatim as much as possible in the main content.</p>"},{"location":"engineering-feedback/feedback-guidance/#what-didnt-work","title":"What Didn't Work","text":"<p>Describe what didn't work or what feature gap you identified.</p>"},{"location":"engineering-feedback/feedback-guidance/#what-was-your-expectation-or-the-desired-outcome","title":"What was Your Expectation or the Desired Outcome","text":"<p>Describe what you expected to happen. What was the outcome that was expected?</p>"},{"location":"engineering-feedback/feedback-guidance/#describe-the-steps-you-took","title":"Describe the Steps you Took","text":"<p>Provide a clear description of the steps taken and the outcome/description at each point.</p>"},{"location":"machine-learning/","title":"Machine Learning Fundamentals at ISE","text":"<p>This guideline documents the Machine Learning (ML) practices in ISE. ISE works with customers on developing ML models and putting them in production, with an emphasis on engineering and research best practices throughout the project's life cycle.</p>"},{"location":"machine-learning/#goals","title":"Goals","text":"<ul> <li>Provide a set of ML practices to follow in an ML project.</li> <li>Provide clarity on ML process and how it fits within a software engineering project.</li> <li>Provide best practices for the different stages of an ML project.</li> </ul>"},{"location":"machine-learning/#how-to-use-these-fundamentals","title":"How to use these Fundamentals","text":"<ul> <li>If you are starting a new ML project, consider reading through the general guidance documents.</li> <li>For specific aspects of an ML project, refer to the guidelines for different project phases.</li> </ul>"},{"location":"machine-learning/#ml-project-phases","title":"ML Project Phases","text":"<p>The diagram below shows different phases in an ideal ML project. Due to practical constraints and requirements, it might not always be possible to have a project structured in such a manner, however best practices should be followed for each individual phase.</p> <p></p> <ul> <li>Envisioning: Initial problem understanding, customer goals and objectives.</li> <li>Feasibility Study: Assess whether the problem in question is feasible to solve satisfactorily using ML with the available data.</li> <li>Model Milestone: There is a basic model that is achieving the minimum required performance, both in terms of ML performance and system performance. Using the knowledge gathered to this milestone, define the scope, objectives, high-level architecture, definition of done and plan for the entire project.</li> <li>Model(s) experimentation: Tools and best practices for conducting successful model experimentation.</li> <li>Model(s) Operationalization: Model readiness for production checklist.</li> </ul>"},{"location":"machine-learning/#general-guidance","title":"General Guidance","text":"<ul> <li>ML Process Guidance</li> <li>ML Fundamentals checklist</li> <li>Data Exploration</li> <li>Agile ML development</li> <li>Testing Data Science and ML Ops code</li> <li>Profiling Machine Learning and ML Ops code</li> <li>Responsible AI</li> <li>Program Management for ML projects</li> </ul>"},{"location":"machine-learning/#resources","title":"Resources","text":"<ul> <li>Model Operationalization</li> </ul>"},{"location":"machine-learning/agile-development-considerations-for-ml-projects/","title":"Agile Development Considerations for ML Projects","text":""},{"location":"machine-learning/agile-development-considerations-for-ml-projects/#overview","title":"Overview","text":"<p>When running ML projects, we follow the Agile methodology for software development with some adaptations, as we acknowledge that research and experimentation are sometimes difficult to plan and estimate.</p>"},{"location":"machine-learning/agile-development-considerations-for-ml-projects/#goals","title":"Goals","text":"<ol> <li>Run and manage ML projects effectively</li> <li>Create effective collaboration between the ML team and the other teams working on the project</li> </ol> <p>To learn more about how ISE runs the Agile process for software development teams, refer to this doc.</p> <p>Within this framework, the team follows these Agile ceremonies:</p> <ul> <li>Backlog management</li> <li>Retrospectives</li> <li>Scrum of Scrums (where applicable)</li> <li>Sprint planning</li> <li>Stand-ups</li> <li>Working agreement</li> </ul>"},{"location":"machine-learning/agile-development-considerations-for-ml-projects/#agile-process-during-exploration-and-experimentation","title":"Agile Process During Exploration and Experimentation","text":"<ol> <li> <p>While acknowledging the fact that ML user stories and research spikes are less predictable than software development ones, we strive to have a deliverable for every user story in every sprint.</p> </li> <li> <p>User stories and spikes are usually estimated using T-shirt sizes or similar, and not in actual days/hours.</p> </li> <li> <p>ML design sessions should be included in each sprint.</p> </li> </ol>"},{"location":"machine-learning/agile-development-considerations-for-ml-projects/#examples-of-ml-deliverables-for-each-sprint","title":"Examples of ML Deliverables for each Sprint","text":"<ul> <li>Working code (e.g. models, pipelines, exploratory code)</li> <li>Documentation of new hypotheses, and the acceptance or rejection of previous hypotheses as part of a Hypothesis Driven Analysis (HDA). For more information see Hypothesis Driven Development on Barry Oreilly's website</li> <li>Exploratory Data Analysis (EDA) results and learnings documented</li> </ul>"},{"location":"machine-learning/agile-development-considerations-for-ml-projects/#collaboration-between-data-scientists-and-software-developers","title":"Collaboration Between Data Scientists and Software Developers","text":"<ul> <li>Data scientists and software developers work together on the project. The team uses one backlog and attend the same Agile ceremonies. In cases where the project has many participants, we will divide into working groups, but still have the entire team join the Agile ceremonies.</li> </ul> <ul> <li>If possible, feasibility study and initial model experimentation takes place before the operationalization work kicks off.</li> <li>Everyone shares the accountability for the MLOps solution.</li> <li>The ML model interface (API) is determined as early as possible, to allow the developers to consider its integration into the production pipeline.</li> <li>MLOps artifacts are developed with a continuous collaboration and review of the data scientists, to ensure the appropriate approaches for experimentation and productization are used.</li> <li>Retrospectives and sprint planning are performed on the entire team level, and not the specific work groups level.</li> </ul>"},{"location":"machine-learning/data-exploration/","title":"Data Exploration","text":"<p>After envisioning, and typically as part of the ML feasibility study, the next step is to confirm resource access and then dive deep into the available data through data exploration workshops.</p>"},{"location":"machine-learning/data-exploration/#purpose-of-the-data-exploration-workshop","title":"Purpose of the Data Exploration Workshop","text":"<p>The purpose of the data exploration workshop is as follows:</p> <ol> <li>Ensure the team can access the data and compute resources that are necessary for the ML feasibility study</li> <li>Ensure that the data provided is of quality and is relevant to the ML solution</li> <li>Make sure that the project team has a good understanding of the data</li> <li>Make sure that the SMEs (Subject Matter Experts) needed are present for Data Exploration Workshop</li> <li>List people needed for the data exploration workshop</li> </ol>"},{"location":"machine-learning/data-exploration/#accessing-resources","title":"Accessing Resources","text":"<p>Prior to diving into data exploration workshops, it is important to confirm that you have access to the necessary resources (including data).</p> <p>Below is an example list of questions to consider before starting a data exploration workshop.</p> <ol> <li>What are the requirements for an account to be set up in order for the team to access data and compute resources?</li> <li>Are there security requirements around accessing resources (Subscriptions, Azure Resources, project management, etc.) such as VPN, 2FA, jump boxes, etc.?</li> <li>Data access:     * Is it on-prem or on Azure already?     * If it is on-prem, can we move the needed data to Azure under the appropriate subscription? Who has permission to move the data?     * Is the data access approved from a legal/compliance perspective?</li> <li>Computation:     * Is a VPN needed for the project team to access these computation nodes (Virtual Machines, Databricks clusters, etc) from their work PCs/Macs?     * Any restrictions on accessing the source data system from these computation nodes?     * If we want to create some compute resources, who has permissions to do so?</li> <li>Source code repository:     * Do you have any preference on source code repository location?</li> <li>Backlog management and work planning:     * Do you have any preference on backlog management and work planning, such as Azure DevOps, Jira or anything else?     * If an existing system, are special accounts / system setups required to access?</li> <li>Programming Language:     * Is Python/PySpark a preferred language?     * Is there any internal approval processes for the Python/PySpark libraries we want to use for this engagement?</li> </ol>"},{"location":"machine-learning/data-exploration/#data-exploration-workshop","title":"Data Exploration Workshop","text":"<p>Key objectives of the exploration workshops include the following:</p> <ol> <li>Understand and document the features, location, and availability of the data.</li> <li>What order of magnitude is the current data (e.g., GB, TB)? Is this all relevant?</li> <li>How does the organization decide when to collect additional data or purchase external data? Are there any examples of this?</li> <li>Understand the quality of the data. Is there already a data validation strategy in place?</li> <li>What data has been used so far to analyze recent data-driven projects? What has been found to be most useful? What was not useful? How was this judged?</li> <li>What additional internal data may provide insights useful for data-driven decision-making for proposed projects? What external data could be useful?</li> <li>What are the possible constraints or challenges in accessing or incorporating this data?</li> <li>How was the data collected? Are there any obvious biases due to how the data was collected?</li> <li>What changes to data collection, coding, integration, etc has occurred in the last 2 years that may impact the interpretation or availability of the collected data</li> </ol>"},{"location":"machine-learning/envisioning-and-problem-formulation/","title":"Envisioning and Problem Formulation","text":"<p>Before beginning a data science investigation, we need to define a problem statement which the data science team can explore; this problem statement can have a significant influence on whether the project is likely to be successful.</p>"},{"location":"machine-learning/envisioning-and-problem-formulation/#envisioning-goals","title":"Envisioning Goals","text":"<p>The main goals of the envisioning process are:</p> <ul> <li>Establish a clear understanding of the problem domain and the underlying business objective</li> <li>Define how a potential solution would be used and how its performance should be measured</li> <li>Determine what data is available to solve the problem</li> <li>Understand the capabilities and working practices of the data science team</li> <li>Ensure all parties have the same understanding of the scope and next steps (e.g., onboarding, data exploration workshop)</li> </ul> <p>The envisioning process usually entails a series of 'envisioning' sessions where the data science team work alongside subject-matter experts to formulate the problem in such a way that there is a shared understanding a shared understanding of the problem domain, a clear goal, and a predefined approach to evaluating a potential solution.</p>"},{"location":"machine-learning/envisioning-and-problem-formulation/#understanding-the-problem-domain","title":"Understanding the Problem Domain","text":"<p>Generally, before defining a project scope for a data science investigation, we must first understand the problem domain:</p> <ul> <li>What is the problem?</li> <li>Why does the problem need to be solved?</li> <li>Does this problem require a machine learning solution?</li> <li>How would a potential solution be used?</li> </ul> <p>However, establishing this understanding can prove difficult, especially for those unfamiliar with the problem domain. To ease this process, we can approach problems in a structured way by taking the following steps:</p> <ul> <li>Identify a measurable problem and define this in business terms. The objective should be clear, and we should have a good understanding of the factors that we can control - that can be used as inputs - and how they affect the objective. Be as specific as possible.</li> <li>Decide how the performance of a solution should be measured and identify whether this is possible within the restrictions of this problem. Make sure it aligns with the business objective and that you have identified the data required to evaluate the solution. Note that the data required to evaluate a solution may differ from the data needed to create a solution.</li> <li>Thinking about the solution as a black box, detail the function that a solution to this problem should perform to fulfil the objective and verify that the relevant data is available to solve the problem.<ul> <li>One way of approaching this is by thinking about how a subject-matter expert could solve the problem manually, and the data that would be required; if a human subject-matter expert is unable to solve the problem given the available data, this is indicative that additional information is required and/or more data needs to be collected.</li> </ul> </li> <li>Based on the available data, define specific hypothesis statements - which can be proved or disproved - to guide the exploration of the data science team. Where possible, each hypothesis statement should have a clearly defined success criteria (e.g., with an accuracy of over 60%), however, this is not always possible - especially for projects where no solution to the problem currently exists. In these cases, the measure of success could be based on a subject-matter expert verifying that the results meet their expectations.</li> <li>Document all the above information, to ensure alignment between stakeholders and establish a clear understanding of the problem to be solved. Try to ensure that as much relevant domain knowledge is captured as possible, and that the features present in available data - and the way that the data was collected - are clearly explained, such that they can be understood by a non-subject matter expert.</li> </ul> <p>Once an understanding of the problem domain has been established, it may be necessary to break down the overall problem into smaller, meaningful chunks of work to maintain team focus and ensure a realistic project scope within the given time frame.</p>"},{"location":"machine-learning/envisioning-and-problem-formulation/#listening-to-the-end-user","title":"Listening to the End User","text":"<p>These problems are complex and require understanding from a variety of perspectives. It is not uncommon for the stakeholders to not be the end user of the solution framework. In these cases, listening to the actual end users is critical to the success of the project.</p> <p>The following questions can help guide discussion in understanding the stakeholders' perspectives:</p> <ul> <li>Who is the end user?</li> <li>What is the current practice related to the business problem?</li> <li>What's the performance of the current solution?</li> <li>What are their pain points?</li> <li>What is their toughest problem?</li> <li>What is the state of the data used to build the solution?</li> <li>How does the end user or SME envision the solution?</li> </ul>"},{"location":"machine-learning/envisioning-and-problem-formulation/#envisioning-guidance","title":"Envisioning Guidance","text":"<p>During envisioning sessions, the following may prove useful for guiding the discussion. Many of these points are taken directly, or adapted from, [1] and [2].</p>"},{"location":"machine-learning/envisioning-and-problem-formulation/#problem-framing","title":"Problem Framing","text":"<ol> <li>Define the objective in business terms.</li> <li>How will the solution be used?</li> <li>What are the current solutions/workarounds (if any)? What work has been done in this area so far? Does this solution need to fit into an existing system?</li> <li>How should performance be measured?</li> <li>Is the performance measure aligned with the business objective?</li> <li>What would be the minimum performance needed to reach the business objective?</li> <li>Are there any known constraints around non-functional requirements that would have to be taken into account? (e.g., computation times)</li> <li>Frame this problem (supervised/unsupervised, online/offline, etc.)</li> <li>Is human expertise available?</li> <li>How would you solve the problem manually?</li> <li>Are there any restrictions on the type of approaches which can be used? (e.g., does the solution need to be completely explainable?)</li> <li>List the assumptions you or others have made so far. Verify these assumptions if possible.</li> <li>Define some initial hypothesis statements to be explored.</li> <li>Highlight and discuss any responsible AI concerns if appropriate.</li> </ol>"},{"location":"machine-learning/envisioning-and-problem-formulation/#workflow","title":"Workflow","text":"<ol> <li>What data science skills exist in the organization?</li> <li>How many data scientists/engineers would be available to work on this project? In what capacity would these resources be available (full-time, part-time, etc.)?</li> <li>What does the team's current workflow practices look like? Do they work on the cloud/on-prem? In notebooks/IDE? Is version control used?</li> <li>How are data, experiments and models currently tracked?</li> <li>Does the team employ an Agile methodology? How is work tracked?</li> <li>Are there any ML solutions currently running in production? Who is responsible for maintaining these solutions?</li> <li>Who would be responsible for maintaining a solution produced during this project?</li> <li>Are there any restrictions on tooling that must/cannot be used?</li> </ol>"},{"location":"machine-learning/envisioning-and-problem-formulation/#example-a-recommendation-engine-problem","title":"Example: A Recommendation Engine Problem","text":"<p>To illustrate how the above process can be applied to a tangible problem domain, as an example, consider that we are looking at implementing a recommendation engine for a clothing retailer. This example was, in part, inspired by [3].</p> <p>Often, the objective may be simply presented, in a form such as \"to improve sales\". However, whilst this is ultimately the main goal, we would benefit from being more specific here. Suppose that we were to deploy a solution in November and then observed a December sales surge; how would we be able to distinguish how much of this was as a result of the new recommendation engine, as opposed to the fact that December is a peak buying season?</p> <p>A better objective, in this case, would be \"to drive additional sales by presenting the customer with items that they would not otherwise have purchased without the recommendation\". Here, the inputs that we can control are the choice of items that are presented to each customer, and the order in which they are displayed; considering factors such as how frequently these should change, seasonality, etc.</p> <p>The data required to evaluate a potential solution in this case would be which recommendations resulted in new sales, and an estimation of a customer's likeliness to purchase a specific item without a recommendation. Note that, whilst this data could also be used to build a recommendation engine, it is unlikely that this data will be available before a recommendation system has been implemented, so it is likely that we will have to use an alternate data source to build the model.</p> <p>We can get an initial idea of how to approach a solution to this problem by considering how it would be solved by a subject-matter expert. Thinking of how a personal stylist may provide a recommendation, they are likely to recommend items based on one or more of the following:</p> <ul> <li>generally popular items</li> <li>items similar to those liked/purchased by the customer</li> <li>items that were liked/purchased by similar customers</li> <li>items which are complementary to those owned by the customer</li> </ul> <p>Whilst this list is by no means exhaustive, it provides a good indication of the data that is likely to be useful to us:</p> <ul> <li>item sales data</li> <li>customer purchase histories</li> <li>customer demographics</li> <li>item descriptions and tags</li> <li>previous outfits, or sets, which have been curated by the stylist</li> </ul> <p>We would then be able to use this data to explore:</p> <ul> <li>a method of measuring similarity between items</li> <li>a method of measuring similarity between customers</li> <li>a method of measuring how complementary items are relative to one another</li> </ul> <p>which can be used to create and rank recommendations. Depending on the project scope, and available data, one or more of these areas could be selected to create hypotheses to be explored by the data science team. Some examples of such hypothesis statements could be:</p> <ul> <li>From the descriptions of each item, we can determine a measure of similarity between different items to a degree of accuracy which is specified by a stylist.</li> <li>Based on the behavior of customers with similar purchasing histories, we are able to predict certain items that a customer is likely to purchase; with a certainty which is greater than random choice.</li> <li>Using sets of items which have previously been sold together, we can formulate rules around the features which determine whether items are complementary or not which can be verified by a stylist.</li> </ul>"},{"location":"machine-learning/envisioning-and-problem-formulation/#next-steps","title":"Next Steps","text":"<p>To ensure clarity and alignment, it is useful to summarize the envisioning stage findings focusing on proposed detailed scenarios, assumptions and agreed decisions as well next steps.</p> <p>We suggest confirming that you have access to all necessary resources (including data) as a next step before proceeding with data exploration workshops.</p> <p>Below are the links to the exit document template and to some questions which may be helpful in confirming resource access.</p> <ul> <li>Summary of Scope Exit Document Template</li> <li>List of Resource Access Questions</li> <li>List of Data Exploration Workshop Questions</li> </ul>"},{"location":"machine-learning/envisioning-and-problem-formulation/#resources","title":"Resources","text":"<p>Many of the ideas presented here - and much more - were inspired by, and can be found in the following resources; all of which are highly recommended.</p> <ol> <li>Aur\u00e9lien G\u00e9ron's Machine learning project checklist</li> <li>Fast.ai's Data project checklist</li> <li>Designing great data products. Jeremy Howard, Margit Zwemer and Mike Loukides</li> </ol>"},{"location":"machine-learning/envisioning-summary-template/","title":"Generic Envisioning Summary","text":""},{"location":"machine-learning/envisioning-summary-template/#purpose-of-this-template","title":"Purpose of this Template","text":"<p>This is an example of an envisioning summary completed after envisioning sessions have concluded. It summarizes the materials reviewed, application scenarios discussed and decided, and the next steps in the process.</p>"},{"location":"machine-learning/envisioning-summary-template/#summary-of-envisioning","title":"Summary of Envisioning","text":""},{"location":"machine-learning/envisioning-summary-template/#introduction","title":"Introduction","text":"<p>This document is to summarize what we have discussed in these envisioning sessions, and what we have decided to work on in this machine learning (ML) engagement. With this document, we hope that everyone can be on the same page regarding the scope of this ML engagement, and will ensure a successful start for the project.</p>"},{"location":"machine-learning/envisioning-summary-template/#materials-shared-with-the-team","title":"Materials Shared with the Team","text":"<p>List materials shared with you here. The list below contains some examples. You will want to be more specific.</p> <ol> <li>Business vision statement</li> <li>Sample Data</li> <li>Current problem statement</li> </ol> <p>Also discuss:</p> <ol> <li>How the current solution is built and implemented</li> <li>Details about the current state of the systems and processes.</li> </ol>"},{"location":"machine-learning/envisioning-summary-template/#applications-scenarios-that-can-help-people-achieve-task","title":"Applications Scenarios that Can Help [People] Achieve [Task]","text":"<p>The following application scenarios were discussed:</p> <p>Scenario 1:</p> <p>Scenario 2:</p> <p>Add more scenarios as needed</p> <p>For each scenario, provide an appropriately descriptive name and then follow up with more details.</p> <p>For each scenario, discuss:</p> <ol> <li>What problem statement was discussed</li> <li>How we propose to solve the problem (there may be several proposals)</li> <li>Who would use the solution</li> <li>What would it look like to use our solution? An example of how it would bring value to the end user.</li> </ol>"},{"location":"machine-learning/envisioning-summary-template/#selected-scenario-for-this-ml-engagement","title":"Selected Scenario for this ML Engagement","text":"<p>Which scenario was selected?</p> <p>Why was this scenario prioritised over the others?</p> <p>Will other scenarios be considered in the future? When will we revisit them / what conditions need to be met to pursue them?</p>"},{"location":"machine-learning/envisioning-summary-template/#more-details-of-the-scope-for-selected-scenario","title":"More Details of the Scope for Selected Scenario","text":"<ol> <li>What is in scope?</li> <li>What data is available?</li> <li>Which performance metric to use?</li> <li>Bar of performance metrics</li> <li>What are deliverables?</li> </ol>"},{"location":"machine-learning/envisioning-summary-template/#whats-next","title":"What\u2019s Next?","text":""},{"location":"machine-learning/envisioning-summary-template/#legal-documents-to-be-signed","title":"Legal Documents to be Signed","text":"<p>State documents and timeline</p>"},{"location":"machine-learning/envisioning-summary-template/#responsible-ai-review","title":"Responsible AI Review","text":"<p>Plan when to conduct a responsible AI process. What are the prerequisites to start this process?</p>"},{"location":"machine-learning/envisioning-summary-template/#data-exploration-workshop","title":"Data Exploration Workshop","text":"<p>A data exploration workshop is planned for DATE RANGE. This data exploration workshops will be X-Y days, not including the time to gain access resources. The purpose of the data exploration workshop is as follows:</p> <ol> <li>Ensure the team can access the data and compute resources that are necessary for the ML feasibility study</li> <li>Ensure that the data provided is of quality and is relevant to the ML solution</li> <li>Make sure that the project team has a good understanding of the data</li> <li>Make sure that the SMEs (Subject Matter Experts) needed are present for Data Exploration Workshop</li> <li>List people needed for the data exploration workshop</li> </ol>"},{"location":"machine-learning/envisioning-summary-template/#ml-feasibility-study-til-date","title":"ML Feasibility Study til [date]","text":""},{"location":"machine-learning/envisioning-summary-template/#objectives","title":"Objectives","text":"<p>State what we expect to be the objective in the feasibility study</p>"},{"location":"machine-learning/envisioning-summary-template/#timeline","title":"Timeline","text":"<p>Give a possible timeline for the feasibility study</p>"},{"location":"machine-learning/envisioning-summary-template/#personnel-needed","title":"Personnel Needed","text":"<p>What sorts of people/roles are needed for the feasibility study?</p>"},{"location":"machine-learning/envisioning-summary-template/#whats-after-ml-feasibility-study","title":"What\u2019s After ML Feasibility Study","text":"<p>Detail here</p>"},{"location":"machine-learning/envisioning-summary-template/#summary-of-timeline","title":"Summary of Timeline","text":"<p>Below is a high-level summary of the upcoming timeline:</p> <p>Discuss dates for the data exploration workshop, and feasibility study along with any to-do items such as starting responsible AI process, identifying engineering resources. We suggest using a concise bulleted list or a table to easily convey the information.</p>"},{"location":"machine-learning/feasibility-studies/","title":"Feasibility Studies","text":"<p>The main goal of feasibility studies is to assess whether it is feasible to solve the problem satisfactorily using ML with the available data. We want to avoid investing too much in the solution before we have:</p> <ul> <li>Sufficient evidence that a solution would be the best technical solution given the business case</li> <li>Sufficient evidence that a solution is compatible with the problem context</li> <li>Sufficient evidence that a solution is possible</li> <li>Some vetted direction on what a solution should look like</li> </ul> <p>This effort ensures quality solutions backed by the appropriate, thorough amount of consideration and evidence.</p>"},{"location":"machine-learning/feasibility-studies/#when-are-feasibility-studies-useful","title":"When are Feasibility Studies Useful?","text":"<p>Every engagement can benefit from a feasibility study early in the project.</p> <p>Architectural discussions can still occur in parallel as the team works towards gaining a solid understanding and definition of what will be built.</p> <p>Feasibility studies can last between 4-16 weeks, depending on specific problem details, volume of data, state of the data etc. Starting with a 4-week milestone might be useful, during which it can be determined how much more time, if any, is required for completion.</p>"},{"location":"machine-learning/feasibility-studies/#who-collaborates-on-feasibility-studies","title":"Who Collaborates on Feasibility Studies?","text":"<p>Collaboration from individuals with diverse skill sets is desired at this stage, including data scientists, data engineers, software engineers, PMs, human experience researchers, and domain experts. It embraces the use of engineering fundamentals, with some flexibility. For example, not all experimentation requires full test coverage and code review. Experimentation is typically not part of a CI/CD pipeline. Artifacts may live in the <code>main</code> branch as a folder excluded from the CI/CD pipeline, or as a separate experimental branch, depending on customer/team preferences.</p>"},{"location":"machine-learning/feasibility-studies/#what-do-feasibility-studies-entail","title":"What do Feasibility Studies Entail?","text":""},{"location":"machine-learning/feasibility-studies/#problem-definition-and-desired-outcome","title":"Problem Definition and Desired Outcome","text":"<ul> <li>Ensure that the problem is complex enough that coding rules or manual scaling is unrealistic</li> <li>Clear definition of the problem from business and technical perspectives</li> </ul>"},{"location":"machine-learning/feasibility-studies/#deep-contextual-understanding","title":"Deep Contextual Understanding","text":"<p>Confirm that the following questions can be answered based on what was learned during the Discovery Phase of the project. For items that can not be satisfactorily answered, undertake additional investigation to answer.</p> <ul> <li>Understanding the people who are using and/or affected by the solution</li> <li>Understanding the contextual forces at play around the problem, including goals, culture, and historical context</li> <li>To accomplish this a researcher will:</li> <li>Collaborate with customers and colleagues to explore the landscape of people who relate to and may be affected by the problem space being explored (Users, stakeholders, subject matter experts, etc)</li> <li>Formulate the research question(s) to be addressed</li> <li>Select and design research to best serve the research question(s)</li> <li>Identify and select representative research participants across the problem space with whom to conduct the research</li> <li>Construct a research plan and necessary preparation documents for the selected research method(s)</li> <li>Conduct research activity with the participants via the selected method(s)</li> <li>Synthesize, analyze, and interpret research findings</li> <li>Where relevant, build frameworks, artifacts and processes that help explore the findings and implications of the research across the team</li> <li>Share what was uncovered and understood, and the implications thereof across the engagement team and relevant stakeholders.</li> <li>If the above research was conducted during the Discovery phase, it should be reviewed, and any substantial knowledge gaps should be identified and filled by following the above process.</li> </ul>"},{"location":"machine-learning/feasibility-studies/#data-access","title":"Data Access","text":"<ul> <li>Verify that the full team has access to the data</li> <li>Set up a dedicated and/or restricted environment if required</li> <li>Perform any required de-identification or redaction of sensitive information</li> <li>Understand data access requirements (retention, role-based access, etc.)</li> </ul>"},{"location":"machine-learning/feasibility-studies/#data-discovery","title":"Data Discovery","text":"<ul> <li>Hold a data exploration workshop and deep dive with domain experts</li> <li>Understand data availability and confirm the team's access</li> <li>Understand the data dictionary, if available</li> <li>Understand the quality of the data. Is there already a data validation strategy in place?</li> <li>Ensure required data is present in reasonable volumes</li> <li>For supervised problems (most common), assess the availability of labels or data that can be used to effectively approximate labels</li> <li>If applicable, ensure all data can be joined as required and understand how<ul> <li>Ideally obtain or create an entity relationship diagram (ERD)</li> </ul> </li> <li>Potentially uncover new useful data sources</li> </ul>"},{"location":"machine-learning/feasibility-studies/#architecture-discovery","title":"Architecture Discovery","text":"<ul> <li>Clear picture of existing architecture</li> <li>Infrastructure spikes</li> </ul>"},{"location":"machine-learning/feasibility-studies/#concept-ideation-and-iteration","title":"Concept Ideation and Iteration","text":"<ul> <li>Develop value proposition(s) for users and stakeholders based on the contextual understanding developed through the discovery process (e.g. key elements of value, benefits)</li> <li>As relevant, make use of</li> <li>Co-creation with team</li> <li>Co-creation with users and stakeholders</li> <li>As relevant, create vignettes, narratives or other materials to communicate the concept</li> <li>Identify the next set of hypotheses or unknowns to be tested (see concept testing)</li> <li>Revisit and iterate on the concept throughout discovery as understanding of the problem space evolves</li> </ul>"},{"location":"machine-learning/feasibility-studies/#exploratory-data-analysis-eda","title":"Exploratory Data Analysis (EDA)","text":"<ul> <li>Data deep dive</li> <li>Understand feature and label value distributions</li> <li>Understand correlations among features and between features and labels</li> <li>Understand data specific problem constraints like missing values, categorical cardinality, potential for data leakage etc.</li> <li>Identify any gaps in data that couldn't be identified in the data discovery phase</li> <li>Pave the way of further understanding of what techniques are applicable</li> <li>Establish a mutual understanding of what data is in or out of scope for feasibility, ensuring that the data in scope is significant for the business</li> </ul>"},{"location":"machine-learning/feasibility-studies/#data-pre-processing","title":"Data Pre-Processing","text":"<ul> <li>Happens during EDA and hypothesis testing</li> <li>Feature engineering</li> <li>Sampling</li> <li>Scaling and/or discretization</li> <li>Noise handling</li> </ul>"},{"location":"machine-learning/feasibility-studies/#hypothesis-testing","title":"Hypothesis Testing","text":"<ul> <li>Design several potential solutions using theoretically applicable algorithms and techniques, starting with the simplest reasonable baseline</li> <li>Train model(s)</li> <li>Evaluate performance and determine if satisfactory</li> <li>Tweak experimental solution designs based on outcomes</li> <li>Iterate</li> <li>Thoroughly document each step and outcome, plus any resulting hypotheses for easy following of the decision-making process</li> </ul>"},{"location":"machine-learning/feasibility-studies/#concept-testing","title":"Concept Testing","text":"<ul> <li>Where relevant, to test the value proposition, concepts or aspects of the experience</li> <li>Plan user, stakeholder and expert research</li> <li>Develop and design necessary research materials</li> <li>Synthesize and evaluate feedback to incorporate into concept development</li> <li>Continue to iterate and test different elements of the concept as necessary, including testing to best serve RAI goals and guidelines</li> <li>Ensure that the proposed solution and framing are compatible with and acceptable to affected people</li> <li>Ensure that the proposed solution and framing is compatible with existing business goals and context</li> </ul>"},{"location":"machine-learning/feasibility-studies/#risk-assessment","title":"Risk Assessment","text":"<ul> <li>Identification and assessment of risks and constraints</li> </ul>"},{"location":"machine-learning/feasibility-studies/#responsible-ai","title":"Responsible AI","text":"<ul> <li>Consideration of responsible AI principles</li> <li>Understanding of users and stakeholders\u2019 contexts, needs and concerns to inform development of RAI</li> <li>Testing AI concept and experience elements with users and stakeholders</li> <li>Discussion and feedback from diverse perspectives around any responsible AI concerns</li> </ul>"},{"location":"machine-learning/feasibility-studies/#output-of-a-feasibility-study","title":"Output of a Feasibility Study","text":"<p>The main outcome is a feasibility study report, with a recommendation on next steps:</p> <p>If there is not enough evidence to support the hypothesis that this problem can be solved using ML, as aligned with the pre-determined performance measures and business impact:</p> <ul> <li>We detail the gaps and challenges that prevented us from reaching a positive outcome</li> <li>We may scope down the project, if applicable</li> <li>We may look at re-scoping the problem taking into account the findings of the feasibility study</li> <li>We assess the possibility to collect more data or improve data quality</li> </ul> <p>If there is enough evidence to support the hypothesis that this problem can be solved using ML</p> <ul> <li>Provide recommendations and technical assets for moving to the operationalization phase</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/","title":"ML Fundamentals Checklist","text":"<p>This checklist helps ensure that our ML projects meet our ML Fundamentals. The items below are not sequential, but rather organized by different parts of an ML project.</p>"},{"location":"machine-learning/ml-fundamentals-checklist/#data-quality-and-governance","title":"Data Quality and Governance","text":"<ul> <li> There is access to data.</li> <li> Labels exist for dataset of interest.</li> <li> Data quality evaluation.</li> <li> Able to track data lineage.</li> <li> Understanding of where the data is coming from and any policies related to data access.</li> <li> Gather Security and Compliance requirements.</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/#feasibility-study","title":"Feasibility Study","text":"<ul> <li> A feasibility study was performed to assess if the data supports the proposed tasks.</li> <li> Rigorous Exploratory data analysis was performed (including analysis of data distribution).</li> <li> Hypotheses were tested producing sufficient evidence to either support or reject that an ML approach is feasible to solve the problem.</li> <li> ROI estimation and risk analysis was performed for the project.</li> <li> ML outputs/assets can be integrated within the production system.</li> <li> Recommendations on how to proceed have been documented.</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/#evaluation-and-metrics","title":"Evaluation and Metrics","text":"<ul> <li> Clear definition of how performance will be measured.</li> <li> The evaluation metrics are somewhat connected to the success criteria.</li> <li> The metrics can be calculated with the datasets available.</li> <li> Evaluation flow can be applied to all versions of the model.</li> <li> Evaluation code is unit-tested and reviewed by all team members.</li> <li> Evaluation flow facilitates further results and error analysis.</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/#model-baseline","title":"Model Baseline","text":"<ul> <li> Well-defined baseline model exists and its performance is calculated. (More details on well defined baselines)</li> <li> The performance of other ML models can be compared with the model baseline.</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/#experimentation-setup","title":"Experimentation setup","text":"<ul> <li> Well-defined train/test dataset with labels.</li> <li> Reproducible and logged experiments in an environment accessible by all data scientists to quickly iterate.</li> <li> Defined experiments/hypothesis to test.</li> <li> Results of experiments are documented.</li> <li> Model hyper parameters are tuned systematically.</li> <li> Same performance evaluation metrics and consistent datasets are used when comparing candidate models.</li> </ul>"},{"location":"machine-learning/ml-fundamentals-checklist/#production","title":"Production","text":"<ul> <li> Model readiness checklist reviewed.</li> <li> Model reviews were performed (covering model debugging, reviews of training and evaluation approaches, model performance).</li> <li> Data pipeline for inferencing, including an end-to-end tests.</li> <li> SLAs requirements for models are gathered and documented.</li> <li> Monitoring of data feeds and model output.</li> <li> Ensure consistent schema is used across the system with expected input/output defined for each component of the pipelines (data processing as well as models).</li> <li> Responsible AI reviewed.</li> </ul>"},{"location":"machine-learning/ml-model-checklist/","title":"ML Model Production Checklist","text":"<p>The purpose of this checklist is to make sure that:</p> <ul> <li>The team assessed if the model is ready for production before moving to the scoring process</li> <li>The team has prepared a production plan for the model</li> </ul> <p>The checklist provides guidelines for creating this production plan. It should be used by teams/organizations that already built/trained an ML model and are now considering putting it into production.</p>"},{"location":"machine-learning/ml-model-checklist/#checklist","title":"Checklist","text":"<p>Before putting an individual ML model into production, the following aspects should be considered:</p> <ul> <li> Is there a well defined baseline? Is the model performing better than the baseline?</li> <li> Are machine learning performance metrics defined for both training and scoring?</li> <li> Is the model benchmarked?</li> <li> Can ground truth be obtained or inferred in production?</li> <li> Has the data distribution of training, testing and validation sets been analyzed?</li> <li> Have goals and hard limits for performance, speed of prediction and costs been established so they can be considered if trade-offs need to be made?</li> <li> How will the model be integrated into other systems, and what impact will it have?</li> <li> How will incoming data quality be monitored?</li> <li> How will drift in data characteristics be monitored?</li> <li> How will performance be monitored?</li> <li> Have any ethical concerns been taken into account?</li> </ul> <p>Please note that there might be scenarios where it is not possible to check all the items on this checklist. However, it is advised to go through all items and make informed decisions based on your specific use case.</p>"},{"location":"machine-learning/ml-model-checklist/#will-your-model-performance-be-different-in-production-than-during-the-training-phase","title":"Will Your Model Performance be Different in Production than During the Training Phase","text":"<p>Once deployed into production, the model might be performing much worse than expected. This poor performance could be a result of:</p> <ul> <li>The data to be scored in production is significantly different from the train and test datasets</li> <li>The feature engineering steps are different or inconsistent in production compared to the training process</li> <li>The performance measure is not consistent (for example your test set covers several months of data where the performance metric for production has been calculated for one month of data)</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#is-there-a-well-defined-baseline-is-the-model-performing-better-than-the-baseline","title":"Is there a Well-Defined Baseline? Is the Model Performing Better than the Baseline?","text":"<p>A good way to think of a model baseline is the simplest model one can come up with: either a simple threshold, a random guess or a very basic linear model. This baseline is the reference point your model needs to outperform. A well-defined baseline is different for each problem type and there is no one size fits all approach.</p> <p>As an example, let's consider some common types of machine learning problems:</p> <ul> <li>Classification: Predicting between a positive and a negative class. Either the class with the most observations or a simple logistic regression model can be the baseline.</li> <li>Regression: Predicting the house prices in a city. The average house price for the last year or last month, a simple linear regression model, or the previous median house price in a neighborhood could be the baseline.</li> <li>Image classification: Building an image classifier to distinguish between cats and no cats in an image. If your classes are unbalanced: 70% cats and 30% no cats and if you always predict cats, your naive classifier has 70% accuracy and this can be your baseline. If your classes are balanced: 52% cats and 48% no cats, then a simple convolutional architecture can be the baseline (1 conv layer + 1 max pooling + 1 dense). Additionally, human accuracy at labelling can also be the baseline in an image classification scenario.</li> </ul> <p>Some questions to ask when comparing to a baseline:</p> <ul> <li>How does your model compare to a random guess?</li> <li>How does your model performance compare to applying a simple threshold?</li> <li>How does your model compare with always predicting the most common value?</li> </ul> <p>Note: In some cases, human parity might be too ambitious as a baseline, but this should be decided on a case by case basis. Human accuracy is one of the available options, but not the only one.</p> <p>Resources:</p> <ul> <li>\"How To Get Baseline Results And Why They Matter\" article</li> <li>\"Always start with a stupid model, no exceptions.\" article</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#are-machine-learning-performance-metrics-defined-for-both-training-and-scoring","title":"Are Machine Learning Performance Metrics Defined for Both Training and Scoring?","text":"<p>The methodology of translating the training metrics to scoring metrics should be well-defined and understood. Depending on the data type and model, the model metrics calculation might differ in production and in training. For example, the training procedure calculated metrics for a long period of time (a year, a decade) with different seasonal characteristics while the scoring procedure will calculate the metrics per a restricted time interval (for example a week, a month, a quarter). Well-defined ML performance metrics are essential in production so that a decrease or increase in model performance can be accurately detected.</p> <p>Things to consider:</p> <ul> <li>In forecasting, if you change the period of assessing the performance, from one month to a year for example, then you might get a different result. For example, if your model is predicting sales of a product per day and the RMSE (Root Mean Squared Error) is very low for the first month the model is in production. As the model is live for longer, the RMSE is increasing, becoming 10x the RMSE for the first year compared to the first month.</li> <li>In a classification scenario, the overall accuracy is good, but the model is performing poorly for some subgroups. For example, a classifier has an accuracy of 80% overall, but only 55% for the 20-30 age group. If this is a significant age group for the production data, then your accuracy might suffer greatly when in production.</li> <li>In scene classification scenario, the model is trying to identify a specific scene in a video, and the model has been trained and tested (80-20 split) on 50000 segments where half are segments containing the scene and half of the segments do not contain the scene. The accuracy on the training set is 85% and 84% on the test set. However, when an entire video is scored, scores are obtained on all segments, and we expect few segments to contain the scene. The accuracy for an entire video is not comparable with the training/test set procedure in this case, hence different metrics should be considered.</li> <li>If sampling techniques (over-sampling, under-sampling) are used to train model when classes are imbalanced, ensure the metrics used during training are comparable with the ones used in scoring.</li> <li>If the number of samples used for training and testing is small, the performance metrics might change significantly as new data is scored.</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#is-the-model-benchmarked","title":"Is the Model Benchmarked?","text":"<p>The trained model to be put into production is well benchmarked if machine learning performance metrics (such as accuracy, recall, RMSE or whatever is appropriate) are measured on the train and test set. Furthermore, the train and test set split should be well documented and reproducible.</p>"},{"location":"machine-learning/ml-model-checklist/#can-ground-truth-be-obtained-or-inferred-in-production","title":"Can Ground Truth be Obtained or Inferred in Production?","text":"<p>Without a reliable ground truth, the machine learning metrics cannot be calculated. It is important to identify if the ground truth can be obtained as the model is scoring new data by either manual or automatic means. If the ground truth cannot be obtained systematically, other proxies and methodology should be investigated in order to obtain some measure of model performance.</p> <p>One option is to use humans to manually label samples. One important aspect of human labelling is to take into account the human accuracy. If there are two different individuals labelling an image, the labels will likely be different for some samples. It is important to understand how the labels were obtained to assess the reliability of the ground truth (that is why we talk about human accuracy).</p> <p>For clarity, let's consider the following examples (by no means an exhaustive list):</p> <ul> <li>Forecasting: Forecasting scenarios are an example of machine learning problems where the ground truth could be obtained in most cases even though a delay might occur. For example, for a model predicting the sales of ice cream in a local shop, the ground truth will be obtained as the sales are happening, but it might appear in the system at a later time than as the model prediction.</li> <li>Recommender systems: For recommender system, obtaining the ground truth is a complex problem in most cases as there is no way of identifying the ideal recommendation. For a retail website for example, click/not click, buy/not buy or other user interaction with recommendation can be used as ground truth proxies.</li> <li>Object detection in images: For an object detection model, as new images are scored, there are no new labels being generated automatically. One option to obtain the ground truth for the new images is to use people to manually label the images. Human labelling is costly, time-consuming and not 100% accurate, so in most cases, only a subset of images can be labelled. These samples can be chosen at random or by using active learning techniques of selecting the most informative unlabeled samples.</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#has-the-data-distribution-of-training-testing-and-validation-sets-been-analyzed","title":"Has the Data Distribution of Training, Testing and Validation Sets Been Analyzed?","text":"<p>The data distribution of your training, test and validation (if applicable) dataset (including labels) should be analyzed to ensure they all come from the same distribution. If this is not the case, some options to consider are: re-shuffling,  re-sampling, modifying the data, more samples need to be gathered or features removed from the dataset.</p> <p>Significant differences in the data distributions of the different datasets can greatly impact the performance of the model. Some potential questions to ask:</p> <ul> <li>How much does the training and test data represent the end result?</li> <li>Is the distribution of each individual feature consistent across all your datasets? (i.e. same representation of age groups, gender, race etc.)</li> <li>Is there any data lineage information? Where did the data come from? How was the data collected? Can collection and labelling be automated?</li> </ul> <p>Resources:</p> <ul> <li>\"Splitting into train, dev and test\" tutorial</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#have-goals-and-hard-limits-for-performance-speed-of-prediction-and-costs-been-established-so-they-can-be-considered-if-trade-offs-need-to-be-made","title":"Have Goals and Hard Limits for Performance, Speed of Prediction and Costs been Established, so they can be Considered if Trade-Offs Need to be Made?","text":"<p>Some machine learning models achieve high ML performance, but they are costly and time-consuming to run. In those cases, a less performant and cheaper model could be preferred. Hence, it is important to calculate the model performance metrics (accuracy, precision, recall, RMSE etc), but also to gather data on how expensive it will be to run the model and how long it will take to run. Once this data is gathered, an informed decision should be made on what model to productionize.</p> <p>System metrics to consider:</p> <ul> <li>CPU/GPU/memory usage</li> <li>Cost per prediction</li> <li>Time taken to make a prediction</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#how-will-the-model-be-integrated-into-other-systems-and-what-impact-will-it-have","title":"How Will the Model be Integrated into Other Systems, and what Impact will it Have?","text":"<p>Machine Learning models do not exist in isolation, but rather they are part of a much larger system. These systems could be old, proprietary systems or new systems being developed as a results of the creation a new machine learning model. In both of those cases, it is important to understand where the actual model is going to fit in, what output is expected from the model and how that output is going to be used by the larger system. Additionally, it is essential to decide if the model will be used for batch and/or real-time inference as production paths might differ.</p> <p>Possible questions to assess model impact:</p> <ul> <li>Is there a human in the loop?</li> <li>How is feedback collected through the system? (for example how do we know if a prediction is wrong)</li> <li>Is there a fallback mechanism when things go wrong?</li> <li>Is the system transparent that there is a model making a prediction and what data is used to make this prediction?</li> <li>What is the cost of a wrong prediction?</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#how-will-incoming-data-quality-be-monitored","title":"How Will Incoming Data Quality be Monitored?","text":"<p>As data systems become increasingly complex in the mainstream, it is especially vital to employ data quality monitoring, alerting and rectification protocols. Following data validation best practices can prevent insidious issues from creeping into machine learning models that, at best, reduce the usefulness of the model, and at worst, introduce harm. Data validation, reduces the risk of data downtime (increasing headroom) and technical debt and supports long-term success of machine learning models and other applications that rely on the data.</p> <p>Data validation best practices include:</p> <ul> <li>Employing automated data quality testing processes at each stage of the data pipeline</li> <li>Re-routing data that fails quality tests to a separate data store for diagnosis and resolution</li> <li>Employing end-to-end data observability on data freshness, distribution, volume, schema and lineage</li> </ul> <p>Note that data validation is distinct from data drift detection. Data validation detects errors in the data (ex. a datum is outside of the expected range), while data drift detection uncovers legitimate changes in the data that are truly representative of the phenomenon being modeled (ex. user preferences change). Data validation issues should trigger re-routing and rectification, while data drift should trigger adaptation or retraining of a model.</p> <p>Resources:</p> <ul> <li>\"Data Quality Fundamentals\" by Moses et al.</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#how-will-drift-in-data-characteristics-be-monitored","title":"How Will Drift in Data Characteristics be Monitored?","text":"<p>Data drift detection uncovers legitimate changes in incoming data that are truly representative of the phenomenon being modeled,and are not erroneous (ex. user preferences change). It is imperative to understand if the new data in production will be significantly different from the data in the training phase. It is also important to check that the data distribution information can be obtained for any of the new data coming in. Drift monitoring can inform when changes are occurring and what their characteristics are (ex. abrupt vs gradual) and guide effective adaptation or retraining strategies to maintain performance.</p> <p>Possible questions to ask:</p> <ul> <li>What are some examples of drift, or deviation from the norm, that have been experience in the past or that might be expected?</li> <li>Is there a drift detection strategy in place? Does it align with expected types of changes?</li> <li>Are there warnings when anomalies in input data are occurring?</li> <li>Is there an adaptation strategy in place? Does it align with expected types of changes?</li> </ul> <p>Resources:</p> <ul> <li>\"Learning Under Concept Drift: A Review\" by Lu at al.</li> <li>Understanding dataset shift</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#how-will-performance-be-monitored","title":"How Will Performance be Monitored?","text":"<p>It is important to define how the model will be monitored when it is in production and how that data is going to be used to make decisions. For example, when will a model need retraining as the performance has degraded and how to identify what are the underlying causes of this degradation could be part of this monitoring methodology.</p> <p>Ideally, model monitoring should be done automatically. However, if this is not possible, then there should be a manual periodical check of the model performance.</p> <p>Model monitoring should lead to:</p> <ul> <li>Ability to identify changes in model performance</li> <li>Warnings when anomalies in model output are occurring</li> <li>Retraining decisions and adaptation strategy</li> </ul>"},{"location":"machine-learning/ml-model-checklist/#have-any-ethical-concerns-been-taken-into-account","title":"Have any Ethical Concerns Been Taken into Account?","text":"<p>Every ML project goes through the Responsible AI process to ensure that it upholds Microsoft's 6 Responsible AI principles.</p>"},{"location":"machine-learning/model-experimentation/","title":"Model Experimentation","text":""},{"location":"machine-learning/model-experimentation/#overview","title":"Overview","text":"<p>Machine learning model experimentation involves uncertainty around the expected model results and future operationalization. To handle this uncertainty as much as possible, we propose a semi-structured process, balancing between engineering/research best practices and rapid model/data exploration.</p>"},{"location":"machine-learning/model-experimentation/#model-experimentation-goals","title":"Model Experimentation Goals","text":"<ul> <li>Performance: Find the best performing solution</li> <li>Operationalization: Keep an eye towards production, making sure that operationalization is feasible</li> <li>Code quality Maintain code and artifacts quality</li> <li>Reproducibility: Keep research active by allowing experiment tracking and reproducibility</li> <li>Collaboration: Foster the collaboration and joint work of multiple people on the team</li> </ul>"},{"location":"machine-learning/model-experimentation/#model-experimentation-challenges","title":"Model Experimentation Challenges","text":"<ul> <li>Trial and error process: Difficult to plan and estimate durations and capacity.</li> <li>Quick and dirty: We want to fail fast and get a sense of what\u2019s working efficiently.</li> <li>Collaboration: How do we form a team-wide trial and error process and effective brainstorming.</li> <li>Code quality: How do we maintain the quality of non-production code during research.</li> <li>Operationalization: Switching between approaches might have a significant impact on operationalization (e.g. GPU/CPU, batch/online, parallel/sequential, runtime environments).</li> </ul> <p>Creating an experimentation framework which facilitates rapid experimentation, collaboration, experiment and model reproducibility, evaluation  and defined APIs, and lets each team member focus on the model development and improvement, while trusting the framework to do the rest.</p> <p>The following tools and guidelines are aimed at achieving experimentation goals as well as addressing the aforementioned challenges.</p>"},{"location":"machine-learning/model-experimentation/#tools-and-guidelines-for-successful-model-experimentation","title":"Tools and Guidelines for Successful Model Experimentation","text":"<ul> <li>Virtual environments</li> <li>Source control and folder/package structure</li> <li>Experiment tracking</li> <li>Datasets and models abstractions</li> <li>Model evaluation</li> </ul>"},{"location":"machine-learning/model-experimentation/#virtual-environments","title":"Virtual Environments","text":"<p>In languages like Python and R, it is always advised to employ virtual environments. Virtual environments facilitate reproducibility, collaboration and productization. Virtual environments allow us to be consistent across our local dev envs as well as with compute resources. These environments' configuration files can be used to build the code from source in an consistent way. For more details on why we need virtual environments visit this blog post.</p>"},{"location":"machine-learning/model-experimentation/#which-virtual-environment-framework-should-i-choose","title":"Which Virtual Environment Framework should I Choose","text":"<p>All virtual environments frameworks create isolation, some also propose dependency management and additional features. Decision on which framework to use depends on the complexity of the development environment (dependencies and other required resources) and on the ease of use of the framework.</p>"},{"location":"machine-learning/model-experimentation/#types-of-virtual-environments","title":"Types of Virtual Environments","text":"<p>In ISE, we often choose from either <code>venv</code>, <code>Conda</code> or <code>Poetry</code>, depending on the project requirements and complexity.</p> <ul> <li>venv is included in Python, is the easiest to use, but lacks more advanced features like dependency management.</li> <li>Conda is a popular package, dependency and environment management framework. It supports multiple stacks (Python, R) and multiple versions of the same environment (e.g. multiple Python versions). <code>Conda</code> maintains its own package repository, therefore some packages might not be downloaded and managed directly through <code>Conda</code>.</li> <li>Poetry is a Python dependency management system which manages dependencies in a standard way using <code>pyproject.toml</code> files and <code>lock</code> files. Similar to <code>Conda</code>, <code>Poetry</code>'s dependency resolution process is sometimes slow (see FAQ), but in cases where dependency issues are common or tricky, it provides a robust way to create reproducible and stable environments.</li> </ul>"},{"location":"machine-learning/model-experimentation/#expected-outcomes-for-virtual-environments-setup","title":"Expected Outcomes for Virtual Environments Setup","text":"<ol> <li>Documentation describing how to create the selected virtual environment and how to install dependencies.</li> <li>Environment configuration files if applicable (e.g. <code>requirements.txt</code> for <code>venv</code>, environment.yml for <code>Conda</code> or pyrpoject.toml for <code>Poetry</code>).</li> </ol>"},{"location":"machine-learning/model-experimentation/#virtual-environments-benefits","title":"Virtual Environments Benefits","text":"<ul> <li>Productization</li> <li>Collaboration</li> <li>Reproducibility</li> </ul>"},{"location":"machine-learning/model-experimentation/#source-control-and-folder-or-package-structure","title":"Source Control and Folder or Package Structure","text":"<p>Applied ML projects often contain source code, notebooks, devops scripts, documentation, scientific resources, datasets and more. We recommend coming up with an agreed folder structure to keep resources tidy. Consider deciding upon a generic folder structure for projects (e.g. which contains the folders <code>data</code>, <code>src</code>, <code>docs</code> and <code>notebooks</code>), or adopt popular structures like the CookieCutter Data Science folder structure.</p> <p>Source control should be applied to allow collaboration, versioning, code reviews, traceability and backup. In data science projects, source control should be used for code, and the storing and versioning of other  artifacts (e.g. data, scientific literature) should be decided upon depending on the scenario.</p>"},{"location":"machine-learning/model-experimentation/#folder-structure-and-source-control-expected-outcomes","title":"Folder Structure and Source Control Expected Outcomes","text":"<ul> <li>Defined folder structure for all users to use, pushed to the repo.</li> <li>.gitignore file determining which folders should be synced with <code>git</code> and which should be kept locally. For example, this one.</li> <li>Determine how notebooks are stored and versioned (e.g. strip output from Jupyter notebooks)</li> </ul>"},{"location":"machine-learning/model-experimentation/#source-control-and-folder-structure-benefits","title":"Source Control and Folder Structure Benefits","text":"<ul> <li>Collaboration</li> <li>Reproducibility</li> <li>Code quality</li> </ul>"},{"location":"machine-learning/model-experimentation/#experiment-tracking","title":"Experiment Tracking","text":"<p>Experiment tracking tools allow data scientists and researchers to keep track of previous experiments for better understanding of the experimentation process and for the reproducibility of experiments or models.</p>"},{"location":"machine-learning/model-experimentation/#types-of-experiment-tracking-frameworks","title":"Types of Experiment Tracking Frameworks","text":"<p>Experiment tracking frameworks differ by the set of features they provide for collecting experiment metadata, and comparing and analyzing experiments. In ISE, we mainly use MLFlow on Databricks or Azure ML Experimentation. Note that some experiment tracking frameworks require a deployment, while others are SaaS.</p>"},{"location":"machine-learning/model-experimentation/#experiment-tracking-outcomes","title":"Experiment Tracking Outcomes","text":"<ol> <li>Decide on an experiment tracking framework</li> <li>Ensure it is accessible to all users</li> <li>Document set-up on local environments</li> <li>Define datasets and evaluation in a way which will allow the comparison of all experiments. Consistency across datasets and evaluation is paramount for experiment comparison.</li> <li>Ensure full reproducibility by assuring that all required details are tracked (i.e. dataset names and versions, parameters, code, environment)</li> </ol>"},{"location":"machine-learning/model-experimentation/#experiment-tracking-benefits","title":"Experiment Tracking Benefits","text":"<ul> <li>Model performance</li> <li>Reproducibility</li> <li>Collaboration</li> <li>Code quality</li> </ul>"},{"location":"machine-learning/model-experimentation/#datasets-and-models-abstractions","title":"Datasets and Models Abstractions","text":"<p>By creating abstractions to building blocks (e.g., datasets, models, evaluators), we allow the easy introduction of new logic into the experimentation pipeline while keeping the agreed upon experimentation flow intact.</p> <p>These abstractions can be created using different mechanisms. For example, we can use Object-Oriented Programming (OOP) solutions like abstract classes:</p> <ul> <li>An example from scikit-learn describing the creation of new estimators compatible with the API.</li> <li>An example from PyTorch on extending the abstract <code>Dataset</code> class.</li> </ul>"},{"location":"machine-learning/model-experimentation/#abstraction-outcomes","title":"Abstraction Outcomes","text":"<ol> <li>Different building blocks have defined APIs allowing them to be replaced or extended.</li> <li>Replacing building blocks does not break the original experimentation flow.</li> <li>Mock building blocks are used for unit tests</li> <li>APIs/mocks are shared with the engineering teams for integration with other modules.</li> </ol>"},{"location":"machine-learning/model-experimentation/#abstraction-benefits","title":"Abstraction Benefits","text":"<ul> <li>Collaboration</li> <li>Code quality</li> <li>Reproducibility</li> <li>Operationalization</li> <li>Model performance</li> </ul>"},{"location":"machine-learning/model-experimentation/#model-evaluation","title":"Model Evaluation","text":"<p>When deciding on the evaluation of the ML model/process, consider the following checklist:</p> <ul> <li> Evaluation logic is approved by all stakeholders.</li> <li> Relationship between evaluation logic and business KPIs is analyzed and decided.</li> <li> Evaluation flow is applicable for all present and future models (i.e. does not assume some prediction structure or method-specific process).</li> <li> Evaluation code is unit-tested and reviewed by all team members.</li> <li> Evaluation flow facilitates further results and error analysis.</li> </ul>"},{"location":"machine-learning/model-experimentation/#evaluation-development-process-outcomes","title":"Evaluation Development Process Outcomes","text":"<ol> <li>Evaluation strategy is agreed upon all stakeholders</li> <li>Research and discussion on various evaluation methods and metrics is documented.</li> <li>The code holding the logic and data structures for evaluation is reviewed and tested.</li> <li>Documentation on how to apply evaluation is reviewed.</li> <li>Performance metrics are automatically tracked into the experiment tracker.</li> </ol>"},{"location":"machine-learning/model-experimentation/#evaluation-development-process-benefits","title":"Evaluation Development Process Benefits","text":"<ul> <li>Model performance</li> <li>Code quality</li> <li>Collaboration</li> <li>Reproducibility</li> </ul>"},{"location":"machine-learning/profiling-ml-and-mlops-code/","title":"Profiling Machine Learning and MLOps Code","text":"<p>Data Science projects, especially the ones that involve Deep Learning techniques, usually are resource intensive. One model training iteration might be multiple hours long. Although large data volumes processing genuinely takes time, minor bugs and suboptimal implementation of some functional pieces might cause extra resources consumption.</p> <p>Profiling can be used to identify performance bottlenecks and see which functions are the costliest in the application code. Based on the outputs of the profiler, one can focus on largest and easiest-to-resolve inefficiencies and therefore achieve better code performance. Although profiling follows the same principles of any other software project, the purpose of this document is to provide profiling samples for the most common scenarios in MLOps/Data Science projects.</p> <p>Below are some common scenarios in MLOps/Data Science projects, along with suggestions on how to profile them.</p> <ul> <li>Generic Python profiling</li> <li>PyTorch model training profiling</li> <li>Azure Machine Learning pipeline profiling</li> </ul>"},{"location":"machine-learning/profiling-ml-and-mlops-code/#generic-python-profiling","title":"Generic Python Profiling","text":"<p>Usually an MLOps/Data Science solution contains plain Python code serving different purposes (e.g. data processing) along with specialized model training code. Although many Machine Learning frameworks provide their own profiler, sometimes it is also useful to profile the whole solution.</p> <p>There are two types of profilers: deterministic (all events are tracked, e.g. cProfile) and statistical (sampling with regular intervals, e.g., py-spy). The sample below shows an example of a deterministic profiler.</p> <p>There are many options of generic deterministic Python code profiling. One of the default options for profiling used to be a built-in cProfile profiler. Using cProfile one can easily profile either a Python script or just a chunk of code. This profiling tool produces a file that can be either visualized using open source tools or analyzed using <code>stats.Stats</code> class. The latter option requires setting up filtering and sorting parameters for better analysis experience.</p> <p>Below you can find an example of using cProfile to profile a chunk of code.</p> <pre><code>import cProfile\n\n# Start profiling\nprofiler = cProfile.Profile()\nprofiler.enable()\n\n# -- YOUR CODE GOES HERE ---\n\n# Stop profiling\nprofiler.disable()\n\n# Write profiler results to an html file\nprofiler.dump_stats(\"profiler_results.prof\")\n</code></pre> <p>You can also run cProfile outside of the Python script using the following command:</p> <pre><code>python -m cProfile [-o output_file] [-s sort_order] (-m module | myscript.py)\n</code></pre> <p>Note: one epoch of model training is usually enough for profiling. There's no need to run more epochs and produce additional cost.</p> <p>Refer to The Python Profilers for further details.</p>"},{"location":"machine-learning/profiling-ml-and-mlops-code/#pytorch-model-training-profiling","title":"PyTorch Model Training Profiling","text":"<p>PyTorch 1.8 includes an updated PyTorch profiler that is supplied together with the PyTorch distribution and doesn't require any additional installation. Using PyTorch profiler one can record CPU side operations as well as CUDA kernel launches on GPU side. The profiler can visualize analysis results using TensorBoard plugin as well as provide suggestions on bottlenecks and potential code improvements.</p> <pre><code> with torch.profiler.profile(\n    # Limit number of training steps included in profiling\n    schedule=torch.profiler.schedule(wait=1, warmup=1, active=3, repeat=2),\n    # Automatically saves profiling results to disk\n    on_trace_ready=torch.profiler.tensorboard_trace_handler,\n    with_stack=True\n) as profiler:\n    for step, data in enumerate(trainloader, 0):\n        # -- TRAINING STEP CODE GOES HERE ---\n        profiler.step()\n</code></pre> <p>The <code>tensorboard_trace_handler</code> can be used to generate result files for TensorBoard. Those can be visualized by installing TensorBoard. plugin and running TensorBoard on your log directory.</p> <pre><code>pip install torch_tb_profiler\ntensorboard --logdir=&lt;LOG_DIR_PATH&gt;\n# Navigate to `http://localhost:6006/#pytorch_profiler`\n</code></pre> <p>Note: make sure to provide the right parameters to the <code>torch.profiler.schedule</code>. Usually you would need several steps of training to be profiled rather than the whole epoch.</p> <p>More information on PyTorch profiler:</p> <ul> <li>PyTorch Profiler Recipe</li> <li>Introducing PyTorch Profiler - the new and improved performance tool</li> </ul>"},{"location":"machine-learning/profiling-ml-and-mlops-code/#azure-machine-learning-pipeline-profiling","title":"Azure Machine Learning Pipeline Profiling","text":"<p>In our projects we often use Azure Machine Learning pipelines to train Machine Learning models. Most of the profilers can also be used in conjunction with Azure Machine Learning. For a profiler to be used with Azure Machine Learning, it should meet the following criteria:</p> <ul> <li>Turning the profiler on/off can be achieved by passing a parameter to the script ran by Azure Machine Learning</li> <li>The profiler produces a file as an output</li> </ul> <p>In general, a recipe for using profilers with Azure Machine Learning is the following:</p> <ol> <li>(Optional) If you're using profiling with an Azure Machine Learning pipeline, you might want to add <code>--profile</code> Boolean flag as a pipeline parameter</li> <li>Use one of the profilers described above or any other profiler that can produce a file as an output</li> <li> <p>Inside of your Python script, create step output folder, e.g.:</p> <pre><code>output_dir = \"./outputs/profiler_results\"\nos.makedirs(output_dir, exist_ok=True)\n</code></pre> </li> <li> <p>Run your training pipeline</p> </li> <li>Once the pipeline is completed, navigate to Azure ML portal and open details of the step that contains training code. The results can be found in the <code>Outputs+logs</code> tab, under <code>outputs/profiler_results</code> folder.</li> <li>You might want to download the results and visualize it locally.</li> </ol> <p>Note: it's not recommended to run profilers simultaneously. Profiles also consume resources, therefore a simultaneous run might significantly affect the results.</p>"},{"location":"machine-learning/proposed-ml-process/","title":"Proposed ML Process","text":""},{"location":"machine-learning/proposed-ml-process/#introduction","title":"Introduction","text":"<p>The objective of this document is to provide guidance to produce machine learning (ML) applications that are based on code, data and models that can be reproduced and reliably released to production environments. When developing ML applications, we consider the following approaches:</p> <ul> <li> <p>Best practices in ML engineering:</p> <ul> <li>The ML application development should use engineering fundamentals to ensure high quality software deliverables.</li> <li>The ML application should be reliability released into production, leveraging automation as much as possible.</li> <li>The ML application can be deployed into production at any time. This makes the decision about when to release it a business decision rather than a technical one.</li> </ul> </li> </ul> <ul> <li> <p>Best practices in ML research:</p> <ul> <li>All artifacts, specifically data, code and ML models, should be versioned and managed using standard tools and workflows, in order to facilitate continuous research and development.</li> <li>While the model outputs can be non-deterministic and hard to reproduce, the process of releasing ML software into production should be reproducible.</li> <li>Responsible AI aspects are carefully analyzed and addressed.</li> </ul> </li> </ul> <ul> <li> <p>Cross-functional team:</p> <ul> <li>A cross-functional team consisting of different skill sets in data science, data engineering, development, operations, and industry domain specialists is required.</li> </ul> </li> </ul>"},{"location":"machine-learning/proposed-ml-process/#ml-process","title":"ML process","text":"<p>The proposed ML development process consists of:</p> <ol> <li>Data and problem understanding</li> <li>Responsible AI assessment</li> <li>Feasibility study</li> <li>Baseline model experimentation</li> <li>Model evaluation and experimentation</li> <li>Model operationalization     * Unit and Integration testing     * Deployment     * Monitoring and Observability</li> </ol>"},{"location":"machine-learning/proposed-ml-process/#version-control","title":"Version Control","text":"<ul> <li>During all stages of the process, it is suggested that artifacts should be version-controlled. Typically, the process is iterative and versioned artifacts can assist in traceability and reviewing.</li> </ul>"},{"location":"machine-learning/proposed-ml-process/#understanding-the-problem","title":"Understanding the Problem","text":"<ul> <li>Define the business problem for the ML project:<ul> <li>Agree on the success criteria with the customer.</li> <li>Identify potential data sources and determine the availability of these sources.</li> <li>Define performance evaluation metrics on ground truth data</li> </ul> </li> <li>Conduct a Responsible AI assessment to ensure development and deployment of the ML solution in a responsible manner.</li> <li>Conduct a feasibility study to assess whether the business problem is feasible to solve satisfactorily using ML with the available data. The objective of the feasibility study is to mitigate potential over-investment by ensuring sufficient evidence that ML is possible and would be the best solution. The study also provides initial indications of what the ML solution should look like. This ensures quality solutions supported by thorough consideration and evidence. Refer to feasibility study.</li> <li>Exploratory data analysis is performed and discussed with the team</li> </ul> <ul> <li> <p>Typical output:</p> <ul> <li>Data exploration source code (Jupyter notebooks/scripts) and slides/docs</li> <li>Initial ML model code (Jupyter notebook or scripts)</li> <li>Initial solution architecture with initial data engineering requirements</li> <li>Data dictionary (if not yet available)</li> <li>List of assumptions</li> </ul> </li> </ul>"},{"location":"machine-learning/proposed-ml-process/#baseline-model-experimentation","title":"Baseline Model Experimentation","text":"<ul> <li>Data preparation: creating data source connectors, determining storage services to be used and potential versioning of raw datasets.</li> <li>Feature engineering: create new features from raw source data to increase the predictive power of the learning algorithm. The features should capture additional information that is not apparent in the original feature set.</li> <li>Split data into training, validation and test sets: creating training, validation, and test datasets with ground truth to develop ML models. This would entail joining or merging various feature engineered datasets. The training dataset is used to train the model to find the patterns between its features and labels (ground truth). The validation dataset is used to assess the model architecture, and the test data is used to confirm the prediction quality of the model.</li> <li>Initial code to create access data sources, transform raw data into features and model training as well as scoring.</li> <li>During this phase, experiment code (Jupyter notebooks or scripts) and accompanying utility code should be version-controlled using tools such as ADO (Azure DevOps).</li> </ul> <ul> <li>Typical output: Rough Jupyter notebooks or scripts in Python or R, initial results from baseline model.</li> </ul> <p>For more information on experimentation, refer to the experimentation section.</p>"},{"location":"machine-learning/proposed-ml-process/#model-evaluation","title":"Model Evaluation","text":"<ul> <li>Compare the effectiveness of different algorithms on the given problem.</li> </ul> <ul> <li>Typical output:<ul> <li>Evaluation flow is fully set up.</li> <li>Reproducible experiments for the different approaches experimented with.</li> </ul> </li> </ul>"},{"location":"machine-learning/proposed-ml-process/#model-operationalization","title":"Model Operationalization","text":"<ul> <li>Taking \"experimental\" code and preparing it, so it can be deployed. This includes data pre-processing, featurization code, training model code (if required to be trained using CI/CD) and model inference code.</li> </ul> <ul> <li>Typical output:<ul> <li>Production-grade code (Preferably in the form of a package) for:<ul> <li>Data preprocessing / post processing</li> <li>Serving a model</li> <li>Training a model</li> </ul> </li> <li>CI/CD scripts.</li> <li>Reproducibility steps for the model in production.</li> <li>See more in the ML model checklist.</li> </ul> </li> </ul>"},{"location":"machine-learning/proposed-ml-process/#unit-and-integration-testing","title":"Unit and Integration Testing","text":"<ul> <li>Ensuring that production code behaves in the way we expect it to, and that its results match those we saw during the Model Evaluation and Experimentation phases.</li> <li>Refer to ML testing post for further details.</li> <li>Typical output: Test suite with unit and end-to-end tests is created and completes successfully.</li> </ul>"},{"location":"machine-learning/proposed-ml-process/#deployment","title":"Deployment","text":"<ul> <li>Responsible AI considerations such as bias and fairness analysis. Additionally, explainability/interpretability of the model should also be considered.</li> <li>It is recommended for a human-in-the-loop to verify the model and manually approve deployment to production.</li> <li>Getting the model into production where it can start adding value by serving predictions. Typical artifacts are APIs for accessing the model and integrating the model to the solution architecture.</li> <li>Additionally, certain scenarios may require training the model periodically in production.</li> <li>Reproducibility steps of the production model are available.</li> <li>Typical output: model readiness checklist is completed.</li> </ul>"},{"location":"machine-learning/proposed-ml-process/#monitoring-and-observability","title":"Monitoring and Observability","text":"<ul> <li>This is the final phase, where we ensure our model is doing what we expect it to in production.</li> <li>Read more about ML observability.</li> <li>Read more about Azure ML's offerings around ML models production monitoring.</li> <li>It is recommended to consider incorporating data drift monitoring process in the production solution. This will assist in detecting potential changes in new datasets presented for inference that may significantly impact model performance. For more info on detecting data drift with Azure ML see the Microsoft docs article on how to monitor datasets.</li> <li>Typical output: Logging and monitoring scripts and tools set up, permissions for users to access monitoring tools.</li> </ul>"},{"location":"machine-learning/responsible-ai/","title":"Responsible AI in ISE","text":""},{"location":"machine-learning/responsible-ai/#microsofts-responsible-ai-principles","title":"Microsoft's Responsible AI principles","text":"<p>Every ML project in ISE goes through a Responsible AI (RAI) assessment to ensure that it upholds Microsoft's 6 Responsible AI principles:</p> <ul> <li>Fairness</li> <li>Reliability &amp; Safety</li> <li>Privacy &amp; Security</li> <li>Inclusiveness</li> <li>Transparency</li> <li>Accountability</li> </ul> <p>Every project goes through the RAI process, whether we are building a new ML model from scratch, or putting an existing model in production.</p>"},{"location":"machine-learning/responsible-ai/#ises-responsible-ai-process","title":"ISE's Responsible AI process","text":"<p>The process begins as soon as we start a prospective project. We start to complete a Responsible AI review document, and an impact assessment, which provides a structured way to explore topics such as:</p> <ul> <li>Can the problem be addressed with a non-technical (e.g. social) solution?</li> <li>Can the problem be solved without AI? Would simpler technology suffice?</li> <li>Will the team have access to domain experts (e.g. doctors, refugees) in the field where the AI is applicable?</li> <li>Who are the stakeholders in this project? Who does the AI impact? Are there any vulnerable groups affected?</li> <li>What are the possible benefits and harms to each stakeholder?</li> <li>How can the technology be misused, and what can go wrong?</li> <li>Has the team analyzed the input data properly to make sure that the training data is suitable for machine learning?</li> <li>Is the training data an accurate representation of data that will be used as input in production?</li> <li>Is there a good representation of all users?</li> <li>Is there a fall-back mechanism (a human in the loop, or a way to revert decisions based on the model)?</li> <li>Does data used by the model for training or scoring contain PII? What measures have been taken to remove sensitive data?</li> <li>Does the model impact consequential decisions, like blocking people from getting jobs, loans, health care etc. or in the cases where it may, have appropriate ethical considerations been discussed?</li> <li>Have measures for re-training been considered?</li> <li>How can we address any concerns that arise, and how can we mitigate risk?</li> </ul> <p>At this point we research available tools and resources, such as InterpretML or Fairlearn, that we may use on the project. We may change the project scope or re-define the ML problem definition if necessary.</p> <p>The Responsible AI review documents remain living documents that we re-visit and update throughout project development, through the feasibility study, as the model is developed and prepared for production, and new information unfolds. The documents can be used and expanded once the model is deployed, and monitored in production.</p>"},{"location":"machine-learning/testing-data-science-and-mlops-code/","title":"Testing Data Science and MLOps Code","text":"<p>The purpose of this document is to provide samples of tests for the most common operations in MLOps/Data Science projects. Testing the code used for MLOps or data science projects follows the same principles of any other software project.</p> <p>Some scenarios might seem different or more difficult to test. The best way to approach this is to always have a test design session, where the focus is on the input/outputs, exceptions and testing the behavior of data transformations. Designing the tests first makes it easier to test as it forces a more modular style, where each function has one purpose, and extracting common functionality functions and modules.</p> <p>Below are some common operations in MLOps or Data Science projects, along with suggestions on how to test them.</p> <ul> <li>Saving and loading data</li> <li>Transforming data</li> <li>Model load or predict</li> <li>Data validation</li> <li>Model testing</li> </ul>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#saving-and-loading-data","title":"Saving and Loading Data","text":"<p>Reading and writing to csv, reading images or loading audio files are common scenarios encountered in MLOps projects.</p>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#example-verify-that-a-load-function-calls-read_csv-if-the-file-exists","title":"Example: Verify that a Load Function Calls read_csv if the File Exists","text":"<p><code>utils.py</code></p> <pre><code>def load_data(filename: str) -&gt; pd.DataFrame:\n    if os.path.isfile(filename):\n        df = pd.read_csv(filename, index_col='ID')\n        return df\n    return None\n</code></pre> <p>There's no need to test the <code>read_csv</code> function, or the <code>isfile</code> functions, we can leave testing them to the pandas and os developers.</p> <p>The only thing we need to test here is the logic in this function, i.e. that <code>load_data</code> loads the file if the file exists with the right index column, and doesn't load the file if it doesn't exist, and that it returns the expected results.</p> <p>One way to do this would be to provide a sample file and call the function, and verify that the output is None or a DataFrame. This requires separate files to be present, or not present, for the tests to run. This can cause the same test to run on one machine and then fail on a build server which is not a desired behavior.</p> <p>A much better way is to mock calls to <code>isfile</code>, and <code>read_csv</code>. Instead of calling the real function, we will return a predefined return value, or call a stub that doesn't have any side effects. This way no files are needed in the repository to execute the test, and the test will always work the same, independent of what machine it runs on.</p> <p>Note: Below we mock the specific os and pd functions referenced in the utils file, any others are left unaffected and would run as normal.</p> <p><code>test_utils.py</code></p> <pre><code>import utils\nfrom mock import patch\n\n\n@patch('utils.os.path.isfile')\n@patch('utils.pd.read_csv')\ndef test_load_data_calls_read_csv_if_exists(mock_isfile, mock_read_csv):\n    # arrange\n    # always return true for isfile\n    utils.os.path.isfile.return_value = True\n    filename = 'file.csv'\n\n    # act\n    _ = utils.load_data(filename)\n\n    # assert\n    # check that read_csv is called with the correct parameters\n    utils.pd.read_csv.assert_called_once_with(filename, index_col='ID')\n</code></pre> <p>Similarly, we can verify that it's called 0 or multiple times. In the example below where we verify that it's not called if the file doesn't exist</p> <pre><code>@patch('utils.os.path.isfile')\n@patch('utils.pd.read_csv')\ndef test_load_data_does_not_call_read_csv_if_not_exists(mock_isfile, mock_read_csv):\n    # arrange\n    # file doesn't exist\n    utils.os.path.isfile.return_value = False\n    filename = 'file.csv'\n\n    # act\n    _ = utils.load_data(filename)\n\n    # assert\n    # check that read_csv is not called\n    assert utils.pd.read_csv.call_count == 0\n</code></pre>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#example-using-the-same-sample-data-for-multiple-tests","title":"Example: Using the Same Sample Data for Multiple Tests","text":"<p>If more than one test will use the same sample data, fixtures are a good way to reuse this sample data. The sample data can be the contents of a json file, or a csv, or a DataFrame, or even an image.</p> <p>Note: The sample data is still hard coded if possible, and does not need to be large. Only add as much sample data as required for the tests to make the tests readable.</p> <p>Use the fixture to return the sample data, and add this as a parameter to the tests where you want to use the sample data.</p> <pre><code>import pytest\n\n\n@pytest.fixture\ndef house_features_json():\n  return {'area': 25, 'price': 2500, 'rooms': np.nan}\n\ndef test_clean_features_cleans_nan_values(house_features_json):\n  cleaned_features = clean_features(house_features_json)\n  assert cleaned_features['rooms'] == 0\n\ndef test_extract_features_extracts_price_per_area(house_features_json):\n  extracted_features = extract_features(house_features_json)\n  assert extracted_features['price_per_area'] == 100\n</code></pre>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#transforming-data","title":"Transforming Data","text":"<p>For cleaning and transforming data, test fixed input and output, but try to limit each test to one verification.</p> <p>For example, create one test to verify the output shape of the data.</p> <pre><code>def test_resize_image_generates_the_correct_size():\n  # Arrange\n  original_image = np.ones((10, 5, 2, 3))\n\n  # act\n  resized_image = utils.resize_image(original_image, 100, 100)\n\n  # assert\n  resized_image.shape[:2] = (100, 100)\n</code></pre> <p>and one to verify that any padding is made appropriately</p> <pre><code>def test_resize_image_pads_correctly():\n  # Arrange\n  original_image = np.ones((10, 5, 2, 3))\n\n  # Act\n  resized_image = utils.resize_image(original_image, 100, 100)\n\n  # Assert\n  assert resized_image[0][0][0][0] == 0\n  assert resized_image[0][0][2][0] == 1\n</code></pre> <p>To test different inputs and expected outputs automatically, use parametrize</p> <pre><code>@pytest.mark.parametrize('orig_height, orig_width, expected_height, expected_width',\n                         [\n                             # smaller than target\n                             (10, 10, 20, 20),\n                             # larger than target\n                             (20, 20, 10, 10),\n                             # wider than target\n                             (10, 20, 10, 10)\n                         ])\ndef test_resize_image_generates_the_correct_size(orig_height, orig_width, expected_height, expected_width):\n  # Arrange\n  original_image = np.ones((orig_height, orig_width, 2, 3))\n\n  # act\n  resized_image = utils.resize_image(original_image, expected_height, expected_width)\n\n  # assert\n  resized_image.shape[:2] = (expected_height, expected_width)\n</code></pre>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#model-load-or-predict","title":"Model Load or Predict","text":"<p>When unit testing we should mock model load and model predictions similarly to mocking file access.</p> <p>There may be cases when you want to load your model to do smoke tests, or integration tests.</p> <p>Since these will often take a bit longer to run it's important to be able to separate them from unit tests so that the developers on the team can still run unit tests as part of their test driven development.</p> <p>One way to do this is using marks</p> <pre><code>@pytest.mark.longrunning\ndef test_integration_between_two_systems():\n    # this might take a while\n</code></pre> <p>Run all tests that are not marked <code>longrunning</code></p> <pre><code>pytest -v -m \"not longrunning\"\n</code></pre>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#basic-unit-tests-for-ml-models","title":"Basic Unit Tests for ML Models","text":"<p>ML unit tests are not intended to check the accuracy or performance of a model. Unit tests for an ML model is for code quality checks - for example:</p> <ul> <li>Does the model accept the correct inputs and produce the correctly shaped outputs?</li> <li>Do the weights of the model update when running <code>fit</code>?</li> </ul> <p>To do this, the ML model tests do not strictly follow best practices of standard Unit tests - not all outside calls are mocked. These tests are much closer to a narrow integration test. However, the benefits of having simple tests for the ML model help to stop a poorly configured model from spending hours in training, while still producing poor results.</p> <p>Examples of how to implement these tests (for Deep Learning models) include:</p> <ul> <li>Build a model and compare the shape of input layers to that of an example source of data. Then, compare the output layer shape to the expected output.</li> <li>Initialize the model and record the weights of each layer. Then, run a single epoch of training on a dummy data set, and compare the weights of the \"trained model\" - only check if the values have changed.</li> <li>Train the model on a dummy dataset for a single epoch, and then validate with dummy data - only validate that the prediction is formatted correctly, this model will not be accurate.</li> </ul>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#data-validation","title":"Data Validation","text":"<p>An important part of the unit testing is to include test cases for data validation. For example, no data supplied, images that are not in the expected format, data containing null values or outliers to make sure that the data processing pipeline is robust.</p>"},{"location":"machine-learning/testing-data-science-and-mlops-code/#model-testing","title":"Model Testing","text":"<p>Apart from unit testing code, we can also test, debug and validate our models in different ways during the training process</p> <p>Some options to consider at this stage:</p> <ul> <li>Adversarial and Boundary tests to increase robustness</li> <li>Verifying accuracy for under-represented classes</li> </ul>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/","title":"TPM considerations for Machine Learning projects","text":"<p>In this document, we explore some of the Program Management considerations for Machine Learning (ML) projects and suggest recommendations for Technical Program Managers (TPM) to effectively work with Data and Applied Machine Learning engineering teams.</p>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#determine-the-need-for-machine-learning-in-the-project","title":"Determine the Need for Machine Learning in the Project","text":"<p>In Artificial Intelligence (AI) projects, the ML component is generally a part of an overall business problem and NOT the problem itself. Determine the overall business problem first and then evaluate if ML can help address a part of the problem space. Few considerations for identifying the right fit for the project:</p> <ul> <li>Engage experts in human experience and employ techniques such as Design Thinking and Problem Formulation to understand the customer needs and human behavior first. Identify the right stakeholders from both business and technical leadership and invite them to these workshops. The outcome should be end-user scenarios and personas to determine the real needs of the users.</li> </ul> <ul> <li>Focus on System Design principles to identify the architectural components, entities, interfaces, constraints. Ask the right questions early and explore design alternatives with the engineering team.</li> </ul> <ul> <li>Think hard about the costs of ML and whether we are solving a repetitive problem at scale. Many a times, customer problems can be solved with data analytics, dashboards, or rule-based algorithms as the first phase of the project.</li> </ul>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#set-expectations-for-high-ambiguity-in-ml-components","title":"Set Expectations for High Ambiguity in ML components","text":"<p>ML projects can be plagued with a phenomenon we can call as the \"Death by Unknowns\". Unlike software engineering projects, ML focused projects can result in quick success early (aka sudden decrease in error rate), but this may flatten eventually. Few things to consider:</p> <ul> <li>Set clear expectations: Identify the performance metrics and discuss on a \"good enough\" prediction rate that will bring value to the business. An 80% \"good enough\" rate may save business costs and increase productivity but if going from 80 to 95% would require unimaginable cost and effort. Is it worth it? Can it be a progressive road map?</li> </ul> <ul> <li>Create a smaller team and undertake a feasibility analysis through techniques like EDA (Exploratory Data Analysis). A feasibility study is much cheaper to evaluate data quality, customer constraints and model feasibility. It allows a TPM to better understand customer use cases and current environment and can act as a fail-fast mechanism. Note that feasibility should be shorter (in weeks) else it misses the point of saving costs.</li> </ul> <ul> <li>As in any project, there will be new needs (additional data sources, technical constraints, hiring data labelers, business users time etc.). Incorporate Agile techniques to fail fast and minimize cost and schedule surprises.</li> </ul>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#notebooks-ml-production","title":"Notebooks != ML Production","text":"<p>Notebooks are a great way to kick start Data Analytics and Applied Machine Learning efforts, however for a production releases, additional constraints should be considered:</p> <ul> <li>Understand the end-end flow of data management, how data will be made available (ingestion flows), what's the frequency, storage, retention of data. Plan user stories and design spikes around these flows to ensure a robust ML pipeline is developed.</li> </ul> <ul> <li>Engineering team should follow the same rigor in building ML projects as in any software engineering project. We at ISE (Industry Solutions Engineering) have built a good set of resources from our learnings in our ISE Engineering Playbook.</li> <li>Think about the how the model will be deployed, for example, are there technical constraints due to an edge device, or network constraints that will prevent updating the model. Understanding of the environment is critical, refer to the Model Production Checklist as a reference to determine model deployment choices.</li> </ul> <ul> <li>ML Focussed projects are not a \"one-shot\" release solution, they need to be nurtured, evolved, and improved over time. Plan for a continuous improvement lifecycle, the initial phases can be model feasibility and validation to get the good enough prediction rate, the later phases can be then be scaling and improving the models through feedback loops and fresh data sets.</li> </ul>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#garbage-data-in-garbage-model-out","title":"Garbage Data In -&gt; Garbage Model Out","text":"<p>Data quality is a major factor in affecting model performance and production roll-out, consider the following:</p> <ul> <li>Conduct a data exploration workshop and generate a report on data quality that includes missing values, duplicates, unlabeled data, expired or not valid data, incomplete data (e.g., only having male representation in a people dataset).</li> </ul> <ul> <li>Identify data source reliability to ensure data is coming from a production source. (e.g., are the images from a production or industrial camera or taken from an iPhone/Android phone.)</li> </ul> <ul> <li>Identify data acquisition constraints: Determine how the data is being obtained and the constraints around it. Some example may include legal, contractual, Privacy, regulation, ethics constraints. These can significantly slow down production roll out if not captured in the early phases of the project.</li> </ul> <ul> <li>Determine data volumes: Identify if we have enough data for sampling the required business use case and how will the data be improved over time. The thumb rule here is that data should be enough for generalization to avoid overfitting.</li> </ul>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#plan-for-unique-roles-in-ai-projects","title":"Plan for Unique Roles in AI projects","text":"<p>An ML Project has multiple stages, and each stage may require additional roles. For example, Design Research &amp; Designers for Human Experience, Data Engineer for Data Collection, Feature Engineering, a Data Labeler for labeling structured data, engineers for MLOps and model deployment and the list can go on. As a TPM, factor in having these resources available at the right time to avoid any schedule risks.</p>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#feature-engineering-and-hyperparameter-tuning","title":"Feature Engineering and Hyperparameter Tuning","text":"<p>Feature Engineering enables the transformation of data so that it becomes usable for an algorithm. Creating the right features is an art and may require experimentation as well as domain expertise. Allocate time for domain experts to help with improving and identifying the best features. For example, for a natural language processing engine for text extraction of financial documents, we may involve financial researchers and run a relevance judgment exercise and provide a feedback loop to evaluate model performance.</p>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#responsible-ai-considerations","title":"Responsible AI Considerations","text":"<p>Bias in machine learning could be the number one issue of a model not performing to its intended needs. Plan to incorporate Responsible AI principles from Day 1 to ensure fairness, security, privacy and transparency of the models.  For example, for a person recognition algorithm, if the data source is only feeding a specific skin type, then production scenarios may not provide good results.</p>"},{"location":"machine-learning/tpm-considerations-for-ml-projects/#pm-fundamentals","title":"PM Fundamentals","text":"<p>Core to a TPM role are the fundamentals that include bringing clarity to the team, design thinking, driving the team to the right technical decisions, managing risk, managing stakeholders, backlog management, project management. These are a TPM superpowers. A TPM can complement the machine learning team by ensuring the problem and customer needs are understood, a wholistic system design is evaluated, the stakeholder expectations and driving customer objectives. Here are some references that may help:</p> <ul> <li>The T in a TPM</li> <li>The TPM Don't M*ck up framework</li> <li>The mind of a TPM</li> <li>ML Learning Journey for a TPM</li> </ul>"},{"location":"non-functional-requirements/accessibility/","title":"Accessibility","text":"<p>Accessibility is a critical component of any successful project and ensures the solutions we build are usable and enjoyed by as many people as possible. While meeting accessibility compliance standards is required, accessibility is much broader than compliance alone. Accessibility is about using techniques like inclusive design to infuse different perspectives and the full range of human diversity into the products we build. By incorporating accessibility into your project from the initial envisioning through MVP and beyond, you are promoting a more inclusive environment for your team and helping close the \"Disability Divide\" that exists for many people living with disabilities.</p>"},{"location":"non-functional-requirements/accessibility/#getting-started","title":"Getting Started","text":"<p>If you are new to accessibility or are looking for an overview of accessibility fundamentals, Microsoft Learn offers a great training course that covers a broad range of topics from creating accessible content in Office to designing accessibility features in your own apps. You can learn more about the course or get started at Microsoft Learn: Accessibility Fundamentals.</p>"},{"location":"non-functional-requirements/accessibility/#inclusive-design","title":"Inclusive Design","text":"<p>Inclusive design is a methodology that embraces the full range of human diversity as a resource to help build better products and services. Inclusive design compliments accessibility going beyond accessibility compliance standards to ensure products are usable and enjoyed by all people. By leveraging the inclusive design methodology early in a project, you can expect a more inclusive and better solution for everyone. The Microsoft Inclusive Design website offers a variety of resources for incorporating inclusive design in your projects including inclusive design activities that can be used in envisioning and architecture design sessions.</p> <p>The Microsoft Inclusive Design methodology includes the following principles:</p>"},{"location":"non-functional-requirements/accessibility/#recognize-exclusion","title":"Recognize Exclusion","text":"<p>Designing for inclusivity not only opens up our products and services to more people, it also reflects how people really are. All humans grow and adapt to the world around them and we want our designs to reflect that.</p>"},{"location":"non-functional-requirements/accessibility/#solve-for-one-extend-to-many","title":"Solve for One, Extend to Many","text":"<p>Everyone has abilities, and limits to those abilities. Designing for people with permanent disabilities actually results in designs that benefit people universally. Constraints are a beautiful thing.</p>"},{"location":"non-functional-requirements/accessibility/#learn-from-diversity","title":"Learn from Diversity","text":"<p>Human beings are the real experts in adapting to diversity. Inclusive design puts people in the center from the very start of the process, and those fresh, diverse perspectives are the key to true insight.</p>"},{"location":"non-functional-requirements/accessibility/#tools","title":"Tools","text":""},{"location":"non-functional-requirements/accessibility/#accessibility-insights","title":"Accessibility Insights","text":"<p>Accessibility Insights is a free, open-source solution for identifying accessibility issues in Windows, Android, and web applications. Accessibility Insights can identify a broad range of accessibility issues including problems with missing image alt tags, heading organization, tab order, color contrast, and many more. In addition, you can use Accessibility Insights to simulate color blindness to ensure your user interface is accessible to those that experience some form of color blindness. You can download Accessibility Insights here: https://accessibilityinsights.io/downloads/</p>"},{"location":"non-functional-requirements/accessibility/#accessibility-linter","title":"Accessibility Linter","text":"<p>Deque Systems are web accessibility experts that provide accessibility training and tools to many organizations including Microsoft. One of the many tools offered by Deque is the axe Accessibility Linter for VS Code. This VS Code extension use the axe-core rules engine to identify accessibility issues in HTML, Angular, React, Markdown, and Vue. Using an accessibility linter can help ensure accessibility issues get addressed early in the development lifecycle.</p>"},{"location":"non-functional-requirements/accessibility/#practices","title":"Practices","text":""},{"location":"non-functional-requirements/accessibility/#accessibility-testing","title":"Accessibility Testing","text":"<p>Accessibility testing is a specialized subset of software testing and includes automated tools and manual testing processes that vary from project to project. In addition to tools like Accessibility Insights discussed earlier, there are many other solutions for accessibility testing. The W3C provides a comprehensive list of evaluation and testing tools on their website at https://www.w3.org/WAI/ER/tools/.</p> <p>If you are looking to add automated testing to your Azure Pipelines, you may want to consider the Accessibility Testing extension built by Drew Lewis, a former Microsoft employee.</p> <p>It's important to keep in mind that automated tooling alone is not enough - make sure to augment your automated tests with manual ones. Accessibility Insights (linked above) can guide users through some manual testing steps.</p>"},{"location":"non-functional-requirements/accessibility/#code-and-documentation-basics","title":"Code and Documentation Basics","text":"<p>Before you get to testing, you can make some small changes in how you write code and documentation.</p> <ul> <li>Document! Beyond text documentation, this also means code comments, clear variable and file naming, and pipeline or script outputs that clearly report success or failure and give details.</li> <li>Avoid small case for variable and file names, hashtags, neologisms, etc. Use camelCase, snake_case, or other methods of creating separation between words.</li> <li>Introduce abbreviations by spelling the full term out, then the abbreviation in parentheses.</li> <li>Use headers effectively to break up content by topic. Don't use more than one h1 per page, and don't skip levels (e.g. use an h3 directly under an h1). Avoid using formatting to make something look like a header when it's not.</li> <li>Use descriptive link text. Avoid attaching a link to phrases like \"Read more\" and ensure that the text directly states what it links to. Link text should be able to stand on its own.</li> <li>When including images or diagrams, add alt text. This should never just be \"Image\" or \"Diagram\" (or similar). In your description, highlight the purpose of the image or diagram in the page and what it is intended to convey.</li> <li>Prefer tabs to spaces when possible. This allows users to default to their preferred tab width, so users with a range of vision can all take in code easily.</li> </ul>"},{"location":"non-functional-requirements/accessibility/#resources","title":"Resources","text":"<ul> <li>Microsoft Accessibility Technology &amp; Tools</li> <li>Web Content Accessibility Guidelines (WCAG)</li> <li>Accessibility Guidelines and Requirements | Microsoft Style Guide</li> <li>Google Developer Style Guide: Write Accessible Documentation</li> </ul>"},{"location":"non-functional-requirements/availability/","title":"Availability","text":"<p>Availability refers to the degree to which a system is operational and accessible when needed for use. It is a critical non-functional requirement that ensures users can rely on the system to perform its intended functions without unexpected downtime. High availability is vital for maintaining user trust and satisfaction, especially in industries where service interruptions can lead to significant financial losses or even jeopardize safety. Achieving high availability often involves strategies like redundancy, failover mechanisms, and robust maintenance practices to minimize both planned and unplanned outages. In essence, availability ensures that the system is there when users need it, which is fundamental for any service-oriented or mission-critical application.</p>"},{"location":"non-functional-requirements/availability/#characteristics","title":"Characteristics","text":"<ul> <li>Uptime: This is the proportion of time the system is operational and accessible. It's often measured as a percentage over a specific period (e.g., 99.99% uptime).</li> <li>Redundancy: Implementing backup components or systems that can take over in case of a failure. This ensures continuous operation even if one part fails.</li> <li>Fault Tolerance: The system's ability to continue operating correctly even when part of it fails. This typically involves designing systems that can handle failures gracefully without significant impact on availability.</li> <li>Failover Mechanisms: Automatic switching to a standby system or component when the primary one fails. This minimizes downtime and maintains availability.</li> <li>Scalability: The system's capacity to handle increasing loads without compromising availability. This often involves scaling resources up or out to meet demand.</li> <li>Maintenance and Monitoring: Regular maintenance and real-time monitoring help to detect issues early and address them before they cause downtime. Proactive maintenance schedules and monitoring tools are crucial for maintaining high availability.</li> <li>Recovery Time Objective (RTO) and Recovery Point Objective (RPO): RTO is the maximum acceptable time to restore service after an outage, while RPO is the maximum acceptable amount of data loss measured in time. These metrics guide the design of disaster recovery plans to ensure availability.</li> <li>Service Level Agreements (SLAs): Formal agreements that specify the expected level of service availability and the penalties or compensations if these levels are not met. SLAs help set clear expectations and accountability.</li> </ul>"},{"location":"non-functional-requirements/availability/#implementations","title":"Implementations","text":"<p>Implementing availability involves various strategies and technologies designed to ensure that a system remains operational and accessible. Here are some examples:</p> <ul> <li>Redundant Systems: Deploying duplicate hardware and software systems that can take over if the primary system fails. For instance, using multiple servers in different geographic locations ensures that if one server goes down, another can handle the load.</li> <li>Load Balancing: Distributing incoming network traffic across multiple servers so that no single server becomes a bottleneck. This not only improves performance but also enhances availability by ensuring that if one server fails, the others can take over the traffic.</li> <li>Failover Mechanisms: Implementing automatic failover processes that switch operations to a backup system when a failure is detected. For example, in a database system, using a hot standby database that immediately takes over if the primary database fails.</li> <li>Clustering: Using a group of servers (a cluster) that work together to provide a service. If one server in the cluster fails, others can pick up the load without interrupting the service. This is commonly used in web hosting and database management.</li> <li>Geographic Distribution: Placing copies of data and services in multiple, geographically dispersed data centers. This approach not only improves access speed for users around the world but also protects against regional failures due to natural disasters or other localized issues.</li> <li>Data Replication: Continuously copying and synchronizing data across multiple locations. Techniques like database replication and distributed file systems ensure that data is always available even if one site goes down.</li> <li>Disaster Recovery Plans: Developing and regularly testing comprehensive disaster recovery plans that include steps for restoring services and data in case of a catastrophic failure. These plans often include off-site backups and detailed procedures for quickly bringing systems back online.</li> <li>Real-Time Monitoring and Alerts: Implementing monitoring tools that constantly check the health of the system and send alerts if something goes wrong. This enables quick response to potential issues before they lead to significant downtime.</li> <li>Scheduled Maintenance Windows: Planning and communicating scheduled maintenance periods during off-peak hours to minimize the impact on users. Systems can be designed to perform maintenance tasks without taking the entire service offline.</li> <li>High Availability Software Architectures: Designing software with high availability in mind, using principles like microservices architecture, which isolates different functions of an application. This isolation ensures that a failure in one component doesn\u2019t bring down the entire system.</li> </ul>"},{"location":"non-functional-requirements/availability/#resources","title":"Resources","text":"<ul> <li>Recommendations for highly available multi-region design</li> <li>Recommendations for using availability zones and regions</li> </ul>"},{"location":"non-functional-requirements/capacity/","title":"Capacity","text":"<p>Capacity defines the maximum load or volume that a system can handle while maintaining specified performance criteria. This attribute is crucial for ensuring that the system can support the anticipated number of users, transactions, or data volume without degradation in performance.</p>"},{"location":"non-functional-requirements/capacity/#characteristics","title":"Characteristics","text":"<ul> <li>Maximum Load: Capacity defines the upper limit of user activity or workload that the system can handle without performance degradation. This includes peak loads during high-demand periods.</li> <li>Scalability: The system's capacity should be scalable, meaning it can be expanded or upgraded to accommodate increased workload or data volume as the organization grows.</li> <li>Resource Management: Efficient allocation and management of resources such as CPU, memory, disk space, and network bandwidth are critical for maintaining capacity.</li> <li>Performance Criteria: Capacity is defined within specific performance criteria, such as response time, throughput, and transaction processing rates, ensuring that the system maintains acceptable performance levels under load.</li> <li>Load Balancing: Systems with high capacity often employ load balancing techniques to distribute workload evenly across servers or resources, optimizing performance and avoiding overload.</li> <li>Failover and Redundancy: Capacity planning may include provisions for failover mechanisms and redundancy to ensure continuity of service and minimal downtime in case of hardware failures or traffic spikes.</li> <li>Monitoring and Testing: Continuous monitoring and periodic load testing are essential to verify that the system's capacity meets expected levels and to identify potential bottlenecks or performance issues proactively. Load testing is one of the critical methods used to ensure that the system can handle expected loads.</li> <li>Capacity Planning: Effective capacity management involves forecasting future needs based on growth projections and historical usage patterns, allowing for timely upgrades or adjustments to infrastructure and resources.</li> </ul>"},{"location":"non-functional-requirements/capacity/#implementations","title":"Implementations","text":"<p>Capacity is typically implemented through a combination of architectural design, infrastructure planning, and performance optimization strategies. For example:</p> <ul> <li>Scalable Architecture: Designing the system with scalability in mind allows it to handle increased load by adding resources (horizontal scaling) or upgrading existing resources (vertical scaling). This involves using distributed systems, microservices architecture, and load balancing mechanisms to distribute workload across multiple servers or instances. It is also important to plan for scalability with a forward-looking approach, typically anticipating the needs for at least the next 6 months, to ensure the system can accommodate future growth and demand.</li> <li>Resource Allocation: Efficient allocation and management of resources such as CPU, memory, disk space, and network bandwidth are crucial. This can include techniques like resource pooling, where resources are shared among multiple users or tasks to optimize utilization.</li> <li>Caching: Utilizing caching mechanisms (e.g., in-memory caching, content delivery networks) to store frequently accessed data or computations can reduce the load on backend services and improve response times, thereby enhancing overall capacity.</li> <li>Database Optimization: Ensure that data is modeled efficiently to support optimal performance and scalability. Optimizing database queries, indexing frequently accessed data, and using database scaling techniques (e.g., sharding, replication) can improve the system's ability to handle large volumes of data and concurrent transactions.</li> <li>Load Balancing: Implementing load balancers to evenly distribute incoming traffic across multiple servers or instances helps prevent overload on any single component and ensures efficient resource utilization.</li> <li>Auto-scaling: Leveraging auto-scaling capabilities provided by cloud platforms allows the system to automatically adjust its capacity based on real-time demand. This ensures that additional resources are provisioned during peak periods and scaled down during low traffic times, optimizing cost and performance.</li> <li>Performance Monitoring and Tuning: Continuous monitoring of system performance metrics (e.g., CPU usage, memory utilization, response times) helps identify bottlenecks and areas for optimization. Tuning configurations, optimizing code, and conducting performance testing are essential to maintain and improve system capacity over time.</li> <li>High Availability and Fault Tolerance: Implementing strategies such as redundant servers, failover mechanisms, and disaster recovery plans ensures that the system remains available and operational even in the event of hardware failures or other disruptions.</li> <li>Capacity Planning: Conducting thorough capacity planning based on anticipated growth, usage patterns, and business requirements helps forecast resource needs and proactively scale the system to meet future demands.</li> </ul>"},{"location":"non-functional-requirements/capacity/#resources","title":"Resources","text":"<ul> <li>Performance Testing</li> </ul>"},{"location":"non-functional-requirements/compliance/","title":"Compliance","text":"<p>Compliance refers to the adherence to regulatory standards, legal requirements, and organizational policies that govern the handling of data, security practices, and operational procedures. It ensures that the software solution meets specific industry regulations (such as GDPR, HIPAA, PCI-DSS) and internal governance frameworks.</p>"},{"location":"non-functional-requirements/compliance/#characteristics","title":"Characteristics","text":"<ul> <li>Regulatory Adherence: Compliance requires the software system to adhere to specific regulatory frameworks relevant to its industry or geographic region. This includes laws and regulations related to data protection, privacy, security, financial transactions, healthcare, and more.</li> <li>Data Privacy: Ensuring that the system handles sensitive data in accordance with privacy laws and regulations, such as implementing encryption, access controls, data anonymization, and secure data storage practices. This includes proper management of Personally Identifiable Information (PII) and encapsulation of secrets to prevent unauthorized access and ensure compliance with data protection standards.</li> <li>Security Standards: Compliance mandates adherence to security standards and best practices to protect against unauthorized access, data breaches, and cyber threats. This involves implementing measures such as firewalls, intrusion detection systems, secure authentication mechanisms, and regular security audits.</li> <li>Auditability: The system must be designed and operated in a way that allows for comprehensive auditing and logging of activities. This ensures that compliance with regulations can be verified through audit trails and compliance reports.</li> <li>Documentation: Comprehensive documentation of policies, procedures, and controls related to compliance requirements is essential. This includes documenting data handling processes, security measures, incident response plans, and compliance assessments.</li> <li>Risk Management: Implementing risk assessment and management practices to identify, assess, and mitigate risks associated with non-compliance. This involves conducting risk assessments regularly and implementing controls to manage identified risks effectively.</li> <li>Change Management: Compliance requires robust change management processes to ensure that any updates or modifications to the software system do not compromise regulatory compliance. This includes testing changes thoroughly and obtaining necessary approvals.</li> </ul>"},{"location":"non-functional-requirements/compliance/#implementations","title":"Implementations","text":"<p>Implementing compliance involves a systematic approach that integrates regulatory requirements, organizational policies, and best practices into the development, deployment, and operation phases. Here are common strategies and practices used to implement compliance:</p> <ul> <li>Compliance Framework Selection: Choosing and adopting a compliance framework or standards (e.g., ISO 27001, NIST Cybersecurity Framework) that aligns with the organization's compliance obligations and provides guidelines for implementing controls.</li> <li>Privacy by Design: Integrating privacy considerations into the software design and development process. This includes conducting privacy impact assessments, implementing data minimization techniques, and ensuring user consent mechanisms are in place where required.</li> <li>Audit and Monitoring: Establishing mechanisms for continuous monitoring, auditing, and logging of activities within the software system to ensure compliance with regulatory requirements. This includes maintaining audit trails, generating compliance reports, and conducting regular security assessments.</li> <li>Documentation and Record Keeping: Maintaining comprehensive documentation of compliance efforts, including policies, procedures, audit reports, risk assessments, and compliance certifications.</li> </ul>"},{"location":"non-functional-requirements/compliance/#resources","title":"Resources","text":"<ul> <li>General Data Protection Regulation (GDPR)</li> <li>Purview Compliance Manager</li> </ul>"},{"location":"non-functional-requirements/data-integrity/","title":"Data Integrity","text":"<p>Data Integrity is the maintenance and assurance of the quality of data over its entire lifecycle. This includes the many facets of data quality such as, but not limited to, consistency, accuracy, and reliability. The benefits of this NFR are significant, as it ensures that data is trustworthy and reliable for decision-making, analysis, and reporting.</p>"},{"location":"non-functional-requirements/data-integrity/#characteristics","title":"Characteristics","text":"<ul> <li>Accuracy: Data should be correct and free from errors or inconsistencies.<ul> <li>Are the column data types correct?</li> <li>Are numeric values rounded off correctly?</li> </ul> </li> <li>Completeness: All required data should be present and not missing any essential components.</li> <li>Consistency: Data should be consistent across different databases, applications, or time periods.</li> <li>Validity: Data should conform to defined rules, constraints, or standards. Invalid data should be rejected or flagged for correction.</li> <li>Reliability: Data should be trustworthy and dependable for decision-making and analysis.</li> <li>Timeliness: Data should be up-to-date and reflect the most current information available.</li> <li>Security: Data should be protected from unauthorized access, alteration, or deletion to maintain its integrity.</li> <li>Auditability: Changes to data should be tracked and logged, allowing for accountability and traceability.</li> <li>Transparency: Processes for data collection, storage, and manipulation should be transparent and understandable.</li> <li>Redundancy: Data should have backups or redundancy measures in place to prevent loss or corruption.</li> <li>Compliance: Data handling practices should comply with relevant regulations, standards, and industry best practices.</li> <li>Uniqueness: Data should be unique and not duplicated within the same dataset.</li> <li>Referential integrity: Does every row that depends on a dimension in the fact table actually have its associated dimension? (i.e., foreign keys without a primary)<ul> <li>For example, let's say the dimension is \"city\"- then if we have a fact table referencing Seattle, and then delete the Seattle dimension, we need to go delete Seattle from the facts</li> </ul> </li> <li>Orderliness: Data should be organized in a logical and consistent manner, making it easy to search, retrieve, and analyze.</li> </ul>"},{"location":"non-functional-requirements/data-integrity/#implementations","title":"Implementations","text":"<p>Data validation: Implement validation rules at the data entry points to ensure that only accurate and valid data is accepted into the system. This includes checks for data type, format, range, and consistency.</p> <p>Data logging and auditing: Implement logging mechanisms to record all data-related activities, including data modifications, access attempts, and system events. Regularly review audit logs to detect any unauthorized or suspicious activities.</p> <p>Data quality monitoring: Establish data quality monitoring processes to continuously evaluate the accuracy, completeness, and consistency of data. Implement automated checks and alerts to identify and address data quality issues in real-time.</p> <p>Database constraints: Utilize database constraints such as primary keys, foreign keys, unique constraints, and check constraints to enforce data integrity rules at the database level.</p> <p>Regular data backups: Implement regular backups of data to prevent loss in case of system failures, errors, or security breaches. Ensure that backup procedures are automated, monitored, and regularly tested.</p>"},{"location":"non-functional-requirements/data-integrity/#resources","title":"Resources","text":"<ul> <li>Great Expectations: A framework to build data validations and test the quality of your data.</li> </ul>"},{"location":"non-functional-requirements/disaster-recovery/","title":"Disaster Recovery and Continuity","text":"<p>Disaster Recovery (DR) focuses on the processes and technologies required to restore IT systems and data after a catastrophic event, such as a natural disaster, cyber attack, or hardware failure. It involves regular backups, failover procedures, and recovery plans that enable a swift return to normal operations. Business Continuity (BC), on the other hand, encompasses a broader scope, ensuring that essential business functions can continue during and after a disaster. This includes not only IT systems but also processes, personnel, and physical infrastructure. Together, DR and BC strategies are vital for minimizing downtime, protecting data integrity, and maintaining customer trust and operational stability. They ensure that an organization can quickly recover from disruptions and continue providing critical services, safeguarding both its reputation and financial health.</p>"},{"location":"non-functional-requirements/disaster-recovery/#characteristics","title":"Characteristics","text":"<ul> <li>Recovery Time Objective (RTO): This defines the maximum acceptable amount of time it should take to restore a system after a disaster. RTO sets the target for how quickly systems and applications must be back online to minimize impact on the business.</li> <li>Recovery Point Objective (RPO): This specifies the maximum acceptable amount of data loss measured in time. RPO determines how frequently data backups should occur to ensure that data loss remains within acceptable limits.</li> <li>Backup and Restore Procedures: Effective DR involves robust backup procedures, including regular, automated backups of critical data and systems. These backups must be stored securely, often in off-site or cloud locations, and tested regularly to ensure they can be restored as needed.</li> <li>Failover Mechanisms: These are automated processes that switch operations to a standby system or site in the event of a failure. Failover mechanisms ensure continuity of service by redirecting workloads to backup systems without significant downtime.</li> <li>Redundancy: DR plans often include redundant systems and infrastructure to eliminate single points of failure. This can involve duplicate hardware, network paths, and data storage locations.</li> <li>Disaster Recovery Plan (DRP): A comprehensive DRP outlines the specific steps, roles, and responsibilities involved in responding to a disaster. It includes detailed procedures for data recovery, system restoration, and communication protocols.</li> <li>Testing and Drills: Regular testing and simulation drills are essential to validate the effectiveness of the DR plan. This helps identify potential weaknesses and ensures that staff are familiar with the recovery procedures.</li> <li>Communication Plan: Effective DR includes a clear communication strategy for notifying stakeholders, including employees, customers, and partners, about the status of recovery efforts and expected timelines for restoration.</li> <li>Scalability: The DR plan should be scalable to accommodate changes in the business environment, such as growth in data volume or expansion to new geographic locations. This ensures that the recovery strategy remains effective as the organization evolves.</li> <li>Compliance and Regulatory Requirements: DR plans must adhere to relevant industry standards and regulatory requirements, ensuring that recovery processes meet legal and compliance obligations.</li> <li>Cost Considerations: Balancing the costs associated with implementing and maintaining DR capabilities against the potential losses from downtime and data loss is crucial. Effective DR planning considers cost-efficiency while ensuring robust protection.</li> </ul>"},{"location":"non-functional-requirements/disaster-recovery/#implementations","title":"Implementations","text":"<p>Implementing disaster recovery (DR) involves a combination of strategies, technologies, and practices designed to restore systems and data quickly and effectively after a catastrophic event. Here are some examples:</p> <ul> <li>Cloud Backups: Store backup copies of data in the cloud, ensuring they are accessible from anywhere and providing geographic redundancy.</li> <li>Disaster Recovery as a Service (DRaaS): Utilize DRaaS providers that offer comprehensive disaster recovery solutions, including automated failover to cloud-based systems.</li> <li>Failover and Redundancy:<ul> <li>Hot Site: Maintain a fully operational, geographically separate duplicate of your primary site that can take over immediately in case of a disaster.</li> <li>Cold Site: Have an alternate site with necessary infrastructure but without active systems or data, ready to be brought online when needed.</li> <li>Warm Site: A compromise between hot and cold sites, with partially prepared systems that require some setup before use.</li> </ul> </li> <li>Virtualization and Snapshots:<ul> <li>Virtual Machine (VM) Snapshots: Regularly take snapshots of virtual machines, allowing for quick rollback to a known good state.</li> <li>VM Replication: Continuously replicate VMs to a secondary location, ensuring up-to-date copies are ready to take over if the primary site fails.</li> </ul> </li> <li>Automated Failover Systems:<ul> <li>High Availability Clusters: Implement clusters of servers that automatically detect failures and shift workloads to healthy nodes without manual intervention.</li> <li>Load Balancers: Use load balancers to distribute traffic across multiple servers, ensuring continuous service availability even if one server fails.</li> </ul> </li> <li>Data Replication: Ensure that data is simultaneously written to primary and secondary locations, maintaining real-time consistency between sites.</li> <li>Regular Testing and Drills: Conduct regular simulation drills to test the effectiveness of the DR plan and to ensure that all team members are familiar with their roles.</li> <li>Comprehensive Documentation: Develop run books with step-by-step instructions for executing the DR plan, tailored to specific scenarios and systems.</li> </ul>"},{"location":"non-functional-requirements/disaster-recovery/#resources","title":"Resources","text":"<ul> <li>Azure Site Recovery</li> </ul>"},{"location":"non-functional-requirements/internationalization/","title":"Internationalization and Localization","text":"<p>Internationalization (i18n) and Localization (l10n) refer to the design and adaptation of software systems to support multiple languages, cultures, and regions, ensuring usability and compliance with local preferences and regulations.</p>"},{"location":"non-functional-requirements/internationalization/#characteristics","title":"Characteristics","text":""},{"location":"non-functional-requirements/internationalization/#main-characteristics-of-internationalization","title":"Main Characteristics of Internationalization","text":"<ul> <li>Text Externalization: Moving all user-facing text to external resource files to facilitate easy translation.</li> <li>Unicode Support: Using Unicode or another character encoding that supports all necessary scripts and characters.</li> <li>Date and Time Formatting: Designing the system to handle various date and time formats.</li> <li>Number and Currency Formatting: Ensuring that numbers and currencies can be displayed according to local conventions.</li> <li>Locale-Sensitive Data Processing: Adapting data processing to respect locale-specific rules, such as sorting and case conversion.</li> <li>Bidirectional Text Support: Supporting both left-to-right (LTR) and right-to-left (RTL) text orientations where necessary.</li> </ul>"},{"location":"non-functional-requirements/internationalization/#main-characteristics-of-localization","title":"Main Characteristics of Localization","text":"<ul> <li>Translation: Converting text and UI elements to the target language.</li> <li>Cultural Adaptation: Adapting content and design elements to align with local cultural norms and expectations.</li> <li>Legal and Regulatory Compliance: Ensuring that the application meets local legal requirements, such as privacy laws and accessibility standards.</li> <li>Testing in Context: Testing the localized version of the application in its intended locale to ensure proper functionality and usability.</li> <li>Localized User Interfaces: Adjusting the layout and design to accommodate text expansion or contraction and to suit cultural preferences.</li> <li>Help and Documentation: Providing user assistance and documentation in the target language and context.</li> </ul>"},{"location":"non-functional-requirements/internationalization/#implementations","title":"Implementations","text":"<ul> <li>Resource Bundles: Using resource bundles to store locale-specific text and data.</li> <li>Translation Management Systems: Employing tools and platforms to manage translations and streamline the localization workflow.</li> <li>Locale-Aware Libraries: Leveraging libraries and frameworks that provide built-in support for handling locale-specific data.</li> <li>Automated Testing: Implementing automated tests to verify that the software behaves correctly in different locales.</li> <li>Continuous Localization: Integrating localization processes into the continuous integration/continuous deployment (CI/CD) pipeline to keep translations up-to-date.</li> <li>Coordinated Universal Time: When dealing with times, it is essential to always use UTC for internal storage and processing. Using UTC helps avoid issues related to time zone differences, daylight saving time changes, and other regional time adjustments.</li> <li>Consistent Internal Representation: Store numbers and currency values in a consistent internal representation, such as a standardized numeric format or a base currency, and apply locale-specific formatting only when displaying data to the user. This prevents errors during calculations and data processing.</li> </ul>"},{"location":"non-functional-requirements/interoperability/","title":"Interoperability","text":"<p>Interoperability refers to the ability of different software components or systems to seamlessly exchange and use information. It involves ensuring that the software can integrate effectively with other systems, regardless of their operating platforms, programming languages, or data formats.</p>"},{"location":"non-functional-requirements/interoperability/#characteristics","title":"Characteristics","text":"<ul> <li>Standardization: Adherence to industry standards, protocols, and specifications that enable consistent and compatible interactions between different software components or systems.</li> <li>Compatibility: The ability of systems to work together without requiring extensive modifications or adaptations, ensuring that data and operations can be shared effectively.</li> <li>Interface Definition: Well-defined interfaces and APIs that facilitate communication and data exchange between systems, abstracting complexities and promoting ease of integration.</li> <li>Data Format Consistency: Consistent handling and interpretation of data formats, ensuring that information exchanged between systems remains accurate and meaningful.</li> <li>Platform Agnosticism: Capability to operate across different hardware platforms, operating systems, and environments without dependency on specific technologies or configurations.</li> </ul>"},{"location":"non-functional-requirements/interoperability/#implementations","title":"Implementations","text":"<p>An interoperable solution facilitates seamless communication and data exchange between heterogeneous systems. Here are some of the implementations:</p> <ul> <li>Providing RESTful APIs.</li> <li>Using data formats and standards such as JSON schemas.</li> <li>Utilizing libraries and frameworks that provide cross-platform support and abstraction layers for common functionalities.</li> <li>Adhering to industry standards (e.g., ISO, IEEE) and governance frameworks that define interoperability requirements, protocols, and best practices for seamless integration.</li> </ul>"},{"location":"non-functional-requirements/maintainability/","title":"Maintainability","text":"<p>Maintainability is the ease with which a software system can be modified, updated, extended, or repaired over time. It impacts the long-term viability and sustainability of a software system. A maintainable system is one that is easy to understand, has clear and modular code, is well-documented, and has a low risk of introducing errors when changes are made.</p>"},{"location":"non-functional-requirements/maintainability/#characteristics","title":"Characteristics","text":"<ul> <li>Modularity: The software is divided into discrete, independent modules or components, each with a clear and specific functionality. This makes it easier to modify or replace individual parts without affecting the entire system.</li> <li>Readability: Code is written clearly and concisely, following consistent naming conventions, coding standards, and documentation practices. Readable code is easier for developers to understand, troubleshoot, and enhance.</li> <li>Testability: The software is designed to support thorough testing, with components that can be tested independently. This includes unit tests, integration tests, and automated testing frameworks that facilitate ongoing validation of the software's behavior.</li> <li>Documentation: Comprehensive and up-to-date documentation is provided, docstrings, design documents, user manuals, and API references. Good documentation helps developers understand the system's structure, functionality, and dependencies.</li> <li>Simplicity: The design and implementation of the software are kept as simple as possible, avoiding unnecessary complexity. Simple systems are easier to understand, maintain, and extend.</li> <li>Consistency: Consistent use of design patterns, coding practices, language best practices, and architectural principles throughout the software. Consistency reduces the learning curve for new developers and helps maintain uniform quality across the codebase.</li> <li>Configurability: The software allows configuration through external files or settings rather than hard-coded values. This makes it easier to adapt the software to different environments or requirements without changing the code.</li> <li>Dependency Management: Proper management of dependencies ensures that external libraries or components can be updated or replaced without major disruptions. This includes using dependency injection, version control, and modular design. Additionally, version management for your own code will ensure consistent and reliable releases.</li> <li>Error Handling and Logging: Robust error handling and logging mechanisms are in place to facilitate debugging and maintenance. This includes meaningful error messages, exception handling, and comprehensive logging of system events and errors.</li> </ul>"},{"location":"non-functional-requirements/maintainability/#implementations","title":"Implementations","text":"<p>Implementing maintainability in software systems involves adopting practices, tools, and methodologies that facilitate efficient modification, extension, and troubleshooting of the software over its lifecycle.</p> <ul> <li>Consistent Naming Conventions: Use meaningful and consistent names for variables, functions, classes, and other entities.</li> <li>Code Formatting: Follow consistent code formatting rules to enhance readability.</li> <li>Code Reviews: Conduct regular code reviews to ensure adherence to standards and to share knowledge among team members.</li> <li>External Documentation: Maintain up-to-date documentation, including design documents, user manuals, and API references. There are tools to assist with that like Swagger or Postman.</li> <li>README Files: Provide README files in repositories to guide new developers on setup, usage, and contribution guidelines.</li> <li>Automated Testing: Provide unit test, end-to-end tests, smoke and integration tests as well as continuous integration practices.</li> <li>Code Refactoring: Regularly refactor code to improve its structure, readability, and maintainability without changing its external behavior. Implementing pre-commit hooks in the pipelines to automate the monitoring of code refactoring tasks, like forcing coding standards, run static code analysis, linting, etc.</li> </ul>"},{"location":"non-functional-requirements/performance/","title":"Performance","text":"<p>Performance refers to the responsiveness, efficiency, and speed with which a system completes tasks and processes user requests. It encompasses several key metrics such as response time, throughput, latency, and resource utilization.</p>"},{"location":"non-functional-requirements/performance/#characteristics","title":"Characteristics","text":"<ul> <li>Response Time: The time taken by the system to respond to user interactions or requests. Lower response times indicate better performance and user responsiveness.</li> <li>Throughput: The rate at which the system can process and handle a certain volume of transactions or requests within a given time frame. Higher throughput signifies greater processing capacity and efficiency.</li> <li>Latency: The delay or time lag experienced between initiating a request and receiving a response. Low latency is crucial for real-time applications to ensure timely interactions.</li> <li>Scalability: The system's ability to handle increasing workload or user demand by scaling resources (horizontal or vertical scaling) without impacting performance negatively.</li> <li>Concurrency: The system's capability to handle multiple concurrent users or tasks efficiently without significant degradation in performance. This involves managing resources such as CPU, memory, and network bandwidth effectively.</li> <li>Resource Utilization: Efficient utilization of hardware resources (e.g., CPU, memory, disk) to maximize performance without unnecessary overhead or bottlenecks.</li> <li>Stability: Consistency and reliability of performance over time and under varying conditions, ensuring predictable behavior and minimal downtime.</li> <li>Fault Tolerance: The system's ability to continue operating or recover gracefully from failures or disruptions without significant impact on performance or user experience.</li> <li>Load Handling: How well the system manages and distributes workload during peak usage periods to maintain optimal performance levels.</li> </ul>"},{"location":"non-functional-requirements/performance/#implementations","title":"Implementations","text":"<p>Implementing performance involves a combination of architectural decisions, coding practices, infrastructure setup, and optimization techniques. For example:</p> <ul> <li>Efficient Algorithms and Data Structures: Choosing algorithms and data structures that are optimized for the specific tasks and operations performed by the system can significantly improve performance. This includes selecting algorithms with lower time complexity (e.g., O(1), O(log n)) for critical operations.</li> <li>Code Optimization: Writing efficient and optimized code reduces execution time and resource consumption. Techniques such as minimizing loops, reducing unnecessary computations, and using appropriate data types can improve performance.</li> <li>Concurrency: Implementing concurrency models such as threads and async-await techniques optimizes task execution by allowing the system to handle multiple operations simultaneously.</li> <li>Parallel Programming: Enables tasks to be divided into smaller subtasks that can execute concurrently on multi-core processors. This method improves computational efficiency and accelerates the completion of tasks.</li> <li>Caching: Implementing caching mechanisms (e.g., in-memory caching, content delivery networks) to store and retrieve frequently accessed data or computations reduces the need to fetch data from slower storage systems, thereby improving response time and overall system performance.</li> <li>Database Optimization: Optimizing database queries, indexing frequently accessed data, denormalizing data where appropriate, and using database scaling techniques (e.g., sharding, replication) can enhance database performance and reduce latency.</li> <li>Network Optimization: Minimizing network latency by optimizing network protocols, reducing the number of network requests, compressing data where feasible, and leveraging content delivery networks (CDNs) for static content delivery.</li> <li>Load Balancing: Distributing incoming traffic evenly across multiple servers or instances using load balancers ensures optimal resource utilization and prevents overload on any single component, improving overall system performance and availability.</li> <li>Scalable Architecture: Designing the system with scalability in mind allows it to handle increased workload by adding resources dynamically (horizontal scaling) or upgrading existing resources (vertical scaling). This involves using microservices architecture, containerization (e.g., Docker), and orchestration tools (e.g., Kubernetes) for efficient resource management.</li> <li>Performance Testing: Performing rigorous performance tests to pinpoint bottlenecks, measure critical metrics like response time and throughput, and validate system performance across varying load scenarios.</li> <li>Continuous Monitoring: Implementing ongoing monitoring of performance metrics to identify performance degradation.</li> </ul>"},{"location":"non-functional-requirements/performance/#resources","title":"Resources","text":"<ul> <li>Automated Testing</li> </ul>"},{"location":"non-functional-requirements/portability/","title":"Portability","text":"<p>Portability refers to the ease with which software can be transferred and used in different environments or platforms without requiring significant modification. This includes moving the software across various hardware, operating systems, cloud services, or development frameworks while maintaining its functionality, performance, and usability.</p>"},{"location":"non-functional-requirements/portability/#characteristics","title":"Characteristics","text":"<ul> <li>Platform Independence: The ability of the software to run on different operating systems, hardware architectures, and devices without requiring major changes.</li> <li>Minimal Modification: The need for minimal code changes or reconfiguration when moving the software to a different environment.</li> <li>Standard Compliance: Adherence to industry standards and protocols to ensure compatibility across different systems and platforms.</li> <li>Environment Abstraction: Use of abstraction layers or frameworks that isolate the software from specific platform details, making it easier to adapt to different environments.</li> <li>Configuration Flexibility: Ease of modifying configuration settings to suit different environments without altering the core software code.</li> <li>Dependency Management: Efficient handling of external dependencies, ensuring that required libraries, tools, and services are available or can be easily obtained in the new environment.</li> <li>Packaging and Distribution: Efficient packaging methods, such as containerization (e.g., Docker), that encapsulate the software and its dependencies to facilitate deployment in diverse environments.</li> <li>Modular Design: Designing the software in a modular way, where components can be independently developed, tested, and deployed, enhancing the ease of porting parts of the system.</li> </ul>"},{"location":"non-functional-requirements/portability/#implementations","title":"Implementations","text":""},{"location":"non-functional-requirements/portability/#containerization","title":"Containerization","text":"<ul> <li>Docker: Packaging applications and their dependencies into containers, ensuring consistent behavior across different environments.</li> <li>Kubernetes: Orchestrating containerized applications for deployment across various cloud providers and on-premises infrastructures.</li> </ul>"},{"location":"non-functional-requirements/portability/#virtual-machines","title":"Virtual Machines","text":"<ul> <li>Java Virtual Machine (JVM): Writing software in Java or other JVM languages to run on any system with a compatible JVM.</li> <li>VirtualBox or VMware: Using virtual machines to create consistent runtime environments regardless of the underlying hardware.</li> </ul>"},{"location":"non-functional-requirements/portability/#platform-agnostic-languages","title":"Platform-Agnostic Languages","text":"<ul> <li>Python, JavaScript, and Go: Utilizing programming languages known for their cross-platform capabilities to ensure code runs on multiple operating systems with little to no modification. However, it's important to select a programming language that aligns with the project's requirements and team expertise.</li> </ul>"},{"location":"non-functional-requirements/portability/#standardized-interfaces-and-protocols","title":"Standardized Interfaces and Protocols","text":"<ul> <li>APIs: Designing APIs with standardized protocols (e.g., REST, GraphQL) to facilitate interaction between different systems.</li> <li>Data Interchange Formats: Using common data formats like JSON, XML, or Protocol Buffers to ensure data can be exchanged and understood across different systems.</li> </ul>"},{"location":"non-functional-requirements/portability/#other-practices","title":"Other Practices","text":"<ul> <li>Debugging and Troubleshooting: Local debugging provides direct access to debugging tools and logs, making it easier to diagnose and resolve issues quickly.</li> <li>CI/CD Integration: Implementing a CI/CD pipeline to automate the building, testing, and packaging of the solution enhances portability by ensuring consistent and reliable deployments across various platforms and environments.</li> </ul>"},{"location":"non-functional-requirements/reliability/","title":"Reliability","text":"<p>All the other ISE Engineering Fundamentals work towards a more reliable infrastructure. Automated integration and deployment ensures code is properly tested, and helps remove human error, while slow releases build confidence in the code. Observability helps more quickly pinpoint errors when they arise to get back to a stable state, and so on.</p> <p>However, there are some additional steps we can take, that don't neatly fit into the previous categories, to help ensure a more reliable solution. We'll explore these below.</p>"},{"location":"non-functional-requirements/reliability/#remove-foot-guns","title":"Remove \"Foot-Guns\"","text":"<p>Prevent your dev team from shooting themselves in the foot. People make mistakes; any mistake made in production is not the fault of that person, it's the collective fault of the system to not prevent that mistake from happening.</p> <p>Check out the below list for some common tooling to remove these foot guns:</p> <ul> <li>In Kubernetes, leverage Admission Controllers to prevent \"bad things\" from happening.<ul> <li>You can create custom controllers using the Webhook Admission controller.</li> </ul> </li> <li>Gatekeeper is a pre-built Webhook Admission controller, leveraging OPA underneath the hood, with support for some out-of-the-box protections</li> </ul> <p>If a user ever makes a mistake, don't ask: \"how could somebody possibly do that?\", do ask: \"how can we prevent this from happening in the future?\"</p>"},{"location":"non-functional-requirements/reliability/#autoscaling","title":"Autoscaling","text":"<p>Whenever possible, leverage autoscaling for your deployments. Vertical autoscaling can scale your VMs by tuning parameters like CPU, disk, and RAM, while horizontal autoscaling can tune the number of running images backing your deployments. Autoscaling can help your system respond to inorganic growth in traffic, and prevent failing requests due to resource starvation.</p> <p>Note: In environments like K8s, both horizontal and vertical autoscaling are offered as a native solution. The VMs backing each Pod however, may also need autoscaling to handle an increase in the number of Pods.</p> <p>It should also be noted that the parameters that affect autoscaling can be difficult to tune. Typical metrics like CPU or RAM utilization, or request rate may not be enough. Sometimes you might want to consider custom metrics, like cache eviction rate.</p>"},{"location":"non-functional-requirements/reliability/#load-shedding-dos-protection","title":"Load shedding &amp; DOS Protection","text":"<p>Often we think of Denial of Service [DOS] attacks as an act from a malicious actor, so we place some load shedding at the gates to our system and call it a day. In reality, many DOS attacks are unintentional, and self-inflicted. A bad deployment that takes down a Cache results in hammering downstream services. Polling from a distributed system synchronizes and results in a thundering herd. A misconfiguration results in an error which triggers clients to retry uncontrollably. Requests append to a stored object until it is so big that future reads crash the server. The list goes on.</p> <p>Follow these steps to protect yourself:</p> <ul> <li>Add a jitter (random) to any action that occurs from a non-user triggered flow (ie: add a random duration to the sleep in a cron, or job that continuously polls a downstream service).</li> <li>Implement exponential backoff retry policies in your client code</li> <li>Add load shedding to your servers (yes, your internal microservices too).<ul> <li>This can be configured easily when leveraging a sidecar like envoy.</li> </ul> </li> <li>Be careful when deserializing user requests, and use buffer limits.<ul> <li>ie: HTTP/gRPC Servers can set limits on how much data will get read from the socket.</li> </ul> </li> <li>Set alerts for utilization, servers restarting, or going offline to detect when your system may be failing.</li> </ul> <p>These types of errors can result in Cascading Failures, where a non-critical portion of your system takes down the entire service. Plan accordingly, and make sure to put extra thought into how your system might degrade during failures.</p>"},{"location":"non-functional-requirements/reliability/#backup-data","title":"Backup Data","text":"<p>Data gets lost, corrupted, or accidentally deleted. It happens. Take data backups to help get your system back up online as soon as possible. It can happen in the application stack, with code deleting or corrupting data, or at the storage layer by losing the volumes, or losing encryption keys.</p> <p>Consider things like:</p> <ul> <li>How long will it take to restore data.</li> <li>How much data loss can you tolerate.</li> <li>How long will it take you to notice there is data loss.</li> </ul> <p>Look into the difference between snapshot and incremental backups. A good policy might be to take incremental backups on a period of N, and a snapshot backup on a period of M (where N &lt; M).</p>"},{"location":"non-functional-requirements/reliability/#target-uptime-failing-gracefully","title":"Target Uptime &amp; Failing Gracefully","text":"<p>It's a known fact that systems cannot target 100% uptime. There are too many factors in today's software systems to achieve this, many outside of our control. Even a service that never gets updated and is 100% bug free will fail. Upstream DNS servers have issues all the time. Hardware breaks. Power outages, backup generators fail. The world is chaotic. Good services target some number of \"9's\" of uptime. ie: 99.99% uptime means that the system has a \"budget\" of 4 minutes and 22 seconds of uptime each month. Some months might achieve 100% uptime, which means that budget gets rolled over to the next month. What uptime means is different for everybody, and up to the service to define.</p> <p>A good practice is to use any leftover budget at the end of the period (ie: year, quarter), to intentionally take that service down, and ensure that the rest of your systems fail as expected. Often times other engineers and services come to rely on that additional achieved availability, and it can be healthy to ensure that systems fail gracefully.</p> <p>We can build graceful failure (or graceful degradation) into our software stack by anticipating failures. Some tactics include:</p> <ul> <li>Failover to healthy services<ul> <li>Leader Election can be used to keep healthy services on standby in case the leader experiences issues.</li> <li>Entire cluster failover can redirect traffic to another region or availability zone.</li> <li>Propagate downstream failures of dependent services up the stack via health checks, so that your ingress points can re-route to healthy services.</li> </ul> </li> <li>Circuit breakers can bail early on requests vs. propagating errors throughout the system.   Consider using a well-known, tested library such as Polly (.NET) that enables configurable implementations of this and other common resilience and transient fault-handling patterns.</li> </ul>"},{"location":"non-functional-requirements/reliability/#practice","title":"Practice","text":"<p>None of the above recommendations will work if they are not tested. Your backups are meaningless if you don't know how to mount them. Your cluster failover and other mitigations will regress over time if they are not tested. Here are some tips to test the above:</p>"},{"location":"non-functional-requirements/reliability/#maintain-playbooks","title":"Maintain Playbooks","text":"<p>No software service is complete without playbooks to navigate the developers through unfamiliar territory. Playbooks should be thorough and cover all known failure scenarios and mitigations.</p>"},{"location":"non-functional-requirements/reliability/#run-maintenance-exercises","title":"Run Maintenance Exercises","text":"<p>Take the time to fabricate scenarios, and run a D&amp;D style campaign to solve your issues. This can be as elaborate as spinning up a new environment and injecting errors, or as simple as asking the \"players\" to navigate to a dashboard and describing would they would see in the fabricated scenario (small amounts of imagination required). The playbooks should easily navigate the user to the correct solution/mitigation. If not, update your playbooks.</p>"},{"location":"non-functional-requirements/reliability/#chaos-testing","title":"Chaos Testing","text":"<p>Leverage automated chaos testing to see how things break. You can read this playbook's article on fault injection testing for more information on developing a hypothesis-driven suite of automated chaos test. The following list of chaos testing tools as well as this section in the article linked above have more details on available platforms and tooling for this purpose:</p> <ul> <li>Azure Chaos Studio - An in-preview tool for orchestrating controlled fault injection experiments on Azure resources.</li> <li>Chaos toolkit - A declarative, modular chaos platform with many extensions, including the Azure actions and probes kit.</li> <li>Kraken - An Openshift-specific chaos tool, maintained by Redhat.</li> <li>Chaos Monkey - The Netflix platform which popularized chaos engineering (doesn't support Azure OOTB).</li> <li>Many services meshes, like Linkerd, offer fault injection tooling through the use of their sidecars.</li> <li>Chaos Mesh</li> <li>Simmy - A .NET library for chaos testing and fault injection integrated with the Polly library for resilience engineering. This ISE dev blog post provides code snippets as an example of how to use Polly and Simmy to implement a hypothesis-driven approach to resilience and chaos testing.</li> </ul>"},{"location":"non-functional-requirements/reliability/#analyze-all-failures","title":"Analyze All Failures","text":"<p>Writing up a post-mortem is a great way to document the root causes, and action items for your failures. They're also a great way to track recurring issues, and create a strong case for prioritizing fixes.</p> <p>This can even be tied into your regular Agile restrospectives.</p>"},{"location":"non-functional-requirements/scalability/","title":"Scalability","text":"<p>Scalability is the capability of a system to handle larger volumes, or its potential to accommodate additional growth. For example, a system is considered scalable if it is capable of increasing its total output under an increased load when resources (typically hardware) are added. An example of this is a system that can handle a growing number of requests when more memory is added to it.</p>"},{"location":"non-functional-requirements/scalability/#characteristics","title":"Characteristics","text":"<ul> <li>Elasticity: The system should be able to scale up or down based on demand, and be able to automatically provision or de-provision resources as needed.</li> <li>Latency: The system should be able to maintain low latency even under high load, and be able to handle a large number of concurrent requests without slowing down.</li> </ul>"},{"location":"non-functional-requirements/scalability/#examples","title":"Examples","text":"<ul> <li>Load Balancing: The application must be able to handle a minimum of 250 concurrent users and support load balancing across at least 3 servers to handle peak traffic.</li> <li>Database Scalability: The application's database must be able to handle at least 1 million records and support partitioning or sharding to ensure efficient storage and retrieval of data.</li> <li>Cloud-Based Infrastructure: The application must be deployed on cloud-based infrastructure that can handle at least 100,000 requests per hour, and be able to scale up or down to meet changing demand.</li> <li>Microservices Architecture: The application must be designed using a microservices architecture that allows for easy scaling of individual services, and be able to handle at least 500 requests per second.</li> <li>Caching: The application must be able to cache at least 10,000 records, with a cache hit rate of 95%, and support caching across multiple servers to ensure high availability.</li> </ul>"},{"location":"non-functional-requirements/usability/","title":"Usability","text":"<p>Usability is a topic that is often used interchangeably with user experience (UX), but they are not the same thing. Usability is a subset of UX, focusing specifically on the ease of use and effectiveness of a product, i.e., it is the ease with which users can learn and use a product to achieve their goals. Usability is a key factor in determining the success of a product, as it directly impacts user satisfaction, productivity, and overall experience. A system that is difficult to use or understand can lead to frustration, errors, and ultimately, abandonment by users.</p> <p>Closely coupled with usability and UX is the concept of accessibility.</p>"},{"location":"non-functional-requirements/usability/#characteristics","title":"Characteristics","text":"<p>The main three characteristics of usability are: - Effectiveness: Users should be able to accomplish their goals with the product. - Efficiency: Users should be able to perform tasks quickly and with minimal effort. Oftentimes this is measured in terms of time on task or number of clicks. - Satisfaction: Users should find the product enjoyable and satisfying to use.</p> <p>Additional characteristics include: - Learnability: Users should be able to easily and quickly learn how to use the product. In other words, the system should be intuitive and require minimal training. - Memorability: Users should be able to remember how to use the product after a period of not using it. - Errors: Users should encounter a minimal number of errors when completing a task, and recover easily from any errors that do occur. - Simplicity: The system should be simple and straightforward to use, with minimal complexity and cognitive load. - Comprehensibility: Users should be able to understand the system and its features easily, with clear instructions and feedback.</p>"},{"location":"non-functional-requirements/usability/#implementations","title":"Implementations","text":"<p>One way of implementing usability in a user interface is by basing your design decisions on usability testing results. Usability testing's goal is to identify any usability issues, gather feedback, and make improvements to the product. It can be conducted at various stages of the design and development process, from wireframes and prototypes to the final product.</p> <p>These evaluations can collect two key metrics: quantitative data and qualitative data. Quantitative data can be collected through observing the facts of what actually happened. Qualitative data can be collected through interviews, observations, and other methods that provide insights into user behavior and preferences. There are several methods for conducting usability testing, including, but not limited to: - Focus groups - Wireframes - Prototyping - Surveys/Questionnaires - Interviews - Think-aloud protocol</p>"},{"location":"non-functional-requirements/usability/#examples","title":"Examples","text":"<p>One example of usability in action is the design of a website. A website that is easy to navigate, with clear labels, intuitive menus, and a logical flow of information, is more likely to be successful than one that is cluttered, confusing, and difficult to use. The latter website is likely to have a low rate of user engagement, high bounce rates, and low conversion rates, as users will quickly become frustrated and abandon the site.</p>"},{"location":"non-functional-requirements/usability/#resources","title":"Resources","text":"<ul> <li>GeeksForGeeks: What is Usability?</li> <li>Usability.gov</li> <li>Human-computer Interaction (HCI)</li> <li>Jakob Nielsen's 10 Usability Heuristics for User Interface Design</li> </ul>"},{"location":"observability/","title":"Observability","text":"<p>Building observable systems enables development teams at ISE to measure how well the application is behaving. Observability serves the following goals:</p> <ul> <li>Provide holistic view of the application health.</li> <li>Help measure business performance for the customer.</li> <li>Measure operational performance of the system.</li> <li>Identify and diagnose failures to get to the problem fast.</li> </ul>"},{"location":"observability/#pillars-of-observability","title":"Pillars of Observability","text":"<ul> <li>Logs</li> <li>Metrics</li> <li>Tracing</li> <li>Logs vs Metrics vs Traces</li> </ul>"},{"location":"observability/#insights","title":"Insights","text":"<ul> <li>Dashboards and Reporting</li> </ul>"},{"location":"observability/#tools-patterns-and-recommended-practices","title":"Tools, Patterns and Recommended Practices","text":"<ul> <li>Tooling and Patterns</li> <li>Observability As Code</li> <li>Recommended Practices</li> <li>Diagnostics tools</li> <li>OpenTelemetry</li> </ul>"},{"location":"observability/#facets-of-observability","title":"Facets of Observability","text":"<ul> <li>Observability for Microservices</li> <li>Observability in Machine Learning</li> <li>Observability of CI/CD Pipelines</li> <li>Observability in Azure Databricks</li> <li>Recipes</li> </ul>"},{"location":"observability/#resources","title":"Resources","text":"<ul> <li>Non-Functional Requirements Guidance</li> </ul>"},{"location":"observability/alerting/","title":"Guidance for Alerting","text":"<p>One of the goals of building highly observable systems is to provide valuable insight into the behavior of the application. Observable systems allow problems to be identified and surfaced through alerts before end users are impacted.</p>"},{"location":"observability/alerting/#best-practices","title":"Best Practices","text":"<ul> <li>The foremost thing to do before creating alerts is to implement observability. Without monitoring systems in place, it becomes next to impossible to know what activities need to be monitored and when to alert the teams.</li> <li>Identify what the application's minimum viable service quality needs to be. It is not what you intend to deliver, but is acceptable for the customer. These Service Level Objectives(SLOs) are a metric for measurement of the application's performance.</li> <li>SLOs are defined with respect to the end users. The alerts must watch for visible impact to the user. For example, alerting on request rate, latency and errors.</li> <li>Use automated, scriptable tools to mimic end-to-end important code paths relatable to activities in the application. Create alert polices on user impacting events or metric rate of change.</li> <li>Alert fatigue is real. Engineers are recommended to pay attention to their monitoring system so that accurate alerts and thresholds can be defined.</li> <li>Establish a primary channel for alerts that needs immediate attention and tag the right team/person(s) based on the nature of the incident. Not every single alert needs to be sent to the primary on-call channel.</li> <li>Establish a secondary channel for items that need to be looked into and does not affect the users, yet. For example, storage that nearing capacity threshold. These items will be what the engineering services will look to regularly to monitor the health of the system.</li> <li>Ensure to set up proper alerting for failures in dependent services like Redis cache, Service Bus etc. For example, if Redis cache is throwing 10 exceptions in last 60 secs, proper alerts are recommended to be created so that these failures are surfaced and action be taken.</li> <li>It is important to learn from each incident and continually improve the process. After every incident has been triaged, conduct a post mortem of the scenario. Scenarios and situations that were not initially considered will occur, and the post-mortem workflow is a great way to highlight that to improve the monitoring/alerting of the system. Configuring an alert to detect that incident scenario is a good idea to see if the event occurs again.</li> </ul>"},{"location":"observability/best-practices/","title":"Recommended Practices","text":"<ol> <li>Correlation Id: Include unique identifier at the start of the interaction to tie down aggregated data from various system components and provide a holistic view. Read more guidelines about using correlation id.</li> <li>Ensure health of the services are monitored and provide insights into system's performance and behavior.</li> <li> <p>Ensure dependent services are monitored properly. Errors and exceptions in dependent services like Redis cache, Service bus, etc. should be logged and alerted. Also, metrics related to dependent services should be captured and logged.</p> <p>- Additionally, failures in dependent services should be propagated up each level of the stack by the health check.</p> </li> <li> <p>Faults, crashes, and failures are logged as discrete events. This helps engineers identify problem area(s) during failures.</p> </li> <li>Ensure logging configuration (eg: setting logging to \"verbose\") can be controlled without code changes.</li> <li>Ensure that metrics around latency and duration are collected and can be aggregated.</li> <li>Start small and add where there is customer impact. Avoiding metric fatigue is very crucial to collecting actionable data.</li> <li>It is important that every data that is collected contains relevant and rich context.</li> <li>Personally Identifiable Information or any other customer sensitive information should never be logged. Special attention should be paid to any local privacy data regulations and collected data must adhere to those. (ex: GDPR)</li> <li>Health checks : Appropriate health checks should added to determine if service is healthy and ready to serve traffic. On a kubernetes platform different types of probes e.g. Liveness, Readiness, Startup etc. can be used to determine health and readiness of the deployed service.</li> </ol> <p>Read more here to understand what to watch out for while designing and building an observable system.</p>"},{"location":"observability/correlation-id/","title":"Correlation IDs","text":""},{"location":"observability/correlation-id/#the-need","title":"The Need","text":"<p>In a distributed system architecture (microservice architecture), it is highly difficult to understand a single end to end customer transaction flow through the various components.</p> <p>Here are some the general challenges -</p> <ul> <li>It becomes challenging to understand the end-to-end behavior of a client request entering the application.</li> <li>Aggregation: Consolidating logs from multiple components and making sense out of these logs is difficult, if not impossible.</li> <li>Cyclic dependencies on services, course of events and asynchronous requests are not easily deciphered.</li> <li>While troubleshooting a request, the diagnostic context of the logs are very important to get to the root of the problem.</li> </ul>"},{"location":"observability/correlation-id/#solution","title":"Solution","text":"<p>A Correlation ID is a unique identifier that is added to the very first interaction (incoming request) to  identify the context and is passed to all components that are involved in the transaction flow. Correlation ID becomes the glue that binds the transaction together and helps to draw an overall picture of events.</p> <p>Note: Before implementing your own Correlation ID, investigate if your telemetry tool of choice provides an auto-generated Correlation ID and that it serves the purposes of your application. For instance, Application Insights offers dependency auto-collection for some application frameworks</p>"},{"location":"observability/correlation-id/#recommended-practices","title":"Recommended Practices","text":"<ol> <li>Assign each external request a Correlation ID that binds the message to a transaction.</li> <li>The Correlation ID for a transaction must be assigned as early as you can.</li> <li>Propagate Correlation ID to all downstream components/services.</li> <li>All components/services of the transaction use this Correlation ID in their logs.</li> <li>For an HTTP Request, Correlation ID is typically passed in the header.</li> <li>Add it to an outgoing response where possible.</li> <li>Based on the use case, there can be additional correlation IDs that may be needed. For instance, tracking logs based on both Session ID and User ID may be required. While adding multiple correlation ID, remember to propagate them through the components.</li> </ol> <p>Consider using OpenTelemetry as it implements open-source cross-platform context propagation for end-to-end distributed transactions over heterogeneous components out-of-the-box. It takes care of automatically creating and managing the \"Correlation-id\", called TraceId.</p>"},{"location":"observability/correlation-id/#use-cases","title":"Use Cases","text":""},{"location":"observability/correlation-id/#log-correlation","title":"Log Correlation","text":"<p>Log correlation is the ability to track disparate events through different parts of the application. Having a Correlation ID provides more context making it easy to build rules for reporting and analysis.</p>"},{"location":"observability/correlation-id/#secondary-reportingobserver-systems","title":"Secondary Reporting/Observer Systems","text":"<p>Using Correlation ID helps secondary systems to correlate data without application context. Some examples - generating metrics based on tracing data, integrating runtime/system diagnostics etc. For example, feeding AppInsights data and correlating it to infrastructure issues.</p>"},{"location":"observability/correlation-id/#troubleshooting-errors","title":"Troubleshooting Errors","text":"<p>For troubleshooting an errors, Correlation ID is a great starting point to trace the workflow of a transaction.</p>"},{"location":"observability/diagnostic-tools/","title":"Diagnostic tools","text":"<p>Besides Logging, Tracing and Metrics, there are additional tools to help diagnose issues when applications do not behave as expected. In some scenarios, analyzing the memory consumption and drilling down into why a specific process takes longer than expected may require additional measures. In these cases, platform or programming language specific diagnostic tools come into play and are useful to debug a memory leak, profile the CPU usage, or the cause of delays in multi-threading.</p>"},{"location":"observability/diagnostic-tools/#profilers-and-memory-analyzers","title":"Profilers and Memory Analyzers","text":"<p>There are two types of diagnostics tools you may want to use: profilers and memory analyzers.</p>"},{"location":"observability/diagnostic-tools/#profiling","title":"Profiling","text":"<p>Profiling is a technique where you take small snapshots of all the threads in a running application to see the stack trace of each thread for a specified duration. This tool can help you identify where you are spending CPU time during the execution of your application. There are two main techniques to achieve this: CPU-Sampling and Instrumentation.</p> <p>CPU-Sampling is a non-invasive method which takes snapshots of all the stacks at a set interval. It is the most common technique for profiling and doesn't require any modification to your code.</p> <p>Instrumentation is the other technique where you insert a small piece of code at the beginning and end of each function which is going to signal back to the profiler about the time spent in the function, the function name, parameters and others. This way you modify the code of your running application. There are two effects to this: your code may run a little bit more slowly, but on the other hand you have a more accurate view of every function and class that has been executed so far in your application.</p>"},{"location":"observability/diagnostic-tools/#when-to-use-sampling-vs-instrumentation","title":"When to use Sampling vs Instrumentation?","text":"<p>Not all programming languages support instrumentation. Instrumentation is mostly supported for compiled languages like .NET and Java, and some languages interpreted at runtime like Python and Javascript. Keep in mind that enabling instrumentation can require to modify your build pipeline, i.e. by adding special parameters to the command line argument. You should normally start with Sampling because it doesn't require to modify your binaries, it doesn't affect your process performance, and can be quicker to start with.</p> <p>Once you have your profiling data, there are multiple ways to visualize this information depending of the format you saved it. As an example for .NET (dotnet-trace), there are three available formats to save these traces: Chromium, NetTrace and SpeedScope. Select the output format depending on the tool you are going to use. SpeedScope is an online web application you can use to visualize and analyze traces, and you only need a modern browser. Be careful with online tools, as dumps/traces might contain confidential information that you don't want to share outside of your organization.</p>"},{"location":"observability/diagnostic-tools/#memory-analyzers","title":"Memory Analyzers","text":"<p>Memory analyzers and memory dumps are another set of diagnostic tools you can use to identify issues in your process.  Normally these types of tools take the whole memory the process is using at a point in time and saves it in a file which  can be analyzed. When using these types of tools, you want to stress your process as much as possible to amplify whatever deficiency you may have in terms of memory management. The memory dump should then be taken when the process is in this stressed state.</p> <p>In some scenarios we recommend to take more than one memory dump during the reproduction of a problem. For example, if you suspect a memory leak and you are running a test for 30 min, it is useful to take at least 3 dumps at different intervals (i.e. 10, 20 &amp; 30 min) to compare them with each other.</p> <p>There are multiple ways to take a memory dump depending the operating system you are using. Also, each operating system has it own debugger which is able to load this memory dump, and explore the state of the process at the time the memory dump was taken.</p> <p>The most common debuggers are:</p> <ul> <li>Windows - WinDbg and WinDgbNext (included in the Windows SDK), Visual Studio can also load a memory dump for a .NET Framework and .NET Core process</li> <li>Linux - GDB is the GNU Debugger</li> <li>Mac OS - LLDB Debugger</li> </ul> <p>There are a range of developer platform specific diagnostic tools which can be used:</p> <ul> <li>.NET Core diagnostic tools, GitHub repository</li> <li>Java diagnostic tools - version specific</li> <li>Python debugging and profiling - version specific</li> <li>Node.js Diagnostics working group</li> </ul>"},{"location":"observability/diagnostic-tools/#environment-for-profiling","title":"Environment for Profiling","text":"<p>To create an application profile as close to production as possible, the environment in which the application is intended to run in production has to be considered and it might be necessary to perform a snapshot of the application state under load.</p>"},{"location":"observability/diagnostic-tools/#diagnostics-in-containers","title":"Diagnostics in Containers","text":"<p>For monolithic applications, diagnostics tools can be installed and run on the VM hosting them. Most scalable applications are developed as microservices and have complex interactions which require to install the tools in the containers running the process or to leverage a sidecar container (see sidecar pattern). Some platforms expose endpoints to interact with the application and return a dump.</p>"},{"location":"observability/diagnostic-tools/#resources","title":"Resources","text":"<ul> <li>.NET Core diagnostics in containers</li> <li>Experimental tool dotnet-monitor, What's new, GItHub repository</li> <li>Spring Boot actuator endpoints</li> </ul>"},{"location":"observability/log-vs-metric-vs-trace/","title":"Logs vs Metrics vs Traces","text":""},{"location":"observability/log-vs-metric-vs-trace/#overview","title":"Overview","text":""},{"location":"observability/log-vs-metric-vs-trace/#metrics","title":"Metrics","text":"<p>The purpose of metrics is to inform observers about the health &amp; operations regarding a component or system. A metric represents a point in time measurement of a particular source, and data-wise it tends to be very small. The compact size allows for efficient collection even at scale in large systems. Metrics also lend themselves very well to pre-aggregation within the component before collection, reducing computation cost for processing &amp; storing large numbers of metric time series in a central system. Due to how efficiently metrics are processed &amp; stored, it lends itself very well for use in automated alerting, as metrics are an excellent source for the health data for all components in the system.</p>"},{"location":"observability/log-vs-metric-vs-trace/#logs","title":"Logs","text":"<p>Log data inform observers about the discrete events that occurred within a component or a set of components. Just about every software component logs information about its activities over time. This rich data tends to be much larger than metric data and can cause processing issues, especially if components are logging too verbosely. Therefore, using log data to understand the health of an extensive system tends to be avoided and depends on metrics for that data. Once metric telemetry highlights potential problem sources, filtered log data for those sources can be used to understand what occurred.</p>"},{"location":"observability/log-vs-metric-vs-trace/#traces","title":"Traces","text":"<p>Whereas logging provides an overview to a discrete, event-triggered log, tracing encompasses a much wider, continuous view of an application. The goal of tracing is to following a program\u2019s flow and data progression.</p> <p>In many instances, tracing represents a single user\u2019s journey through an entire app stack. Its purpose isn\u2019t reactive, but is instead focused on optimization. By tracing through a stack, developers can identify bottlenecks and focus on improving performance.</p> <p>A distributed trace is defined as a collection of spans. A span is the smallest unit in a trace and represents a piece of the workflow in a distributed landscape. It can be an HTTP request, call to a database, or execution of a message from a queue.</p> <p>When a problem does occur, tracing allows you to see how you got there:</p> <ul> <li>Which function.</li> <li>The function\u2019s duration.</li> <li>Parameters passed.</li> <li>How deep into the function the user could get.</li> </ul>"},{"location":"observability/log-vs-metric-vs-trace/#usage-guidance","title":"Usage Guidance","text":"<p>When to use metric or log data to track a particular piece of telemetry can be summarized with the following points:</p> <ul> <li>Use metrics to track the occurrence of an event, counting of items, the time taken to perform an action or to report the current value of a resource (CPU, memory, etc.)</li> <li>Use logs to track detailed information about an event also monitored by a metric, particularly errors, warnings or other exceptional situations.</li> <li>A trace provides visibility into how a request is processed across multiple services in a microservices environment. Every trace needs to have a unique identifier associated with it.</li> </ul>"},{"location":"observability/logs-privacy/","title":"Guidance for Privacy","text":""},{"location":"observability/logs-privacy/#overview","title":"Overview","text":"<p>To ensure the privacy of your system users, as well as comply with several regulations like GDPR, some types of data shouldn\u2019t exist in logs. This includes customer's sensitive, Personal Identifiable Information (PII), and any other data that wasn't legally sanctioned.</p>"},{"location":"observability/logs-privacy/#recommended-practices","title":"Recommended Practices","text":"<ol> <li>Separate components and minimize the parts of the system that log sensitive data.</li> <li>Keep sensitive data out of URLs, since request URLs are typically logged by proxies and web servers.</li> <li>Avoid using PII data for system debugging as much as possible. For example, use ids instead of usernames.</li> <li>Use Structured Logging and include a deny-list for sensitive properties.</li> <li>Put an extra effort on spotting logging statements with sensitive data during code review, as it is common for reviewers to skip reading logging statements. This can be added as an additional checkbox if you're using Pull Request Templates.</li> <li>Include mechanisms to detect sensitive data in logs, on your organizational pipelines for QA or Automated Testing.</li> </ol>"},{"location":"observability/logs-privacy/#tools-and-implementation-methods","title":"Tools and Implementation Methods","text":"<p>Use these tools and methods for sensitive data de-identification in logs.</p>"},{"location":"observability/logs-privacy/#application-insights","title":"Application Insights","text":"<p>Application Insights offers telemetry interception in some of the SDKs, that can be done by implementing the <code>ITelemetryProcessor</code> interface. ITelemetryProcessor processes the telemetry information before it is sent to Application Insights, and can be useful in many situations, such as filtering and modifications. Below is an example of intercepting 'trace' typed telemetry:</p> <pre><code>using Microsoft.ApplicationInsights.DataContracts;\n\nnamespace Example\n{\n    using Microsoft.ApplicationInsights.Channel;\n    using Microsoft.ApplicationInsights.Extensibility;\n\n    internal class RedactTelemetryInitializer : ITelemetryInitializer\n    {\n        public void Initialize(ITelemetry telemetry)\n        {\n            var requestTelemetry = telemetry as TraceTelemetry;\n            if (requestTelemetry == null) return;\n            # redact emails from the message parameter\n            requestTelemetry.Message = Regex.Replace(requestTelemetry.Message, @\"[^@\\s]+@[^@\\s]+\\.[^@\\s]+\", \"[email removed]\");\n        }\n    }\n}\n</code></pre>"},{"location":"observability/logs-privacy/#elastic-stack","title":"Elastic Stack","text":"<p>Elastic Stack (formerly \"ELK stack\") allows logs interception by Logstash's filter-plugins. Using some of the existing plugins, like 'mutate', 'alter' and 'prune' might be sufficient for most cases of deidentifying and redacting PIIs. For a more robust and customized use-case, a 'ruby' plugin can be used, executing arbitrary Ruby code. Filter plugins also exists in some Logstash alternatives, like Fluentd and Fluent Bit.</p>"},{"location":"observability/logs-privacy/#presidio","title":"Presidio","text":"<p>Presidio offers data protection and anonymization API. It provides fast identification and anonymization modules for private entities in text. Presidio allows using predefined or custom PII recognizers, leveraging Named Entity Recognition, regular expressions, rule based logic and checksum with relevant context in multiple languages. It can be used alongside the log interception methods mentioned above to help and ensure sensitive data is properly managed and governed. Presidio is containerized for REST HTTP API and also can be installed as a python package, to be called from python code. Instead of handling the anonymization in the application code, both APIs can be used using external calls. Elastic Stack, for example, can handle PII redaction using the 'ruby' filter plugin to call Presidio in REST HTTP API, or by calling a python script consuming Presidio as a package:</p> <p><code>logstash.conf</code></p> <pre><code>input {\n    ...\n}\n\nfilter {\n   ruby {\n    code =&gt; 'require \"open3\"\n             message = event.get(\"message\")\n             # Call a python script triggering Presidio analyzer and anonymizer, and printing the result.\n             cmd =  \"python /path/to/presidio/anonymization/script.py \\\"#{message}\\\"\"\n             # Fetch the script's stdout\n             stdin, stdout, stderr = Open3.popen3(cmd)\n             # Override message with the anonymized text.\n             event.set(\"message\", stdout.read)\n             filter_matched(event)'\n   }\n}\n\noutput {\n    ...\n}\n</code></pre>"},{"location":"observability/microservices/","title":"Observability in Microservices","text":"<p>Microservices is a very popular software architecture, where the application is arranged as a collection of loosely coupled services. Some of those services can be written in different languages by different teams.</p>"},{"location":"observability/microservices/#motivations","title":"Motivations","text":"<p>We need to consider special cases when creating a microservice architecture from the perspective of observability. We want to capture the interactions when making requests between those microservices and correlate them.</p> <p>Imagine we have a microservice that accesses a database to retrieve some data as part of a request. This microservice is going to be called by someone else as part of an incoming http request or an internal process being executed. What happens if a problem occurs during the retrieval of the data (or the update of the data)? How can we associate, or correlate, that this particular call failed in the destination microservice?</p> <p>This is a common issue. When calling other microservices, depending on the technology stack we use, we can accidentally hide errors and exceptions that might happen on the other side. If we are using a simple REST interface, the other microservice can return a 500 HTTP status code and we don't have any idea what happen inside that microservice.</p> <p>More important, we don't have any way to associate our Correlation Id to whatever happens inside that microservice. Therefore, is so important to have a plan in place to be able to extend your traceability and monitoring efforts, especially when using a microservice architecture.</p>"},{"location":"observability/microservices/#how-to-extend-your-tracing-information-between-microservices","title":"How to Extend Your Tracing Information Between Microservices","text":"<p>The W3C consortium is working on a Trace Context definition that can be applied when using HTTP as the protocol in a microservice architecture. But let's explain how we can implement this functionality in our software.</p> <p>The main idea behind this is to propagate the correlation information between HTTP request so other pieces of software can read this information and correctly correlate telemetry across microservices.</p> <p>The way to propagate this information is to use HTTP Headers for the Correlation Id, parent Correlation Id, etc.</p> <p>When you are in the scope of a HTTP Request, your tracing system should already have created four properties that you can use to send across your microservices.</p> <ul> <li>RequestId:0HLQV2BC3VP2T:00000001,</li> <li>SpanId:da13aa3c6fd9c146,</li> <li>TraceId:f11a03e3f078414fa7c0a0ce568c8b5c,</li> <li>ParentId:5076c17d0a604244</li> </ul> <p>This is an example of the four properties you can find which identify the current request.</p> <ul> <li>RequestId is the unique id that represent the current HTTP Request.</li> <li>SpanId is the default automatically generated span. You can have more than one Span that scope different functionality inside your software.</li> <li>TraceId represent the id for current log trace.</li> <li>ParentId is the parent span id, that in some case can be the same or something different.</li> </ul>"},{"location":"observability/microservices/#example","title":"Example","text":"<p>Now we are going to explore an example with 3 microservices that calls to each other in a row.</p> <p></p> <p>This image is the summary of what is needed in each microservice to propagate the trace-id from A to C.</p> <p>The root caller is A and that is why it doesn't have a parent-id, only have a new trace-id. Next, A calls B using HTTP. To propagate the correlation information as part of the request, we are using two new headers based on the W3C Correlation specification, trace-id and parent-id. In this example because A is the root caller, A only sends its own trace-id to microservice B.</p> <p>When microservice B receives the incoming HTTP request, it checks the contents of these two headers. It reads the content of the trace-id header and sets its own parent-id to this trace-id (as shown in the green rectangle inside's B). In addition, it creates a new trace-id to signal that is a new scope for the telemetry. During the execution of microservice B, it also calls microservice C and repeats the pattern. As part of the request it includes the two headers and propagates trace-id and parent-id as well.</p> <p>Finally, microservice C, reads the value for the incoming trace-id and sets as his own parent-id, but also creates a new trace-id that will use to send telemetry about his own operations.</p>"},{"location":"observability/microservices/#summary","title":"Summary","text":"<p>A number of Application Monitoring (APM) technology products already supports most of this Correlation Propagation. The most popular is OpenZipkin/B3-Propagation. W3C already proposed a recommendation for the W3C Trace Context, where you can see what SDK and frameworks already support this functionality. It's important to correctly implement the propagation specially when there are different teams that used different technology stacks in the same project.</p> <p>Consider using OpenTelemetry as it implements open-source cross-platform context propagation for end-to-end distributed transactions over heterogeneous components out-of-the-box. It takes care of automatically creating and managing the Trace Context object among a full stack of microservices implemented across different technical stacks.</p>"},{"location":"observability/ml-observability/","title":"Observability in Machine Learning","text":"<p>Development process of software system with machine learning component is more complex than traditional software. We need to monitor changes and variations in three dimensions: the code, the model and the data. We can distinguish two stages of such system lifespan: experimentation and production that require  different approaches to observability as discussed below:</p>"},{"location":"observability/ml-observability/#model-experimentation-and-tuning","title":"Model Experimentation and Tuning","text":"<p>Experimentation is a process of finding suitable machine learning model and its parameters via training and evaluating such models with one or more datasets.</p> <p>When developing and tuning machine learning models, the data scientists are interested in observing and comparing selected performance metrics for various model parameters. They also need a reliable way to reproduce a training process, such that a given dataset and given parameters produces the same models.</p> <p>There are many model metric evaluation solutions available, both open source (like MLFlow) and proprietary (like Azure Machine Learning Service), and of which some serve different purposes. To capture model metrics, there are a.o. the following options available:</p> <p>Azure Machine Learning Service SDK Azure Machine Learning service provides an SDK for Python, R and C# to capture your evaluation metrics to an Azure Machine Learning service (AML) Experiment. Experiments are viewed in the AML dashboard. Reproducibility is achieved by storing code or notebook snapshot together with viewed metric. You can create versioned Datasets within Azure Machine Learning service.</p> <p>MLFlow (for Databricks) MLFlow is open source framework, and can be hosted on Azure Databricks as its remote tracking server (it currently is the only solution that offers first-party integration with Databricks). You can use the MLFlow SDK tracking component to capture your evaluation metrics or any parameter you would like and track it at experimentation board in Azure Databricks. Source code and dataset version are also saved with log snapshot to provide reproducibility.</p> <p>TensorBoard TensorBoard is a popular tool amongst data scientist to visualize specific metrics of Deep Learning runs, especially of TensorFlow runs. TensorBoard is not an MLOps tool like AML/MLFlow, and therefore does not offer extensive logging capabilities. It is meant to be transient; and can therefore be used as an addition to an end-to-end MLOps tool like AML, but not as a complete MLOps tool.</p> <p>Application Insights Application Insights can be used as an alternative sink to capture model metrics, and can therefore offer more extensive options as metrics can be transferred to e.g. a PowerBI dashboard. It also enables log querying. However, this solution means that a custom application needs to be written to send logs to AppInsights (using for example the OpenCensus Python SDK), which would mean extra effort of creating/maintaining custom code.</p> <p>An extensive comparison of the four tools can be found as follows:</p> Azure ML MLFlow TensorBoard Application Insights Metrics support Values, images, matrices, logs Values, images, matrices and plots as files Metrics relevant to DL research phase Values, images, matrices, logs Customizabile Basic Basic Very basic High Metrics accessible AML portal, AML SDK MLFlow UI, Tracking service API Tensorboard UI, history object Application Insights Logs accessible Rolling logs written to .txt files in blob storage, accessible via blob or AML portal. Not query-able Rolling logs are not stored Rolling logs are not stored Application Insights in Azure Portal. Query-able with KQL Ease of use and set up Very straightforward, only one portal More moving parts due to remote tracking server A bit over process overhead. Also depending on ML framework More moving parts as a custom app needs to be maintained Shareability Across people with access to AML workspace Across people with access to remote tracking server Across people with access to same directory Across people with access to AppInsights"},{"location":"observability/ml-observability/#model-in-production","title":"Model in Production","text":"<p>The trained model can be deployed to production as container. Azure Machine Learning service provides SDK to deploy model as Azure Container Instance and publishes REST endpoint. You can monitor it using microservice observability methods( for more details -refer to Recipes section). MLFLow is an alternative way to deploy ML model as a service.</p>"},{"location":"observability/ml-observability/#training-and-re-training","title":"Training and Re-Training","text":"<p>To automatically retrain the model you can use AML Pipelines or Azure Databricks. When re-training with AML Pipelines you can monitor information of each run, including the output, logs, and various metrics in the Azure portal experiment dashboard, or manually extract it using the AML SDK</p>"},{"location":"observability/ml-observability/#model-performance-over-time-data-drift","title":"Model Performance Over Time: Data Drift","text":"<p>We re-train machine learning models to improve their performance and make models better aligned with data changing over time. However, in some cases model performance may degrade. This may happen in case data change dramatically and do not exhibit the patterns we observed during model development anymore. This effect is called data drift. Azure Machine Learning Service has preview feature to observe and report data drift. This article describes it in detail.</p>"},{"location":"observability/ml-observability/#data-versioning","title":"Data Versioning","text":"<p>It is recommended practice to add version to all datasets. You can create a versioned Azure ML Dataset for this purpose, or manually version it if using other systems.</p>"},{"location":"observability/observability-as-code/","title":"Observability as Code","text":"<p>As much as possible, configuration and management of observability assets such as cloud resource provisioning, monitoring alerts and dashboards must be managed as code. Observability as Code is achieved using any one of Terraform / Ansible / ARM Templates</p>"},{"location":"observability/observability-as-code/#examples-of-observability-as-code","title":"Examples of Observability as Code","text":"<ol> <li>Dashboards as Code - Monitoring Dashboards can be created as JSON or XML templates. This template is source control maintained and any changes to the dashboards can be reviewed. Automation can be built for enabling the dashboard. More about how to do this in Azure. Grafana dashboard can also be configured as code which eventually can be source-controlled to be used in automation and pipelines.</li> <li>Alerts as Code - Alerts can be created within Azure by using Terraform or ARM templates. Such alerts can be source-controlled and be deployed as part of pipelines (Azure DevOps pipelines, Jenkins, GitHub Actions etc.). Few references of how to do this are: Terraform Monitor Metric Alert. Alerts can also be created based on log analytics query and can be defined as code using Terraform Monitor Scheduled Query Rules Alert.</li> <li>Automating Log Analytics Queries - There are several use cases where automation of log analytics queries may be needed. Example, Automatic Report Generation, Running custom queries programmatically for analysis, debugging etc. For these use cases to work, log queries should be source-controlled and automation can be built using log analytics REST or azure cli.</li> </ol>"},{"location":"observability/observability-as-code/#why","title":"Why","text":"<ul> <li>It makes configuration repeatable and automatable. It also avoids manual configuration of monitoring alerts and dashboards from scratch across environments.</li> <li>Configured dashboards help troubleshoot errors during integration and deployment (CI/CD)</li> <li>We can audit changes and roll them back if there are any issues.</li> <li>Identify actionable insights from the generated metrics data across all environments, not just production.</li> <li>Configuration and management of observability assets like alert threshold, duration, configuration values using IAC help us in avoiding configuration mistakes, errors or overlooks during deployment.</li> <li>When practicing observability as code, the changes can be reviewed by the team similar to other code contributions.</li> </ul>"},{"location":"observability/observability-databricks/","title":"Observability for Azure Databricks","text":""},{"location":"observability/observability-databricks/#overview","title":"Overview","text":"<p>Azure Databricks is an Apache Spark\u2013based analytics service that makes it easy to rapidly develop and deploy big data analytics. Monitoring and troubleshooting performance issues is critical when operating production Azure Databricks workloads. It is important to log adequate information from Azure Databricks so that it is helpful to monitor and troubleshoot performance issues.</p> <p>Spark is designed to run on a cluster - a cluster is a set of Virtual Machines (VMs). Spark can horizontally scale with bigger workloads needed more VMs. Azure Databricks can scale in and out as needed.</p>"},{"location":"observability/observability-databricks/#approaches-to-observability","title":"Approaches to Observability","text":""},{"location":"observability/observability-databricks/#azure-diagnostic-logs","title":"Azure Diagnostic Logs","text":"<p>Azure Diagnostic Logging is provided out-of-the-box by Azure Databricks, providing visibility into actions performed against DBFS, Clusters, Accounts, Jobs, Notebooks, SSH, Workspace, Secrets, SQL Permissions, and Instance Pools.</p> <p>These logs are enabled using Azure Portal or CLI and can be configured to be delivered to one of these Azure resources.</p> <ul> <li>Log Analytics Workspace</li> <li>Blob Storage</li> <li>Event Hub</li> </ul>"},{"location":"observability/observability-databricks/#cluster-event-logs","title":"Cluster Event Logs","text":"<p>Cluster Event logs provide a quick overview into important Cluster lifecycle events. The log are structured - Timestamp, Event Type and Details. Unfortunately, there is no native way to export logs to Log Analytics. Logs will have to be delivered to Log Analytics either using REST API or polled in the dbfs using Azure Functions.</p>"},{"location":"observability/observability-databricks/#vm-performance-metrics-oms","title":"VM Performance Metrics (OMS)","text":"<p>Log Analytics Agent provides insights into the performance counters from the Cluster VMs and helps to understand the Cluster Utilization patters. Leveraging Linux OMX Agent to onboard VMs into Log Analytics, helps provide insights into the VM metrics, performance, inventory and syslog metrics. It is important to note that Linux OMS Agent is not specific to Azure Databricks.</p>"},{"location":"observability/observability-databricks/#application-logging","title":"Application Logging","text":"<p>Of all the logs collected, this is perhaps the most important one. Spark Monitoring library collects metrics about the driver, executors, JVM, HDFS, cache shuffling, DAGs, and much more. This library provides helpful insights to fine-tune Spark jobs. It allows monitoring and tracing each layer within Spark workloads, including performance and resource usage on the host and JVM, as well as Spark metrics and application-level logging. The library also includes ready-made Grafana dashboards that is a great starting point for building Azure Databricks dashboard.</p>"},{"location":"observability/observability-databricks/#logs-via-rest-api","title":"Logs via REST API","text":"<p>Azure Databricks also provides REST API support. If there's any specific log data that is required, this data can be collected using the REST API calls.</p>"},{"location":"observability/observability-databricks/#nsg-flow-logs","title":"NSG Flow Logs","text":"<p>Network security group (NSG) flow logs is a feature of Azure Network Watcher that allows you to log information about IP traffic flowing through an NSG. Flow data is sent to Azure Storage accounts from where you can access it as well as export it to any visualization tool, SIEM, or IDS of your choice. This log information is not specific to NSG Flow logs. This data can be used to identify unknown or undesired traffic and monitor traffic levels and/or bandwidth consumption. This is possible only with VNET-injected workspaces.</p>"},{"location":"observability/observability-databricks/#platform-logs","title":"Platform Logs","text":"<p>Platform logs can be used to review provisioning/de-provisioning operations. This can be used to review activity in Databricks managed resource group. It helps discover operations performed at subscription level (like provisioning of VM, Disk etc.)</p> <p>These logs can be enabled via Azure Monitor &gt; Activity Logs and shipped to Log Analytics.</p>"},{"location":"observability/observability-databricks/#ganglia-metrics","title":"Ganglia Metrics","text":"<p>Ganglia metrics is a Cluster Utilization UI and is available on the Azure Databricks. It is great for viewing live metrics of interactive clusters. Ganglia metrics is available by default and takes snapshot of usage every 15 minutes. Historical metrics are stored as .png files, making it impossible to analyze data.</p>"},{"location":"observability/observability-pipelines/","title":"Observability of CI/CD Pipelines","text":"<p>With increasing complexity to delivery pipelines, it is very important to consider Observability in the context of build and release of applications.</p>"},{"location":"observability/observability-pipelines/#benefits","title":"Benefits","text":"<ul> <li>Having proper instrumentation during build time helps gain insights into the various stages of the build and release process.</li> <li>Helps developers understand where the pipeline performance bottlenecks are, based on the data collected. This helps in having data-driven conversations around identifying latency between jobs, performance issues, artifact upload/download times providing valuable insights into agents availability and capacity.</li> <li>Helps to identify trends in failures, thus allowing developers to quickly do root cause analysis.</li> <li>Helps to provide an organization-wide view of pipeline health to easily identify trends.</li> </ul>"},{"location":"observability/observability-pipelines/#points-to-consider","title":"Points to Consider","text":"<ul> <li>It is important to identify the Key Performance Indicators (KPIs) for evaluating a successful CI/CD pipeline. Where needed, additional tracing can be added to better record KPI metrics. For example, adding pipeline build tags to identify a 'Release Candidate' vs. 'Non-Release Candidate' helps in evaluating the end-to-end release process timeline.</li> <li>Depending on the tooling used (Azure DevOps, Jenkins etc.,), basic reporting on the pipelines is available out-of-the-box. It is important to evaluate these reports against the KPIs to understand if a custom reporting solution for their pipelines is needed. If required, custom dashboards can be built using third-party tools like Grafana or Power BI Dashboards.</li> </ul>"},{"location":"observability/pitfalls/","title":"Things to Watch for when Building Observable Systems","text":""},{"location":"observability/pitfalls/#observability-as-an-afterthought","title":"Observability as an Afterthought","text":"<p>One of the design goals when building a system should be to enable monitoring of the system. This helps planning and thinking application availability, logging and metrics at the time of design and development. Observability also acts as a great debugging tool providing developers a bird's eye view of the system. By leaving instrumentation and logging of metrics towards the end, the development teams lose valuable insights during development.</p>"},{"location":"observability/pitfalls/#metric-fatigue","title":"Metric Fatigue","text":"<ol> <li>It is recommended to collect and measure what you need and not what you can. Don't attempt to monitor everything.</li> <li>If the data is not actionable, it is useless and becomes noise. On the contrary, it is sometimes very difficult to forecast every possible scenario that could go wrong.</li> <li> <p>There must be a balance between collecting what is needed vs. logging every single activity in the system. A general rule of thumb is to follow these principles</p> <ul> <li>rules that catch incidents must be simple, relevant and reliable</li> <li>any data that is collected but not aggregated or alerted on must be reviewed if it is still required.</li> </ul> </li> </ol>"},{"location":"observability/pitfalls/#context","title":"Context","text":"<p>All data logged must contain rich context, which is useful for getting an overall view of the system and easy to trace back errors/failures during troubleshooting. While logging data, care must also be taken to avoid data silos.</p>"},{"location":"observability/pitfalls/#personally-identifiable-information","title":"Personally Identifiable Information","text":"<p>As a general rule, do not log any customer sensitive and Personal Identifiable Information (PII). Ensure any pertinent privacy regulations are followed regarding PII (Ex: GDPR etc.) Read more here on how to keep sensitive data out of logs.</p>"},{"location":"observability/profiling/","title":"Profiling","text":""},{"location":"observability/profiling/#overview","title":"Overview","text":"<p>Profiling is a form of runtime analysis that measures various components of the runtime such as, memory allocation, garbage collection, threads and locks, call stacks, or frequency and duration of specific functions. It can be used to see which functions are the most costly in your binary, allowing you to focus your effort on removing the largest inefficiencies as quickly as possible. It can help you find deadlocks, memory leaks, or inefficient memory allocation, and help inform decisions around resource allocation (ie: CPU or RAM).</p>"},{"location":"observability/profiling/#how-to-profile-your-applications","title":"How to Profile your Applications","text":"<p>Profiling is somewhat language dependent, so start off by searching for \"profile $language\" (some common tools are listed below). Additionally, Linux Perf is a good fallback, since a lot of languages have bindings in C/C++.</p> <p>Profiling does incur some cost, as it requires inspecting the call stack, and sometimes pausing the application all together (ie: to trigger a full GC in Java). It is recommended to continuously profile your services, say for 10s every 10 minutes. Consider the cost when deciding on tuning these parameters.</p> <p>Different tools visualize profiles differently. Common CPU profiles might use a directed graph  or a flame graph. </p> <p>Unfortunately, each profiler tool typically uses its own format for storing profiles, and comes with its own visualization.</p>"},{"location":"observability/profiling/#tools","title":"Tools","text":"<ul> <li>(Java, Go, Python, Ruby, eBPF) Pyroscope continuous profiling out of the box.</li> <li>(Java and Go) Flame - profiling containers in Kubernetes</li> <li>(Java, Python, Go) Datadog Continuous profiler</li> <li>(Go) profefe, which builds <code>pprof</code> to provide continuous profiling</li> <li>(Java) Eclipse Memory Analyzer</li> </ul>"},{"location":"observability/recipes-observability/","title":"Recipes","text":""},{"location":"observability/recipes-observability/#application-insightsaspnet","title":"Application Insights/ASP.NET","text":"<p>GitHub Repo, Article.</p>"},{"location":"observability/recipes-observability/#application-insightsaspnet-core-with-distributed-trace-context-propagation-to-kafka","title":"Application Insights/ASP.NET Core with Distributed Trace Context Propagation to Kafka","text":"<p>GitHub Repo.</p>"},{"location":"observability/recipes-observability/#example-opentelemetry-over-a-message-oriented-architecture-in-java-with-jaeger-prometheus-and-azure-monitor","title":"Example: OpenTelemetry Over a Message Oriented Architecture in Java with Jaeger, Prometheus and Azure Monitor","text":"<p>GitHub Repo</p>"},{"location":"observability/recipes-observability/#example-setup-azure-monitor-dashboards-and-alerts-with-terraform","title":"Example: Setup Azure Monitor Dashboards and Alerts with Terraform","text":"<p>GitHub Repo</p>"},{"location":"observability/recipes-observability/#on-premises-application-insights","title":"On-premises Application Insights","text":"<p>On-premise Application Insights is a service that is compatible with Azure App Insights, but stores the data in an in-house database like PostgreSQL or object storage like Azurite.</p> <p>On-premises Application Insights is useful as a drop-in replacement for Azure Application Insights in scenarios where a solution must be cloud deployable but must also support on-premises disconnected deployment scenarios.</p> <p>On-premises Application Insights is also useful for testing telemetry integration. Issues related to telemetry can be hard to catch since often these integrations are excluded from unit-test or integration test flows due to it being non-trivial to use a live Azure Application Insights resource for testing, e.g. managing the lifetime of the resource, having to ignore old telemetry for assertions, if a new resource is used it can take a while for the telemetry to show up, etc. The On-premise Application Insights service can be used to make it easier to integrate with an Azure Application Insights compatible API endpoint during local development or continuous integration without having to spin up a resource in Azure. Additionally, the service simplifies integration testing of asynchronous workflows such as web workers since integration tests can now be written to assert against telemetry logged to the service, e.g. assert that no exceptions were logged, assert that some number of events of a specific type were logged within a certain time-frame, etc.</p>"},{"location":"observability/recipes-observability/#azure-devops-pipelines-reporting-with-power-bi","title":"Azure DevOps Pipelines Reporting with Power BI","text":"<p>The Azure DevOps Pipelines Report contains a Power BI template for monitoring project, pipeline, and pipeline run data from an Azure DevOps (AzDO) organization.</p> <p>This dashboard recipe provides observability for AzDO pipelines by displaying various metrics (i.e. average runtime, run outcome statistics, etc.) in a table. Additionally, the second page of the template visualizes pipeline success and failure trends using Power BI charts. Documentation and setup information can be found in the project README.</p>"},{"location":"observability/recipes-observability/#python-logger-class-for-application-insights-using-opencensus","title":"Python Logger Class for Application Insights using OpenCensus","text":"<p>The Azure SDK for Python contains an Azure Monitor Opentelemetry Distro client library for Python . You can view samples of how to use the library in this GitHub Repo. With this library you can easily collect traces, metrics, and logs.</p>"},{"location":"observability/recipes-observability/#java-opentelemetry-examples","title":"Java OpenTelemetry Examples","text":"<p>This GitHub Repo contains a set of fully-functional, working examples of using the OpenTelemetry Java APIs and SDK.</p>"},{"location":"observability/pillars/dashboard/","title":"Dashboard","text":""},{"location":"observability/pillars/dashboard/#overview","title":"Overview","text":"<p>Dashboard is a form of data visualization that provides \"at a glance\" view of Key Performance Indicators(KPIs) of observable system. Dashboard connects multiple data sources allowing creation of visual representation of data insights which otherwise are difficult to understand. Dashboard can be used to:</p> <ul> <li>show trends</li> <li>identify patterns(user, usage, search etc)</li> <li>measure efficiency easily</li> <li>identify data outliers and correlations</li> <li>view health state or performance of the system</li> <li>give an outlook of the KPI that is important to a business/process</li> </ul>"},{"location":"observability/pillars/dashboard/#best-practices","title":"Best Practices","text":"<p>Common questions to ask yourself when building dashboard would be:</p> <ul> <li>Where did my user spend most of their time at?</li> <li>What is my user searching?</li> <li>How do I better help my team with alerts and troubleshooting?</li> <li>Is my system healthy for the past one day/week/month/quarter?</li> </ul> <p>Here are principles to consider when building dashboards:</p> <ol> <li>Separate a dashboard in multiple sections for simplicity. Adding page jump or anchor(#section) is also a plus if applicable.</li> <li>Add multiple and simple charts. Build simple chart, have more of them rather than a complicated all in one chart.</li> <li>Identify goals or KPI measurement. Identifying goals or KPI helps in defining what needs to be achieved. Here are some examples - server downtime, mean time to address error, service level agreement.</li> <li>Ask questions that can help reach the defined goal or KPI. This may sound counter-intuitive, the more questions asked while constructing dashboard the better the outcome will be. Questions like location, internet service provider, time of day the users make requests to server would be a good start.</li> <li>Validate the questions. This is often done with stakeholders, sponsors, leads or project managers.</li> <li>Observe the dashboard that is built. Is the data reflecting what the stakeholders set out to answer?</li> <li>Always remember this process takes time. Building dashboard is easy, building an observable dashboard to show pattern is hard.</li> </ol>"},{"location":"observability/pillars/dashboard/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Azure Monitor Workbooks - Supporting markdown, Azure Workbooks is tightly integrated with Azure services making this highly customizable without extra tool.</li> <li>Create dashboard using log query - Dashboard can be created using log query on Log Analytics data.</li> <li>Building dashboards using Application Insights - Dashboards can be created using Application Insights as well.</li> <li>Power Bi - Power Bi is one of the easier tools to create dashboards from data sources and reports.</li> <li>Grafana - Getting started with Grafana. Grafana is a popular open source tool for dashboarding and visualization.</li> <li>Azure Monitor as Grafana data source - This provides a step by step integration of Azure Monitor to Grafana.</li> <li>Brief comparison of various tools</li> </ul>"},{"location":"observability/pillars/dashboard/#dashboard-samples-and-recipes","title":"Dashboard Samples and Recipes","text":""},{"location":"observability/pillars/dashboard/#azure-workbooks","title":"Azure Workbooks","text":"<ul> <li>Performance analysis - A measurement on how the system performs. Workbook template available in gallery.</li> <li>Failure analysis - A report about system failure with details. Workbook template available in gallery.</li> <li>Application Performance Index(Apdex) - This is a way to measure user satisfaction. It classifies performance into three zones based on a baseline performance threshold T. The template for Appdex is available in Azure Workbooks gallery as well.</li> </ul>"},{"location":"observability/pillars/dashboard/#application-insights","title":"Application Insights","text":"<ul> <li>User retention analysis</li> <li>User navigation patterns analysis</li> <li>User session analysis</li> </ul> <p>For other tools, these can be used as a reference to recreate if a template is not readily available.</p>"},{"location":"observability/pillars/dashboard/#grafana-with-azure-monitor-as-data-source","title":"Grafana with Azure Monitor as Data Source","text":"<ul> <li>Azure Kubernetes Service - Cluster &amp; Namespace Metrics - Container Insights metrics for Kubernetes clusters. Cluster utilization, namespace utilization, Node cpu &amp; memory, Node disk usage &amp; disk io, node network &amp; kubelet docker operation metrics</li> <li>Azure Kubernetes Service - Container Level &amp; Pod Metrics - This contains Container level and Pod Metrics like CPU and Memory which are missing in the above dashboard.</li> </ul>"},{"location":"observability/pillars/dashboard/#summary","title":"Summary","text":"<p>In order to build an observable dashboard, the goal is to make use of collected metrics, logs, traces to give an insight on how the system performs, user behaves and identify patterns. There are a lot of tools and templates out there. Whichever the choice is, a good dashboard is always a dashboard that can help you answer questions about the system and user, keep track of the KPI and goal while also allowing informed business decisions to be made.</p>"},{"location":"observability/pillars/logging/","title":"Logging","text":""},{"location":"observability/pillars/logging/#overview","title":"Overview","text":"<p>Logs are discrete events with the goal of helping engineers identify problem area(s) during failures.</p>"},{"location":"observability/pillars/logging/#collection-methods","title":"Collection Methods","text":"<p>When it comes to log collection methods, two of the standard techniques are a direct-write, or an agent-based approach.</p> <p>Directly written log events are handled in-process of the particular component, usually utilizing a provided library. Azure Monitor has direct send capabilities, but it's not recommended for serious/production use. This approach has some advantages:</p> <ul> <li>There is no external process to configure or monitor</li> <li>No log file management (rolling, expiring) to prevent out of disk space issues.</li> </ul> <p>The potential trade-offs of this approach:</p> <ul> <li>Potentially higher memory usage if the particular library is using a memory backed buffer.</li> <li>In the event of an extended service outage, log data may get dropped or truncated due to buffer constraints.</li> <li>Multiple component process logging will manage &amp; emit logs individually, which can be more complex to manage for the outbound load.</li> </ul> <p>Agent-based log collection relies on an external process running on the host machine, with the particular component emitting log data stdout or file. Writing log data to stdout is the preferred practice when running applications within a container environment like Kubernetes. The container runtime redirects the output to files, which can then be processed by an agent. Azure Monitor, Grafana Loki Elastic's Logstash and Fluent Bit are examples of log shipping agents.</p> <p>There are several advantages when using an agent to collect &amp; ship log files:</p> <ul> <li>Centralized configuration.</li> <li>Collecting multiple sources of data with a single process.</li> <li>Local pre-processing &amp; filtering of log data before sending it to a central service.</li> <li>Utilizing disk space as a data buffer during a service disruption.</li> </ul> <p>This approach isn't without trade-offs:</p> <ul> <li>Required exclusive CPU &amp; memory resources for the processing of log data.</li> <li>Persistent disk space for buffering.</li> </ul>"},{"location":"observability/pillars/logging/#best-practices","title":"Best Practices","text":"<ul> <li>Pay attention to logging levels. Logging too much will increase costs and decrease application throughput.</li> <li>Ensure logging configuration can be modified without code changes. Ideally, make it changeable without application restarts.</li> <li>If available, take advantage of logging levels per category allowing granular logging configuration.</li> <li>Check for log levels before logging, thus avoiding allocations and string manipulation costs.</li> <li>Ensure service versions are included in logs to be able to identify problematic releases.</li> <li>Log a raised exception only once. In your handlers, only catch expected exceptions that you can handle gracefully (even with a specific return code). If you want to log and rethrow, leave it to the top level exception handler. Do the minimal amount of cleanup work needed then throw to maintain the original stack trace. Don\u2019t log a warning or stack trace for expected exceptions (eg: properly expected 404, 403 HTTP statuses).</li> <li>Fine tune logging levels in production (&gt;= warning for instance). During a new release the verbosity can be increased to facilitate bug identification.</li> <li>If using sampling, implement this at the service level rather than defining it in the logging system. This way we have control over what gets logged. An additional benefit is reduced number of roundtrips.</li> <li>Only include failures from health checks and non-business driven requests.</li> <li>Ensure a downstream system malfunction won't cause repetitive logs being stored.</li> <li>Don't reinvent the wheel, use existing tools to collect and analyze the data.</li> <li>Ensure personal identifiable information policies and restrictions are followed.</li> <li>Ensure errors and exceptions in dependent services are captured and logged. For example, if an application uses Redis cache, Service Bus or any other service, any errors/exceptions raised while accessing these services should be captured and logged.</li> </ul>"},{"location":"observability/pillars/logging/#if-theres-sufficient-log-data-is-there-a-need-for-instrumenting-metrics","title":"If there's Sufficient Log Data, is there a Need for Instrumenting Metrics?","text":"<p>Logs vs Metrics vs Traces covers some high level guidance on when to utilize metric data and when to use log data. Both have a valuable part to play in creating observable systems.</p>"},{"location":"observability/pillars/logging/#having-problems-identifying-what-to-log","title":"Having Problems Identifying What to Log?","text":"<p>At application startup:</p> <ul> <li>Unrecoverable errors from startup.</li> <li>Warnings if application still runnable, but not as expected (i.e. not providing blob connection string, thus resorting to local files. Another example is if there's a need to fail back to a secondary service or a known good state, because it didn\u2019t get an answer from a primary dependency.)</li> <li>Information about the service\u2019s state at startup (build #, configs loaded, etc.)</li> </ul> <p>Per incoming request:</p> <ul> <li>Basic information for each incoming request: the url (scrubbed of any personally identifying data, a.k.a. PII), any user/tenant/request dimensions, response code returned, request-to-response latency, payload size, record counts, etc. (whatever you need to learn something from the aggregate data)</li> <li>Warning for any unexpected exceptions, caught only at the top controller/interceptor and logged with or alongside the request info, with stack trace. Return a 500. This code doesn\u2019t know what happened.</li> </ul> <p>Per outgoing request:</p> <ul> <li>Basic information for each outgoing request: the url (scrubbed of any personally identifying data, a.k.a. PII), any user/tenant/request dimensions, response code returned, request-to-response latency, payload sizes, record counts returned, etc. Report perceived availability and latency of dependencies and including slicing/clustering data that could help with later analysis.</li> </ul>"},{"location":"observability/pillars/logging/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Azure Monitor - Umbrella of services including system metrics, log analytics and more.</li> <li>Grafana Loki - An open source log aggregation platform, built on the learnings from the Prometheus Community for highly efficient collection &amp; storage of log data at scale.</li> <li>The Elastic Stack - An open source log analytics tech stack utilizing Logstash, Beats, Elastic search and Kibana.</li> <li>Grafana - Open source dashboard &amp; visualization tool. Supports Log, Metrics and Distributed tracing data sources.</li> </ul>"},{"location":"observability/pillars/metrics/","title":"Metrics","text":""},{"location":"observability/pillars/metrics/#overview","title":"Overview","text":"<p>Metrics provide a near real-time stream of data, informing operators and stakeholders about the functions the system is performing as well as its health. Unlike logging and tracing, metric data tends to be more efficient to transmit and store.</p>"},{"location":"observability/pillars/metrics/#collection-methods","title":"Collection Methods","text":"<p>Metric collection approaches fall into two broad categories: push metrics &amp; pull metrics. Push metrics means that the originating component sends the data to a remote service or agent. Azure Monitor and Etsy's statsd are examples of push metrics. Some strengths with push metrics include:</p> <ul> <li>Only require network egress to the remote target.</li> <li>Originating component controls the frequency of measurement.</li> <li>Simplified configuration as the component only needs to know the destination of where to send data.</li> </ul> <p>Some trade-offs with this approach:</p> <ul> <li>At scale, it is much more difficult to control data transmission rates, which can cause service throttling or dropping of values.</li> <li>Determining if every component, particularly in a dynamic scale environment, is healthy and sending data is difficult.</li> </ul> <p>In the case of pull metrics, each originating component publishes an endpoint for the metric agent to connect to and gather measurements. Prometheus and its ecosystem of tools are an example of pull style metrics. Benefits experienced using a pull metrics setup may involve:</p> <ul> <li>Singular configuration for determining what is measured and the frequency of measurement for the local environment.</li> <li>Every measurement target has a meta metric related to if the collection is successful or not, which can be used as a general health check.</li> <li>Support for routing, filtering and processing of metrics before sending them onto a globally central metrics store.</li> </ul> <p>Items of concern to some may include:</p> <ul> <li>Configuring &amp; managing data sources can lead to a complex configuration. Prometheus has tooling to auto-discover and configure data sources in some environments, such as Kubernetes, but there are always exceptions to this, which lead to configuration complexity.</li> <li>Network configuration may add further complexity if firewalls and other ACLs need to be managed to allow connectivity.</li> </ul>"},{"location":"observability/pillars/metrics/#best-practices","title":"Best Practices","text":""},{"location":"observability/pillars/metrics/#when-should-i-use-metrics-instead-of-logs","title":"When Should I use Metrics Instead of Logs?","text":"<p>Logs vs Metrics vs Traces covers some high level guidance on when to utilize metric data and when to use log data. Both have a valuable part to play in creating observable systems.</p>"},{"location":"observability/pillars/metrics/#what-should-be-tracked","title":"What Should be Tracked?","text":"<p>System critical measurements that relate to the application/machine health, which are usually excellent alert candidates. Work with your engineering and devops peers to identify the metrics, but they may include:</p> <ul> <li>CPU and memory utilization.</li> <li>Request rate.</li> <li>Queue length.</li> <li>Unexpected exception count.</li> <li>Dependent service metrics like response time for Redis cache, Sql server or Service bus.</li> </ul> <p>Important business-related measurements, which drive reporting to stakeholders. Consult with the various stakeholders of the component, but some examples may include:</p> <ul> <li>Jobs performed.</li> <li>User Session length.</li> <li>Games played.</li> <li>Site visits.</li> </ul>"},{"location":"observability/pillars/metrics/#dimension-labels","title":"Dimension Labels","text":"<p>Modern metric systems today usually define a single time series metric as the combination of the name of the metric and its dictionary of dimension labels. Labels are an excellent way to distinguish one instance of a metric, from another while still allowing for aggregation and other operations to be performed on the set for analysis. Some common labels used in metrics may include:</p> <ul> <li>Container Name</li> <li>Host name</li> <li>Code Version</li> <li>Kubernetes cluster name</li> <li>Azure Region</li> </ul> <p>Note: Since dimension labels are used for aggregations and grouping operations, do not use unique strings or those with high cardinality as the value of a label. The value of the label is significantly diminished for reporting and in many cases has a negative performance hit on the metric system used to track it.</p>"},{"location":"observability/pillars/metrics/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Azure Monitor - Umbrella of services including system metrics, log analytics and more.</li> <li>Prometheus - A real-time monitoring &amp; alerting application. It's exposition format for exposing time-series is the basis for OpenMetrics's standard format.</li> <li>Thanos - Open source, highly available Prometheus setup with long term storage capabilities.</li> <li>Cortex - Horizontally scalable, highly available, multi-tenant, long term Prometheus.</li> <li>Grafana - Open source dashboard &amp; visualization tool. Supports Log, Metrics and Distributed tracing data sources.</li> </ul>"},{"location":"observability/pillars/tracing/","title":"Tracing","text":""},{"location":"observability/pillars/tracing/#overview","title":"Overview","text":"<p>Produces the information required to observe series of correlated operations in a distributed system. Once collected they show the path, measurements and faults in an end-to-end transaction.</p>"},{"location":"observability/pillars/tracing/#best-practices","title":"Best Practices","text":"<ul> <li>Ensure that at least key business transactions are traced.</li> <li>Include in each trace necessary information to identify software releases (i.e. service name, version). This is important to correlate deployments and system degradation.</li> <li>Ensure dependencies are included in trace (databases, I/O).</li> <li>If costs are a concern use sampling, avoiding throwing away errors, unexpected behavior and critical information.</li> <li>Don't reinvent the wheel, use existing tools to collect and analyze the data.</li> <li>Ensure personal identifiable information policies and restrictions are followed.</li> </ul>"},{"location":"observability/pillars/tracing/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Azure Monitor - Umbrella of services including system metrics, log analytics and more.</li> <li>Jaeger Tracing - Open source, end-to-end distributed tracing.</li> <li>Grafana - Open source dashboard &amp; visualization tool. Supports Log, Metrics and Distributed tracing data sources.</li> </ul> <p>Consider using OpenTelemetry as it implements open-source cross-platform context propagation for end-to-end distributed transactions over heterogeneous components out-of-the-box. It takes care of automatically creating and managing the Trace Context object among a full stack of microservices implemented across different technical stacks.</p>"},{"location":"observability/tools/","title":"Tools and Patterns","text":"<p>There are a number of modern tools to make systems observable. While identifying and/or creating tools that work for your system, here are a few things to consider to help guide the choices.</p> <ul> <li>Must be simple to integrate and easy to use.</li> <li>It must be possible to aggregate and visualize data.</li> <li>Tools must provide real-time data.</li> <li>Must be able to guide users to the problem area with suitable, adequate end-to-end context.</li> </ul>"},{"location":"observability/tools/#choices","title":"Choices","text":"<ul> <li>Loki</li> <li>OpenTelemetry</li> <li>Kubernetes Dashboards</li> <li>Prometheus</li> </ul>"},{"location":"observability/tools/#service-mesh","title":"Service Mesh","text":"<p>Leveraging a Service Mesh that follows the Sidecar Pattern quickly sets up a go-to set of metrics, and traces (although traces need to be propagated from incoming requests to outgoing requests manually).</p> <p>A sidecar works by intercepting all incoming and outgoing traffic to your image. It then adds trace headers to each request and emits a standard set of logs and metrics. These metrics are extremely powerful for observability, allowing every service, whether client-side or server-side, to leverage a unified set of metrics, including:</p> <ul> <li>Latency</li> <li>Bytes</li> <li>Request Rate</li> <li>Error Rate</li> </ul> <p>In a microservice architecture, pinpointing the root cause of a spike in 500's can be non-trivial, but with the added observability from a sidecar you can quickly determine which service in your service mesh resulted in the spike in errors.</p> <p>Service Mesh's have a large surface area for configuration, and can seem like a daunting undertaking to deploy. However, most services (including Linkerd) offer a sane set of defaults, and can be deployed via the happy path to quickly land these observability wins.</p>"},{"location":"observability/tools/KubernetesDashboards/","title":"Kubernetes UI Dashboards","text":"<p>This document covers the options and benefits of various Kubernetes UI Dashboards which are useful tools for monitoring and debugging your application on Kubernetes Clusters. It allows the management of applications running in the cluster, debug them and manage the cluster all through these dashboards.</p>"},{"location":"observability/tools/KubernetesDashboards/#overview-and-background","title":"Overview and Background","text":"<p>There are times when not all solutions can be run locally. This limitation could be due to a cloud service which does not offer a robust or efficient way to locally debug the environment. In these cases, it is necessary to use other tools which provide the capabilities to monitor your application with Kubernetes.</p>"},{"location":"observability/tools/KubernetesDashboards/#advantages-and-use-cases","title":"Advantages and Use Cases","text":"<ul> <li>Allows the ability to view, manage and monitor the operational aspects of the Kubernetes Cluster.</li> </ul> <ul> <li>Benefits of using a UI dashboard includes the following:<ul> <li>see an overview of the cluster</li> <li>deploy applications onto the cluster</li> <li>troubleshoot applications running on the cluster</li> <li>view, create, modify, and delete Kubernetes resources</li> <li>view basic resource metrics including resource usage for Kubernetes objects</li> <li>view and access logs</li> <li>live view of the pods state (e.g. started, terminating, etc)</li> </ul> </li> </ul> <ul> <li>Different dashboards may provide different functionalities, and the use case to choose a particular dashboard will depend on the requirements. For example, many dashboards provide a way to only monitor your applications on Kubernetes but do not provide a way to manage them.</li> </ul>"},{"location":"observability/tools/KubernetesDashboards/#open-source-dashboards","title":"Open Source Dashboards","text":"<p>There are currently several UI dashboards available to monitor your applications or manage them with Kubernetes. For example:</p> <ul> <li>Octant</li> <li>Prometheus and Grafana<ul> <li>Kube Prometheus Stack Chart: provides an easy way to operate end-to-end Kubernetes cluster monitoring with Prometheus using the Prometheus Operator.</li> </ul> </li> <li>K8Dash</li> <li>kube-ops-view: a tool to visualize node occupancy &amp; utilization</li> <li>Lens: Client side desktop tool</li> <li>Thanos and Cortex: Multi-cluster implementations</li> </ul>"},{"location":"observability/tools/KubernetesDashboards/#resources","title":"Resources","text":"<ul> <li>Alternatives to Kubernetes Dashboard</li> </ul>"},{"location":"observability/tools/OpenTelemetry/","title":"Open Telemetry","text":"<p>Building observable systems enable one to measure how well or bad the application is behaving and WHY it is behaving either way. Adopting open-source standards related to implementing telemetry and tracing features built on top of the OpenTelemetry framework helps decouple vendor-specific implementations while maintaining an extensible, standard, and portable open-source solution.</p> <p>OpenTelemetry is an open-source observability standard that defines how to generate, collect and describe telemetry in distributed systems. OpenTelemetry also provides a single-point distribution of a set of APIs, SDKs, and instrumentation libraries that implements the open-source standard, which can collect, process, and orchestrate telemetry data (signals) like traces, metrics, and logs. It supports multiple popular languages (Java, .NET, Python, JavaScript, Golang, Erlang, etc.). Open telemetry follows a vendor-agnostic and standards-based approach for collecting and managing telemetry data. An important point to note is that OpenTelemetry does not have its own backend; all telemetry collected by OpenTelemetry Collector must be sent to a backend like Prometheus, Jaeger, Zipkin, Azure Monitor, etc. Open telemetry is also the 2nd most active CNCF project only after Kubernetes.</p> <p>The main two Problems OpenTelemetry solves are: First, vendor neutrality for tracing, monitoring, and logging APIs and second, out-of-the-box cross-platform context propagation implementation for end-to-end distributed tracing over heterogeneous components.</p>"},{"location":"observability/tools/OpenTelemetry/#open-telemetry-core-concepts","title":"Open Telemetry Core Concepts","text":""},{"location":"observability/tools/OpenTelemetry/#open-telemetry-implementation-patterns","title":"Open Telemetry Implementation Patterns","text":"<p>A detailed explanation of OpenTelemetry concepts is out of the scope of this repo. There is plenty of available information about how the SDK and the automatic instrumentation are configured and how the Exporters, Tracers, Context, and Span's hierarchy work. See the Reference section for valuable OpenTelemetry resources.</p> <p>However, understanding the core implementation patterns will help you know what approach better fits the scenario you are trying to solve. These are three main patterns as follows:</p> <ul> <li>Automatic telemetry: Support for automatic instrumentation is available for some languages. OpenTelemetry automatic instrumentation (100% codeless) is typically done through library hooks or monkey-patching library code. Automatic instrumentation will intercept all interactions and dependencies and automatically send the telemetry to the configured exporters. More information about this concept can be found in the OpenTelemetry instrumentation doc.</li> <li>Manual tracing: This must be done by coding using the OpenTelemetry SDK, managing the <code>tracer</code> objects to obtain Spans, and forming instrumented OpenTelemetry Scopes to identify the code segments to be manually traced. Also, by using the @WithSpan annotations (method decorations in C# and Java) to mark whole methods that will be automatically traced.</li> <li>Hybrid approach: Most Production-ready scenarios will require a mix of both techniques, using the automatic instrumentation to collect automatic telemetry and the OpenTelemetry SDK to identify code segments that are important to instrument manually. When considering production-ready scenarios, the hybrid approach is the way to go as it allows for a throughout cover over the whole solution. It provides automatic context propagation and events correlation out of the box.</li> </ul>"},{"location":"observability/tools/OpenTelemetry/#collector","title":"Collector","text":"<p>The collector is a separate process that is designed to be a \u2018sink\u2019 for telemetry data emitted by many processes, which can then export that data to backend systems. The collector has two different deployment strategies \u2013 either running as an agent alongside a service or as a gateway which is a remote application. In general, using both is recommended: the agent would be deployed with your service and run as a separate process or in a sidecar; meanwhile, the collector would be deployed separately, as its own application running in a container or virtual machine. Each agent would forward telemetry data to the collector, which could then export it to a variety of backend systems such as Lightstep, Jaeger, or Prometheus. The agent can be also replaced with the automatic instrumentation if supported. The automatic instrumentation provides the collector capabilities of retrieving, processing and exporting the telemetry.</p> <p>Regardless of how you choose to instrument or deploy OpenTelemetry, exporters provide powerful options for reporting telemetry data. You can directly export from your service, you can proxy through the collector, or you can aggregate into standalone collectors \u2013 or even a mix of these.</p>"},{"location":"observability/tools/OpenTelemetry/#instrumentation-libraries","title":"Instrumentation Libraries","text":"<p>A library that enables observability for another library is called an instrumentation library. OpenTelemetry libraries are language specific, currently there is good support for Java, Python, Javascript, dotnet and golang. Support for automatic instrumentation is available for some libraries which make using OpenTelemetry easy and trivial. In case automatic instrumentation is not available, manual instrumentation can be configured by using the OpenTelemetry SDK.</p>"},{"location":"observability/tools/OpenTelemetry/#integration-of-opentelemetry","title":"Integration of OpenTelemetry","text":"<p>OpenTelemetry can be used to collect, process and export data into multiple backends, some popular integrations supported with OpenTelemetry are:</p> <ol> <li>Zipkin</li> <li>Prometheus</li> <li>Jaeger</li> <li>New Relic</li> <li>Azure Monitor</li> <li>AWS X-Ray</li> <li>Datadog</li> <li>Kafka</li> <li>Lightstep</li> <li>Splunk</li> <li>GCP Monitor</li> </ol>"},{"location":"observability/tools/OpenTelemetry/#why-use-opentelemetry","title":"Why use OpenTelemetry","text":"<p>The main reason to use OpenTelemetry is that it offers an open-source standard for implementing distributed telemetry (context propagation) over heterogeneous systems. There is no need to reinvent the wheel to implement end-to-end business flow transactions monitoring when using OpenTelemetry. </p> <p>It enables tracing, metrics, and logging telemetry through a set of single-distribution multi-language libraries and tools that allow for a plug-and-play telemetry architecture that includes the concept of agents and collectors.</p> <p></p> <p>Moreover, avoiding any proprietary lock down and achieving vendor-agnostic neutrality for tracing, monitoring, and logging APIs AND backends allow maximum portability and extensibility patterns.</p> <p>Another good reason to use OpenTelemetry would be whether the stack uses OpenCensus or OpenTracing. As OpenCensus and OpenTracing have carved the way for OpenTelemetry, it makes sense to introduce OpenTelemetry where OpenCensus or OpenTracing is used as it still has backward compatibility.</p> <p>Apart from adding custom attributes, sampling, collecting data for metrics and traces, OpenTelemetry is governed by specifications and backed up by big players in the Observability landscape like Microsoft, Splunk, AppDynamics, etc. OpenTelemetry will likely become a de-facto open-source standard for enabling metrics and tracing when all features become GA.</p>"},{"location":"observability/tools/OpenTelemetry/#current-status-of-opentelemetry-project","title":"Current Status of OpenTelemetry Project","text":"<p>OpenTelemetry is a project which emerged from merging of OpenCensus and OpenTracing in 2019. Although OpenCensus and OpenTracing are frozen and no new features are being developed for them, OpenTelemetry has backward compatibility with OpenCensus and OpenTracing. Some features of OpenTelemetry are still in beta, feature support for different languages is being tracked here: Feature Status of OpenTelemetry. Status of OpenTelemetry project can be tracked here.</p> <p>From the website:</p> <p>Our goal is to provide a generally available, production quality release for the tracing data source across most OpenTelemetry components in the first half of 2021. Several components have already reached this milestone! We expect metrics to reach the same status in the second half of 2021 and are targeting logs in 2022.</p>"},{"location":"observability/tools/OpenTelemetry/#what-to-watch-out-for","title":"What to Watch Out for","text":"<p>As OpenTelemetry is a very recent project (first GA version of some features released in 2020), many features are still in beta hence due diligence needs to be done before using such features in production. Also, OpenTelemetry supports many popular languages but features in all languages are not at par. Some languages offer more features as compared to other languages. It also needs to be called out as some features are not in GA, there may be some incompatibility issues with the tooling. That being said, OpenTelemetry is one of the most active projects of CNCF, so it is expected that many more features would reach GA soon.</p>"},{"location":"observability/tools/OpenTelemetry/#january-2022-update","title":"January 2022 UPDATE","text":"<p>Apart from the logging specification and implementation that are still marked as draft or beta, all other specifications and implementations regarding tracing and metrics are marked as stable or feature-freeze. Many libraries are still on active development whatsoever, so thorough analysis has to be made depending on the language on a feature basis.</p>"},{"location":"observability/tools/OpenTelemetry/#integration-options-with-azure-monitor","title":"Integration Options with Azure Monitor","text":""},{"location":"observability/tools/OpenTelemetry/#using-the-azure-monitor-opentelemetry-exporter-library","title":"Using the Azure Monitor OpenTelemetry Exporter Library","text":"<p>This scenario uses the OpenTelemetry SDK as the core instrumentation library. Basically this means you will instrument your application using the OpenTelemetry libraries, but you will additionally use the Azure Monitor OpenTelemetry Exporter and then added it as an additional exporter with the OpenTelemetry SDK. In this way, the OpenTelemetry traces your application creates will be pushed to your Azure Monitor Instance.</p>"},{"location":"observability/tools/OpenTelemetry/#using-the-application-insights-agent-jar-file-java-only","title":"Using the Application Insights Agent Jar File - Java Only","text":"<p>Java OpenTelemetry instrumentation provides another way to integrate with Azure Monitor, by using Applications Insights Java Agent jar.</p> <p>When configuring this option, the Applications Insights Agent file is added when executing the application. The <code>applicationinsights.json</code> configuration file must be also be added as part of the applications artifacts. Pay close attention to the preview section, where the <code>\"openTelemetryApiSupport\": true,</code> property is set to true, enabling the agent to intercept OpenTelemetry telemetry created in the application code pushing it to Azure Monitor.</p> <p>OpenTelemetry Java Agent instrumentation supports many libraries and frameworks and application servers. Application Insights Java Agent enhances this list. Therefore, the main difference between running the OpenTelemetry Java Agent vs. the Application Insights Java Agent is demonstrated in the amount of traces getting logged in Azure Monitor. When running with Application Insights Java agent there's more telemetry getting pushed to Azure Monitor. On the other hand, when running the solution using the Application Insights agent mode, it is essential to highlight that nothing gets logged on Jaeger (or any other OpenTelemetry exporter). All traces will be pushed exclusively to Azure Monitor. However, both manual instrumentation done via the OpenTelemetry SDK and all automatic traces, dependencies, performance counters, and metrics being instrumented by the Application Insights agent are sent to Azure Monitor. Although there is a rich amount of additional data automatically instrumented by the Application Insights agent, it can be deduced that it is not necessarily OpenTelemetry compliant. Only the traces logged by the manual instrumentation using the OpenTelemetry SDK are.</p>"},{"location":"observability/tools/OpenTelemetry/#opentelemetry-vs-application-insights-agents-compared","title":"OpenTelemetry vs Application Insights Agents Compared","text":"Highlight OpenTelemetry Agent App Insights Agent Automatic Telemetry Y Y Manual OpenTelemetry Y Y Plug and Play Exports Y N Multiple Exports Y N Full Open Telemetry layout (decoupling agents, collectors and exporters) Y N Enriched out of the box telemetry N Y Unified telemetry backend N Y"},{"location":"observability/tools/OpenTelemetry/#summary","title":"Summary","text":"<p>As you may have guessed, there is no \"one size fits all\" approach when implementing OpenTelemetry with Azure Monitor as a backend. At the time of this writing, if you want to have the flexibility of having different OpenTelemetry backends, you should definitively go with the OpenTelemetry Agent, even though you'd sacrifice all automating tracing flowing to Azure Monitor. On the other hand, if you want to get the best of Azure Monitor and still want to instrument your code with the OpenTelemetry SDK, you should use the Application Insights Agent and manually instrument your code with the OpenTelemetry SDK to get the best of both worlds. Either way, instrumenting your code with OpenTelemetry seems the right approach as the ecosystem will only get bigger, better, and more robust.</p>"},{"location":"observability/tools/OpenTelemetry/#advanced-topics","title":"Advanced topics","text":"<p>Use the Azure OpenTelemetry Tracing plugin library for Java to enable distributed tracing across Azure components through OpenTelemetry.</p>"},{"location":"observability/tools/OpenTelemetry/#manual-trace-context-propagation","title":"Manual Trace Context Propagation","text":"<p>The trace context is stored in Thread-local storage. When the application flow involves multiple threads (eg. multithreaded work-queue, asynchronous processing) then the traces won't get combined into one end-to-end trace chain with automatic context propagation. To achieve that you need to manually propagate the trace context (example in Java) by storing the trace headers along with the work-queue item.</p>"},{"location":"observability/tools/OpenTelemetry/#telemetry-testing","title":"Telemetry Testing","text":"<p>Mission critical telemetry data should be covered by testing. You can cover telemetry by tests by mocking the telemetry collector web server. In automated testing environment the telemetry instrumentation can be configured to use OTLP exporter and point the OTLP exporter endpoint to the collector web server. Using mocking servers libraries (eg. MockServer or WireMock) can help verify the telemetry data pushed to the collector.</p>"},{"location":"observability/tools/OpenTelemetry/#resources","title":"Resources","text":"<ul> <li>OpenTelemetry Official Site</li> <li>Getting Started with dotnet and OpenTelemetry</li> <li>Using OpenTelemetry Collector</li> <li>OpenTelemetry Java SDK</li> <li>Manual Instrumentation</li> <li>OpenTelemetry Instrumentation Agent for Java</li> <li>Application Insights Java Agent</li> <li>Azure Monitor OpenTelemetry Exporter client library for Java</li> <li>Azure OpenTelemetry Tracing plugin library for Java</li> <li>Application Insights Agent's OpenTelemetry configuration</li> </ul>"},{"location":"observability/tools/Prometheus/","title":"Prometheus","text":""},{"location":"observability/tools/Prometheus/#overview","title":"Overview","text":"<p>Originally built at SoundCloud, Prometheus is an open-source monitoring and alerting toolkit based on time series metrics data. It has become a de facto standard metrics solution in the Cloud Native world and widely used with Kubernetes.</p> <p>The core of Prometheus is a server that scrapes and stores metrics. There are other numerous optional features and components like an Alert-manager and client libraries for programming languages to extend the functionalities of Prometheus beyond the basics. The client libraries offer four metric types: <code>Counter</code>, <code>Gauge</code>, <code>Histogram</code>, and <code>Summary</code>.</p>"},{"location":"observability/tools/Prometheus/#why-prometheus","title":"Why Prometheus?","text":"<ul> <li>Prometheus is a time series database and allow for events or measurements to be tracked, monitored, and aggregated over time.</li> <li>Prometheus is a pull-based tool. One of the biggest advantages of Prometheus over other monitoring tools is that Prometheus actively scrapes targets in order to retrieve metrics from them. Prometheus also supports the push model for pushing metrics.</li> <li>Prometheus allows for control over how to scrape, and how often to scrape them. Through the Prometheus server, there can be multiple scrape configurations, allowing for multiple rates for different targets.</li> <li>Similar to Grafana, visualization for the time series can be directly done through the Prometheus Web UI. The Web UI provides the ability to easily filter and have an overview of what is taking place with your different targets.</li> <li>Prometheus provides a powerful functional query language called PromQL (Prometheus Query Language) that lets the user aggregate time series data in real time.</li> </ul>"},{"location":"observability/tools/Prometheus/#integration-with-other-tools","title":"Integration with Other Tools","text":"<p>The Prometheus client libraries allow you to add instrumentation to your code and expose internal metrics via an HTTP endpoint. The official Prometheus client libraries currently are <code>Go</code>, <code>Java or Scala</code>, <code>Python</code> and <code>Ruby</code>. Unofficial third-party libraries include: <code>.NET/C#</code>, <code>Node.js</code>, and <code>C++</code>.</p> <p>Prometheus' metrics format is supported by a wide array of tools and services including:</p> <ul> <li>Azure Monitor</li> <li>Stackdriver</li> <li>Datadog</li> <li>CloudWatch</li> <li>New Relic</li> <li>Flagger</li> <li>Grafana</li> <li>GitLab</li> <li>etc...</li> </ul> <p>There are numerous exporters which are used in exporting existing metrics from third-party databases, hardware, CI/CD tools, messaging systems, APIs and other monitoring systems. In addition to client libraries and exporters, there is a significant number of integration points for service discovery, remote storage, alerts and management.</p>"},{"location":"observability/tools/Prometheus/#resources","title":"Resources","text":"<ul> <li>Prometheus Docs</li> <li>Prometheus Best Practices</li> <li>Grafana with Prometheus</li> </ul>"},{"location":"observability/tools/loki/","title":"Loki","text":"<p>Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system, created by Grafana Labs inspired by the learnings from Prometheus. Loki is commonly referred as 'Prometheus, but for logs', which makes total sense. Both tools follow the same architecture, which is an agent collecting metrics in each of the components of the software system, a server which stores the logs and also the Grafana dashboard, which access the loki server to build its visualizations and queries. That being said, Loki has three main components:</p>"},{"location":"observability/tools/loki/#promtail","title":"Promtail","text":"<p>It is the agent portion of Loki. It can be used to grab logs from several places, like var/log/ for example. The configuration of the Promtail is a yaml file called <code>config-promtail.yml</code>. In this file, its described all the paths and log sources that will be aggregated on Loki Server.</p>"},{"location":"observability/tools/loki/#loki-server","title":"Loki Server","text":"<p>Loki Server is responsible for receiving and storing all the logs received from all the different systems. The Loki Server is also responsible for the queries done on Grafana, for example.</p>"},{"location":"observability/tools/loki/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Grafana Dashboards are responsible for creating the visualizations and performing queries. After all, it will be a web page that people with the right access can log into to see, query and create alerts for the aggregated logs.</p>"},{"location":"observability/tools/loki/#why-use-loki","title":"Why use Loki","text":"<p>The main reason to use Loki instead of other log aggregation tools, is that Loki optimizes the necessary storage. It does that by following the same pattern as prometheus, which index the labels and make chunks of the log itself, using less space than just storing the raw logs.</p>"},{"location":"observability/tools/loki/#resources","title":"Resources","text":"<ul> <li>Loki Official Site</li> <li>Inserting logs into Loki</li> <li>Adding Loki Source to Grafana</li> <li>Loki Best Practices</li> </ul>"},{"location":"privacy/","title":"Privacy fundamentals","text":"<p>This part of the engineering playbook focuses on privacy design guidelines and principles. Private data handling and protection requires both the proper design of software, systems and databases, as well as the implementation of organizational processes and procedures.</p> <p>In general, developers working on ISE projects should adhere to Microsoft's recommended standard practices and regulations on Privacy and Data Handling.</p> <p>The playbook currently contains two main parts:</p> <ol> <li>Privacy and Data: Best practices for properly handling sensitive and private data.</li> <li>Privacy frameworks: A list of frameworks which could be applied in private data scenarios.</li> </ol>"},{"location":"privacy/data-handling/","title":"Privacy and Data","text":""},{"location":"privacy/data-handling/#goal","title":"Goal","text":"<p>The goal of this section is to briefly describe best practices in privacy fundamentals for data heavy projects or portions of a project that may contain data.</p> <p>What it is not: This document is not a checklist for how customers or readers should handle data in their environment, and does not override Microsoft's or the customers' policies for data handling, data protection and information security.</p>"},{"location":"privacy/data-handling/#introduction","title":"Introduction","text":"<p>Microsoft runs on trust. Our customers trust ISE to adhere to the highest standards when handling their data. Protecting our customers' data is a joint responsibility between Microsoft and the customers; both have the responsibility to help projects follow the guidelines outlined on this page.</p> <p>Developers working on ISE projects should implement best practices and guidance on handling data throughout the project phases. This page is not meant to suggest how customers should handle data in their environment. It does not override:</p> <ul> <li>Microsoft's Information Security Policy</li> <li>Limited Data Protection Addendum</li> <li>Professional Services Data Protection Addendum</li> </ul>"},{"location":"privacy/data-handling/#5-ws-of-data-handling","title":"5 W's of Data Handling","text":"<p>When working on an engagement it is important to address the following 5 W's:</p> <ul> <li>Who \u2013 gets access to and with whom will we share the data and/or models developed with the data?</li> <li>What \u2013 data is shared with us and under what expectations and understanding. Customers need to be explicit about how the data they share applies to the overarching effort. The understanding shouldn't be vague and we shouldn't have access to broad set of data if not necessary.</li> <li>Where \u2013 will the data be stored and what legal jurisdiction will preside over that data. This is particularly important in countries like Germany, where different privacy laws apply but also important when it comes to responding to legal subpoenas for the data.</li> <li>When \u2013 will the access to data be provided and for how long? It is important to not leave straggling access to data once the engagement is completed, and define a priori the data retention policies.</li> <li>Why \u2013 have you given access to the data? This is particularly important to clarify the purpose and any restrictions on usage beyond the intended purpose.</li> </ul> <p>Please use the above guidelines to ensure the data is used only for intended purposes and thereby gain trust. It is important to be aware of data handling best practices and ensure the required clarity is provided to adhere to the above 5Ws.</p>"},{"location":"privacy/data-handling/#handling-data-in-ise-engagements","title":"Handling Data in ISE Engagements","text":"<p>Data should never leave customer-controlled environments and contractors and/or other members in the engagement should never have access to complete customer data sets but use limited customer data sets using the following prioritized approaches:</p> <ol> <li>Contractors or engagement partners do not work directly with production data, data will be copied before processing per the guidelines below.</li> <li>Always apply data minimization principles to minimize the blast radius of errors, only work with the minimal data set required to achieve the goals.</li> <li>Generate synthetic data to support engagement work. If synthetic data is not possible to achieve project goals, request anonymized data in which the likelihood that unique individuals can be re-identified is minimal.</li> <li>Select a suitably diverse, limited data set, again, follow the Principles of Data Minimization and attempt to work with the fewest rows possible to achieve the goals.</li> </ol> <p>Before work begins on data, ensure OS patches are up to date and permissions are properly set with no open internet access.</p> <p>Developers working on ISE projects will work with our customers to define the data needed for each engagement.</p> <p>If there is a need to access production data, ISE needs to review the need with their lead and work with the customer to put audits in place verifying what data was accessed.</p> <p>Production data must only be shared with approved members of the engagement team and must not be processed/transferred outside of the customer controlled environment.</p> <p>Customers should provide ISE with a copy of the requested data in a location managed by the customer. The customer should consider turning any logging capabilities on so they can clearly identify who has access and what they do with that access. ISE should notify the customer when they are done with the data and suggest the customer destroy copies of the data if they are no longer needed.</p>"},{"location":"privacy/data-handling/#our-guiding-principles-when-handling-data-in-an-engagement","title":"Our Guiding Principles when Handling Data in an Engagement","text":"<ul> <li>Never directly access production data.</li> <li>Explicitly state the intended purpose of data that can be used for engagement.</li> <li>Only share copies of the production data with the approved members of the engagement team.</li> <li>The entire team should work together to ensure that there are no dead copies of data. When the data is no longer needed, the team should promptly work to clean up engagement copies of data.</li> <li>Do not send any copies of the production data outside the customer-controlled environment.</li> <li>Only use the minimal subset of the data needed for the purpose of the engagement.</li> </ul>"},{"location":"privacy/data-handling/#questions-to-consider-when-working-with-data","title":"Questions to Consider when Working with Data","text":"<ul> <li>What data do we need?</li> <li>What is the legal basis for processing this data?</li> <li>If we are the processor based on contract obligation what is our responsibility listed in the contract?</li> <li>Does the contract need to be amended?</li> <li>How can we contain data proliferation?</li> <li>What security controls are in place to protect this data?</li> <li>What is the data breech protocol?</li> <li>How does this data benefit the data subject?</li> <li>What is the lifespan of this data?</li> <li>Do we need to keep this data linked to a data subject?</li> <li>Can we turn this data into Not in a Position to Identify (NPI) data to be used later on?</li> <li>How is the system architected so data subject rights can be fulfilled? (ex manually, automated)</li> <li>If personal data is involved have engaged privacy and legal teams for this project?</li> </ul>"},{"location":"privacy/data-handling/#summary","title":"Summary","text":"<p>It is important to only pull in data that is needed for the problem at hand, when this is put in practice we find that we only maintain data that is adequate, relevant and limited to what is necessary in relation to the purposes for which they are processed. This is particularly important for personal data. Once you have personal data there are many rules and regulations that apply, some examples of these might be HIPAA, GDPR, CCPA. The customer should be aware of and surface any applicable regulations that apply to their data. Furthermore the seven principles of privacy by design should be reviewed and considered when handling any type of sensitive data.</p>"},{"location":"privacy/data-handling/#resources","title":"Resources","text":"<ul> <li>Microsoft Trust Center</li> <li>Tools for responsible AI - Protect</li> <li>Data Protection Resources</li> <li>FAQ and White Papers</li> <li>Microsoft Compliance Offerings</li> <li>Accountability Readiness Checklists</li> <li>Privacy by Design The 7 Foundational Principles</li> </ul>"},{"location":"privacy/privacy-frameworks/","title":"Privacy Related frameworks","text":"<p>The following tools/frameworks could be leveraged when data analysis or model development needs to take place on private data. Note that the use of such frameworks still requires the solution to adhere to privacy regulations and others, and additional safeguards should be applied.</p>"},{"location":"privacy/privacy-frameworks/#typical-scenarios-for-leveraging-a-privacy-framework","title":"Typical Scenarios for Leveraging a Privacy Framework","text":"<ul> <li>Sharing data or results while preserving data subjects' privacy</li> <li>Performing analysis or statistical modeling on private data</li> <li>Developing privacy preserving ML models and data pipelines</li> </ul>"},{"location":"privacy/privacy-frameworks/#privacy-frameworks","title":"Privacy Frameworks","text":"<p>Protecting private data involves the entire data lifecycle, from acquisition, through storage, processing, analysis, modeling and usage in reports or machine learning models. Proper safeguards and restrictions should be applied in each of these phases.</p> <p>In this section we provide a non-exhaustive list of privacy frameworks which can be leveraged for protecting and preserving privacy.</p> <p>We focus on four main use cases in the data lifecycle:</p> <ol> <li>Obtaining non-sensitive data</li> <li>Establishing trusted research and modeling environments</li> <li>Creating privacy preserving data and ML pipelines</li> <li>Data loss prevention</li> </ol>"},{"location":"privacy/privacy-frameworks/#obtaining-non-sensitive-data","title":"Obtaining Non-Sensitive Data","text":"<p>In many scenarios, analysts, researchers and data scientists require access to a non-sensitive version or sample of the private data. In this section we focus on two approaches for obtaining non-sensitive data.</p> <p>Note: These two approaches do not guarantee that the outcome would not include private data, and additional measures should be applied.</p>"},{"location":"privacy/privacy-frameworks/#data-de-identification","title":"Data De-Identification","text":"<p>De-identification is the process of applying a set of transformations to a dataset, in order to lower the risk of unintended disclosure of personal data. De-identification involves the removal or substitution of both direct identifiers (such as name, or social security number) or quasi-identifiers, which can be used for re-identification using additional external information.</p> <p>De-identification can be applied to different types of data, such as structured data, images and text. However, de-identification of non-structured data often involves statistical approaches which might result in undetected PII (Personal Identifiable Information) or non-private information being redacted or replaced.</p> <p>Here we outline several de-identification solutions available as open source:</p> Solution Notes Presidio Presidio helps to ensure sensitive data is properly managed and governed. It provides fast identification and anonymization modules for private entities in text such as credit card numbers, names, locations, social security numbers, bitcoin wallets, US phone numbers, financial data and more in unstructured text and images. It's useful when high customization is required, for example to detect custom PII entities or languages. Link to repo, link to docs, link to demo. FHIR tools for anonymization FHIR Tools for Anonymization is an open-source project that helps anonymize healthcare FHIR data (FHIR=Fast Healthcare Interoperability Resources, a standard for exchanging Electric Health Records), on-premises or in the cloud, for secondary usage such as research, public health, and more. Link. Works with FHIR format (Stu3 and R4), allows different strategies for anonymization (date shift, crypto-hash, encrypt, substitute, perturb, generalize) ARX Anonymization using statistical models, specifically k-anonymity, \u2113-diversity, t-closeness and \u03b4-presence. Useful for validating the anonymization of aggregated data. Links: Repo, Website. Written in Java. k-Anonymity GitHub repo with examples on how to produce k-anonymous datasets. k-anonymity protects the privacy of individual persons by pooling their attributes into groups of at least k people. repo"},{"location":"privacy/privacy-frameworks/#synthetic-data-generation","title":"Synthetic Data Generation","text":"<p>A synthetic dataset is a repository of data generated from actual data and has the same statistical properties as the real data. The degree to which a synthetic dataset is an accurate proxy for real data is a measure of utility. The potential benefit of such synthetic datasets is for sensitive applications \u2013 medical classifications or financial modelling, where getting hands on a high-quality labelled dataset is often prohibitive.</p> <p>When determining the best method for creating synthetic data, it is essential first to consider what type of synthetic data you aim to have. There are two broad categories to choose from, each with different benefits and drawbacks:</p> <ul> <li>Fully synthetic: This data does not contain any original data, which means that re-identification of any single unit is almost impossible, and all variables are still fully available.</li> <li>Partially synthetic: Only sensitive data is replaced with synthetic data, which requires a heavy dependency on the imputation model. This leads to decreased model dependence but does mean that some disclosure is possible due to the actual values within the dataset.</li> </ul> Solution Notes Synthea Synthea was developed with numerous data sources collected on the internet, including US Census Bureau demographics, Centers for Disease Control and Prevention prevalence and incidence rates, and National Institutes of Health reports. The source code and disease models include annotations and citations for all data, statistics, and treatments. These models of diseases and treatments interact appropriately with the health record. PII dataset generator A synthetic data generator developed on top of Fake Name Generator which takes a text file with templates (e.g. my name is PERSON) and creates a list of Input Samples which contain fake PII entities instead of placeholders. CheckList CheckList provides a framework for perturbation techniques to evaluate specific behavioral capabilities of NLP models systematically Mimesis Mimesis a high-performance fake data generator for Python, which provides data for a variety of purposes in a variety of languages. Faker Faker is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you. Plaitpy The idea behind plait.py is that it should be easy to model fake data that has an interesting shape. Currently, many fake data generators model their data as a collection of IID variables; with plait.py we can stitch together those variables into a more coherent model."},{"location":"privacy/privacy-frameworks/#trusted-research-and-modeling-environments","title":"Trusted Research and Modeling Environments","text":""},{"location":"privacy/privacy-frameworks/#trusted-research-environments","title":"Trusted Research Environments","text":"<p>Trusted Research Environments (TREs) enable organizations to create secure workspaces for analysts, data scientists and researchers who require access to sensitive data.</p> <p>TREs enforce a secure boundary around distinct workspaces to enable information governance controls. Each workspace is accessible by a set of authorized users, prevents the exfiltration of sensitive data, and has access to one or more datasets provided by the data platform.</p> <p>We highlight several alternatives for Trusted Research Environments:</p> Solution Notes Azure Trusted Research Environment An Open Source TRE for Azure. Aridhia DRE"},{"location":"privacy/privacy-frameworks/#eyes-off-machine-learning","title":"Eyes-Off Machine Learning","text":"<p>In certain situations, Data Scientists may need to train models on data they are not allowed to see. In these cases, an \"eyes-off\" approach is recommended. An eyes-off approach provides a data scientist with an environment in which scripts can be run on the data but direct access to samples is not allowed. When using Azure ML, tools such as the Identity Based Data Access can enable this scenario, alongside proper role assignment for users.</p> <p>During the processing within the eyes-off environment, only certain outputs (e.g. logs) are allowed to be extracted back to the user. For example, a user would be able to submit a script which trains a model and inspect the model's performance, but would not be able to see on which samples the model predicted the wrong output.</p> <p>In addition to the eyes-off environment, this approach usually entails providing access to an \"eyes-on\" dataset, which is a representative, cleansed, sample set of data for model design purposes. The Eyes-on dataset is often a de-identified subset of the private dataset, or a synthetic dataset generated based on the characteristics of the private dataset.</p>"},{"location":"privacy/privacy-frameworks/#private-data-sharing-platforms","title":"Private Data Sharing Platforms","text":"<p>Various tools and systems allow different parties to share data with 3rd parties while protecting private entities, and securely process data while reducing the likelihood of data exfiltration. These tools include Secure Multi Party Computation (SMPC) systems, Homomorphic Encryption systems, Confidential Computing, private data analysis frameworks such as PySift among others.</p>"},{"location":"privacy/privacy-frameworks/#privacy-preserving-data-pipelines-and-ml","title":"Privacy Preserving Data Pipelines and ML","text":"<p>Even when our data is secure, private entities can still be extracted when the data is consumed. Privacy preserving data pipelines and ML models focus on minimizing the risk of private data exfiltration during data querying or model predictions.</p>"},{"location":"privacy/privacy-frameworks/#differential-privacy","title":"Differential Privacy","text":"<p>Differential privacy (DP) is a system that enables one to extract meaningful insights from datasets about subgroups of people, while also providing strong guarantees with regards to protecting any given individual's privacy. This is typically achieved by adding a small statistical noise to every individual's information, thereby introducing uncertainty in the data. However, the insights gleaned still accurately represent what we intend to learn about the population in the aggregate. This approach is known to be robust to re-identification attacks and data reconstruction by adversaries who possess auxiliary information. For a more comprehensive overview, check out Differential privacy: A primer for a non-technical audience.</p> <p>DP has been widely adopted in various scenarios such as learning from census data, user telemetry data analysis, audience engagement to advertisements, and health data insights where PII protection is of paramount importance. However, DP is less suitable for small datasets.</p> <p>Tools that implement DP include SmartNoise, Tensorflow Privacy among some others.</p>"},{"location":"privacy/privacy-frameworks/#homomorphic-encryption","title":"Homomorphic Encryption","text":"<p>Homomorphic Encryption (HE) is a form of encryption allowing one to perform calculations on encrypted data without decrypting it first. The result of the computation F is in an encrypted form, which on decrypting gives us the same result if computation F was done on raw unencrypted data. (source)</p> <p>Homomorphic Encryption frameworks:</p> Solution Notes Microsoft SEAL Secure Cloud Storage and Computation, ML Modeling. A widely used open-source library from Microsoft that supports the BFV and the CKKS schemes. Palisade A widely used open-source library from a consortium of DARPA-funded defense contractors that supports multiple homomorphic encryption schemes such as BGV, BFV, CKKS, TFHE and FHEW, among others, with multiparty support. Link to repo PySift Private deep learning. PySyft decouples private data from model training, using Federated Learning, Differential Privacy, and Encrypted Computation (like Multi-Party Computation (MPC) and Homomorphic Encryption (HE)) within the main Deep Learning frameworks like PyTorch and TensorFlow. <p>A list of additional OSS tools can be found here.</p>"},{"location":"privacy/privacy-frameworks/#federated-learning","title":"Federated Learning","text":"<p>Federated learning is a Machine Learning technique which allows the training of ML models in a decentralized way without having to share the actual data. Instead of sending data to the processing engine of the model, the approach is to distribute the model to the different data owners and perform training in a distributed fashion.</p> <p>Federated learning frameworks:</p> Solution Notes TensorFlow Federated Learning OSS federated learning system built on top of TensorFlow FATE An OSS federated learning system with different options for deployment and different algorithms adapted for federated learning IBM Federated Learning A Python based federated learning framework focused on enterprise environments."},{"location":"privacy/privacy-frameworks/#data-loss-prevention","title":"Data Loss Prevention","text":"<p>Organizations have sensitive information under their control such as financial data, proprietary data, credit card numbers, health records, or social security numbers. To help protect this sensitive data and reduce risk, they need a way to prevent their users from inappropriately sharing it with people who shouldn't have it. This practice is called data loss prevention (DLP).</p> <p>Below we focus on two aspects of DLP: Sensitive data classification and Access management.</p>"},{"location":"privacy/privacy-frameworks/#sensitive-data-classification","title":"Sensitive Data Classification","text":"<p>Sensitive data classification is an important aspect of DLP, as it allows organizations to track, monitor, secure and identify sensitive and private data. Furthermore, different sensitivity levels can be applied to different data items, facilitating proper governance and cataloging.</p> <p>There are typically four levels data classification levels:</p> <ol> <li>Public</li> <li>Internal</li> <li>Confidential</li> <li>Restricted / Highly confidential</li> </ol> <p>Tools for data classification on Azure:</p> Solution Notes Microsoft Information Protection (MIP) A suite for DLP, sensitive data classification, cataloging  and more. Azure Purview A unified data governance service, which includes the classification and cataloging of sensitive data. Azure Purview leverages the MIP technology for data classification and more. Data Discovery &amp; Classification for Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse Basic capabilities for discovering, classifying, labeling, and reporting the sensitive data in Azure SQL and Synapse databases. Data Discovery &amp; Classification for SQL Server Capabilities for discovering, classifying, labeling &amp; reporting the sensitive data in SQL Server databases. <p>Often, tools used for de-identification can also serve as sensitive data classifiers. Refer to de-identification tools for such tools.</p> <p>Additional resources:</p> <ul> <li>Example guidelines for data classification</li> <li>Learn about sensitivity levels</li> </ul>"},{"location":"privacy/privacy-frameworks/#access-management","title":"Access Management","text":"<p>Access control is an important component of privacy by design and falls into overall data lifecycle protection. Successful access control will restrict access only to authorized individuals that should have access to data. Once data is secure in an environment, it is important to review who should access this data and for what purpose. Access control may be audited with a comprehensive logging strategy which may include the integration of activity logs that can provide insight into operations performed on resources in a subscription.</p> <ul> <li>OWASP Access Control Cheat Sheet</li> </ul>"},{"location":"security/","title":"Security","text":"<p>Developers working on projects should adhere to industry-recommended standard practices for secure design and implementation of code. For the purposes of our customers, this means our engineers should understand the OWASP Top 10 Web Application Security Risks, as well as how to mitigate as many of them as possible, using the resources below.</p> <p>If you are looking for a fast way to get started evaluating your application or design, check out the \"Secure Coding Practices Quick Reference\" document below, which contains an itemized checklist of high-level concepts you can validate are being done properly. This checklist covers many common errors associated with the OWASP Top 10 list linked above, and should be the minimum amount of effort being put into security.</p>"},{"location":"security/#requesting-security-reviews","title":"Requesting Security Reviews","text":"<p>When requesting a security review for your application, please make sure you have familiarized yourself with the Rules of Engagement. This will help you to prepare the application for testing, as well as understand the scope limits of the test.</p>"},{"location":"security/#quick-resources","title":"Quick Resources","text":"<ul> <li>Secure Coding Practices Quick Reference</li> <li>Web Application Security Quick Reference</li> <li>Security Mindset/Creating a Security Program Quick Start</li> <li>Credential Scanning / Secret Detection</li> <li>Threat Modelling</li> </ul>"},{"location":"security/#azure-devops-security","title":"Azure DevOps Security","text":"<ul> <li>Security Engineering DevSecOps Practices</li> <li>Azure DevOps Data Protection Overview</li> <li>Security and Identity in Azure DevOps</li> <li>Security Code Analysis</li> </ul>"},{"location":"security/#devsecops","title":"DevSecOps","text":"<p>Introduce security to your project at early stages. The DevSecOps section covers security practices, automation, tools and frameworks as part of the application CI.</p>"},{"location":"security/#owasp-cheat-sheets","title":"OWASP Cheat Sheets","text":"<p>Note: OWASP is considered to be the gold-standard in computer security information. OWASP maintains an extensive series of cheat sheets which cover all the OWASP Top 10 and more. Below, many of the more relevant cheat sheets have been summarized. To view all the cheat sheets, check out their Cheat Sheet Index.</p> <ul> <li>Attack Surface Analysis</li> <li>Authorization Basics</li> <li>Content Security Policy (CSP)</li> <li>Cross-Site Request Forgery (CSRF) Prevention</li> <li>Cross-Site Scripting (XSS) Prevention</li> <li>Cryptographic Storage</li> <li>Deserialization</li> <li>Docker/Kubernetes (k8s) Security</li> <li>Input Validation</li> <li>Key Management</li> <li>OS Command Injection Defense</li> <li>Query Parameterization Examples</li> <li>Server-Side Request Forgery Prevention</li> <li>SQL Injection Prevention</li> <li>Unvalidated Redirects and Forwards</li> <li>Web Service Security</li> <li>XML Security</li> </ul>"},{"location":"security/#recommended-tools","title":"Recommended Tools","text":"<p>Check out the list of tools to help enable security in your projects.</p> <p>Note: Although some tools are agnostic, the below list is geared towards Cloud Native security, with a focus on Kubernetes.</p> <ul> <li> <p>Vulnerability Scanning</p> <ul> <li>SonarCloud<ul> <li>Integrates with Azure Devops with the click of a button.</li> </ul> </li> <li>Snyk</li> <li>Trivy</li> <li>Cloudsploit</li> <li>Anchore</li> <li>Other tools from OWASP</li> <li>See why you should check for vulnerabilities at all layers of the stack, as well as a couple of other useful tips to reduce surface area for attacks.</li> </ul> </li> </ul> <ul> <li> <p>Runtime Security</p> <ul> <li>Falco</li> <li>Tracee</li> <li>Kubelinter<ul> <li>May not fully qualify as runtime security, but helps ensure you're enabling best practices.</li> </ul> </li> </ul> </li> </ul> <ul> <li> <p>Binary Authorization</p> <p>Binary authorization can happen both at the docker registry layer, and runtime (ie: via a K8s admission controller). The authorization check ensures that the image is signed by a trusted authority. This can occur for both (pre-approved) 3rd party images, and internal images. Taking this a step further the signing should occur only on images where all code has been reviewed and approved. Binary authorization can both reduce the impact of damage from a compromised hosting environment, and the damage from malicious insiders.</p> <ul> <li>Harbor<ul> <li>Operator available</li> </ul> </li> <li>Portieris</li> <li>Notary<ul> <li>Note harbor leverages notary internally.</li> </ul> </li> <li>TUF</li> </ul> </li> </ul> <ul> <li> <p>Other K8s Security</p> <ul> <li>OPA, Gatekeeper, and the Gatekeeper Library</li> <li>cert-manager for easy certificate provisioning and automatic rotation.</li> <li>Quickly enable mTLS between your microservices with Linkerd.</li> </ul> </li> </ul>"},{"location":"security/#resources","title":"Resources","text":"<ul> <li>Non-Functional Requirements Guidance</li> </ul>"},{"location":"security/rules-of-engagement/","title":"Application Security Analysis: Rules of Engagement","text":"<p>When performing application security analysis, it is expected that the tester follow the Rules of Engagement as laid out below. This is to standardize the scope of application testing and provide a concrete awareness of what is considered \"out of scope\" for security analysis.</p>"},{"location":"security/rules-of-engagement/#rules-of-engagement-for-those-requesting-review","title":"Rules of Engagement - For Those Requesting Review","text":"<ul> <li>Web Application Firewalls can be up and configured, but do not enable any automatic blocking. This can greatly slow down the person performing the test.</li> <li>Similarly, if a service is running on a virtual machine, ensure services such as <code>fail2ban</code> are disabled.</li> <li>You cannot make changes to the running application until the test is complete. This is to prevent accidentally breaking an otherwise valid attack in progress.</li> <li>Any review results are not considered as \"final\". A security review should always be performed by a security team orchestrated by the customer prior to moving an application into production. If a customer requires further assistance, they can engage Premier Support.</li> </ul>"},{"location":"security/rules-of-engagement/#rules-of-engagement-for-those-performing-tests","title":"Rules of Engagement - For Those Performing Tests","text":"<ul> <li>Do not attempt to perform Denial-of-Service attacks or otherwise crash services. Heavy active scanning is tolerated (and is assumed to be somewhat of a load test) but deliberate takedowns are not permitted.</li> <li>Do not interact with human beings. Phishing credentials or other such client-side attacks are off-limits. Detailing XSS and similar attacks is encouraged as a part of the test, but do not leverage these against internal users or customers.</li> <li>Attack from a single point. Especially if the application is currently in the customer's hands, provide the IP address or hostname of the attacking host to avoid setting off alarms.</li> </ul>"},{"location":"security/threat-modelling-example/","title":"Threat Modelling Example","text":"<p>This document covers the threat models for a sample project which takes video frames from video camera and process these frames on IoTEdge device and send them to Azure Cognitive Service to get the audio output.  These models can be considered as reference template to show how we can construct threat modeling document. Each of the labeled entities in the figures below are accompanied by meta-information which describe the threats, recommended mitigations, and the associated security principle or goal.</p>"},{"location":"security/threat-modelling-example/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"security/threat-modelling-example/#assets","title":"Assets","text":"Asset Entry Point Trust Level Azure Blob Storage Http End point Connection String Azure Monitor Http End Point Connection String Azure Cognitive Service Http End Point Connection String IoTEdge Module: M1 Http End Point Public Access (Local Area Network) IoTEdge Module: M2 Http End Point Public Access (Local Area Network) IoTEdge Module: M3 Http End Point Public Access (Local Area Network) IoTEdge Module: IoTEdgeMetricsCollector Http EndPoint Public Access (Local Area Network) Application Insights Http End Point Connection String"},{"location":"security/threat-modelling-example/#data-flow-diagram","title":"Data Flow Diagram","text":"<ul> <li>Client Browser makes requests to the M1 IoTEdge module. Browser and IoTEdge device are on same network, so browser directly hits the webapp URL.</li> <li>M1 IoTEdge module interacts with other two IoTEdge modules to render live stream from video device and display order scanning results via WebSockets.</li> <li>IoTEdge modules interact with Azure Cognitive service to get the translated text via OCR and audio stream via Text to Speech Service.</li> <li>IoTEdge modules send telemetry information to application insights.</li> <li>IoTEdge device is deployed with IoTEdge runtime which interacts with IoTEdge hub for deployments.</li> <li>IoTEdge module also sends some data to Azure storage which is required for debugging purpose.</li> <li>Cognitive service, application insights and Azure Storage are authenticated using connection strings which are stored in GitHub secrets and deployed using CI/CD pipelines.</li> </ul>"},{"location":"security/threat-modelling-example/#threat-list","title":"Threat List","text":""},{"location":"security/threat-modelling-example/#assumptions","title":"Assumptions","text":"<ul> <li>Secrets like ACR credentials are stored in GitHub secrets store which are deployed to IoTEdge Device by CI/CD pipelines. However, CI/CD pipelines are out of scope.</li> </ul>"},{"location":"security/threat-modelling-example/#threats","title":"Threats","text":"Vector Threat Mitigation (1) Sniff Unencrypted data can be intercepted in transit Not Mitigated (2) Access to M1 IoT Edge Module Unauthorized Access to M1 IoT Edge Module Not Mitigated (3) Access to M2 IoT Edge Module Unauthorized Access to M2 IoT Edge Module Not Mitigated (4) Access to M3 IoT Edge Module Unauthorized Access to M3 IoT Edge Module Not Mitigated (5) Steal Storage Credentials Unauthorized Access to M2 IoTEdge Module where database secrets are used Not Mitigated (6) Denial Of Service Dos attack on all IoTEdge Modules since there is no Authentication Not Mitigated (7) Tampering with Log data Application Insights is connected via Connection String which is stored in .env file on the IoTEdge device. Once user gains access to the device, .env file can be read and attacker can tamper the log data. Not Mitigated (8) Tampering with video camera device. Video camera path is stored in .env file on the IoTEdge device. Once user gains access to the device, .env file can be read and attacker can tamper the video feed or use another video source or fake video stream. Not Mitigated (9) Spoofing Tampering Azure IoT Hub connection string is stored in .env file on IoTEdge Device. Once user gains access to the device, .env file can be read and attacker cause Dos attacks on IoTHub Not Mitigated (10) Denial of Service DDOS attack Azure Cognitive Service connection string is stored in .env file on IoTEdge Device. Once user gains access to the device, .env file can be read and attacker cause DoS attacks on Azure Cognitive Service Not Mitigated (11) Tampering with Storage Storage connection string is stored in .env file on the IoTEdge device. Once user gains access to the device, .env file can be read and attacker can tamper data on storage or read from the storage. Not Mitigated (12) Tampering with Storage Cognitive Service connection string is stored in .env file on the IoTEdge device. Once user gains access to the device, .env file can be read and attacker use cognitive service API's for his own purpose causing increase cost to use. Not Mitigated"},{"location":"security/threat-modelling-example/#threat-model","title":"Threat Model","text":""},{"location":"security/threat-modelling-example/#threat-properties","title":"Threat Properties","text":"Notable Threats # Principle Threat Mitigation 1 Authenticity Since channel from browser to IoTEdge Module is not authenticated, anyone can spoof it once gains access to WiFi network. Add authentication in all IoTEdge modules. 2 Confidentiality and Integrity As a result of the vulnerability of not encrypting data, plaintext data could be intercepted during transit via a man-in-the-middle (MitM) attack. Sensitive data could be exposed or tampered with to allow further exploits. All products and services must encrypt data in transit using approved cryptographic protocols and algorithms.  Use TLS to encrypt all HTTP-based network traffic. Use other mechanisms, such as IPSec, to encrypt non-HTTP network traffic that contains customer or confidential data. Applies to data flow from browser to IoTEdge modules. 3 Confidentiality Data is a valuable target for most threat actors and attacking the data store directly, as opposed to stealing it during transit, allows data exfiltration at a much larger scale. In our scenario we are storing some data in Azure Blob containers. All customer or confidential data must be encrypted before being written to non-volatile storage media (encrypted at-rest) per the following requirements.  Use approved algorithms. This includes AES-256, AES-192, or AES-128. Encryption must be enabled before writing data to storage.  Applies to all data stores on the diagram. Azure Storage encrypt data at rest by default (AES-256). 4 Confidentiality Broken or non-existent authentication mechanisms may allow attackers to gain access to confidential information. All services within the Azure Trust Boundary must authenticate all incoming requests, including requests coming from the same network. Proper authorizations should also be applied to prevent unnecessary privileges.  Whenever available, use Azure Managed Identities to authenticate services. Service Principals may be used if Managed Identities are not supported. External users or services may use UserName + Passwords, Tokens, Certificates or Connection Strings to authenticate, provided these are stored on Key Vault or any other vaulting solution. For authorization, use Azure RBAC to segregate duties and grant only the least amount of access to perform an action at a particular scope. Applies to Azure services like Azure IoTHub, Azure Cognitive Service, Azure Application Insights are authenticated using connection strings. 5 Confidentiality and Integrity A large attack surface, particularly those that are exposed on the internet, will increase the probability of a compromise Minimize the application attack surface by limiting publicly exposed services.  Use strong network controls by using virtual networks, subnets and network security groups to protect against unsolicited traffic. Use Azure Private Endpoint for Azure Storage.  Applies to Azure storage. 6 Confidentiality and Integrity Browser and IoTEdge device are connected over in store WIFI network Minimize the attack on WIFI network by using secure algorithm like WPA2. Applies to connection between browser and IoTEdge devices. 7 Integrity Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident. Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected. Logging of critical application events must be performed to ensure that, should a security incident occur, incident response and root-cause analysis may be done. Steps must also be taken to ensure that logs are available and cannot be overwritten or destroyed through malicious or accidental occurrences. At a minimum, the following events should be logged. Login/logout events Privilege delegation events Security validation failures (e.g. input validation or authorization check failures) Application errors and system events Application and system start-ups and shut-downs, as well as logging initialization 6 Availability Exploitation of the public endpoint by malicious actors who aim to render the service unavailable to its intended users by interrupting the service normal activity, for instance by flooding the target service with requests until normal traffic is unable to be processed (Denial of Service) Application is accessed via web app deployed as one of the IoTEdge modules on the IoTEdge device. This app can be accessed by anyone in the local area network. Hence DDoS attacks are possible if the attacker gained access to local area network. All services deployed as IoTEdge modules must use authentication. Applies to services deployed on IoTEdge device 7 Integrity Tampering with data Data at rest, in Azure Storage must be encrypted on disk. Data at rest, in Azure can be protected further by Azure Advanced Threat Protection. Data at rest, in Azure Storage and Azure monitor workspace will use Azure RBAC to segregate duties and grant only the least amount of access to perform an action at a particular scope. Data in motion between services can be encrypted in TLS 1.2 Applies to data flow between IoTEdge modules and Azure Services."},{"location":"security/threat-modelling-example/#security-principles","title":"Security Principles","text":"<ul> <li>Confidentiality refers to the objective of keeping data private or secret. In practice, it\u2019s about controlling access to data to prevent unauthorized disclosure.</li> <li>Integrity is about ensuring that data has not been tampered with and, therefore, can be trusted. It is correct, authentic, and reliable.</li> <li>Availability means that networks, systems, and applications are up and running. It ensures that authorized users have timely, reliable access to resources when they are needed.</li> </ul>"},{"location":"security/threat-modelling/","title":"Threat Modeling","text":"<p>Threat modeling is an effective way to help secure your systems, applications, networks, and services. It's a systematic approach that identifies potential threats and recommendations to help reduce risk and meet security objectives earlier in the development lifecycle.</p>"},{"location":"security/threat-modelling/#threat-modeling-phases","title":"Threat Modeling Phases","text":"<ol> <li>Diagram     Capture all requirements for your system and create a data-flow diagram</li> <li>Identify     Apply a threat-modeling framework to the data-flow diagram and find potential security issues. Here we can use STRIDE framework to identify the threats.</li> <li>Mitigate     Decide how to approach each issue with the appropriate combination of security controls.</li> <li>Validate     Verify requirements are met, issues are found, and security controls are implemented.</li> </ol> <p>Example of these phases is covered in the threat modelling example. More details about these phases can be found at Threat Modeling Security Fundamentals.</p>"},{"location":"security/threat-modelling/#threat-modeling-example","title":"Threat Modeling Example","text":"<p>Here is an example of a threat modeling document which talks about the architecture and different phases involved in the threat modeling. This document can be used as reference template for creating threat modeling documents.</p>"},{"location":"security/threat-modelling/#resources","title":"Resources","text":"<ul> <li>Threat Modeling</li> <li>Microsoft Threat Modeling Tool</li> <li>STRIDE (Threat modeling framework)</li> </ul>"},{"location":"source-control/","title":"Source Control","text":"<p>There are many options when working with Source Control. In ISE we use AzureDevOps for private repositories and GitHub for public repositories.</p>"},{"location":"source-control/#goal","title":"Goal","text":"<ul> <li>Following industry best practice to work in geo-distributed teams which encourage contributions from all across ISE as well as the broader OSS community</li> <li>Improve code quality by enforcing reviews before merging into main branches</li> <li>Improve traceability of features and fixes through a clean commit history</li> </ul>"},{"location":"source-control/#general-guidance","title":"General Guidance","text":"<p>Consistency is important, so agree to the approach as a team before starting to code. Treat this as a design decision, so include a design proposal and review, in the same way as you would document all design decisions (see Working Agreements and Design Reviews).</p>"},{"location":"source-control/#creating-a-new-repository","title":"Creating a New Repository","text":"<p>When creating a new repository, the team should at least do the following</p> <ul> <li>Agree on the branch, release and merge strategy</li> <li>Define the merge strategy (linear or non-linear)</li> <li>Lock the default branch and merge using pull requests (PRs)</li> <li>Agree on branch naming (e.g. <code>user/your_alias/feature_name</code>)</li> <li>Establish branch/PR policies</li> <li>For public repositories the default branch should contain the following files:<ul> <li>LICENSE</li> <li>README.md</li> <li>contributing.md</li> </ul> </li> </ul>"},{"location":"source-control/#contributing-to-an-existing-repository","title":"Contributing to an Existing Repository","text":"<p>When working on an existing project, <code>git clone</code> the repository and ensure you understand the team's branch, merge and release strategy (e.g. through the projects CONTRIBUTING.md file).</p>"},{"location":"source-control/#mixed-devops-environments","title":"Mixed DevOps Environments","text":"<p>For most engagements having a single hosted DevOps environment (i.e. Azure DevOps) is the preferred path but there are times when a mixed DevOps environment (i.e. Azure DevOps for Agile/Work item tracking &amp; GitHub for Source Control) is needed due to customer requirements. When working in a mixed environment:</p> <ul> <li>Manually tag PR's in work items</li> <li>Ensure that the scope of work items / tasks align with PR's</li> </ul>"},{"location":"source-control/#resources","title":"Resources","text":"<ul> <li>Git <code>--local-branching-on-the-cheap</code></li> <li>Azure DevOps</li> <li>ISE Git detailsdetails on how to use Git as part of a ISE project.</li> <li>GitHub - Removing sensitive data from a repository</li> <li>How Git Works Pluralsight course</li> <li>Mastering Git Pluralsight course</li> </ul>"},{"location":"source-control/component-versioning/","title":"Component Versioning","text":""},{"location":"source-control/component-versioning/#goal","title":"Goal","text":"<p>Larger applications consist of multiple components that reference each other and rely on compatibility of the interfaces/contracts of the components.</p> <p>To achieve the goal of loosely coupled applications, each component should be versioned independently hence allowing developers to detect breaking changes or seamless updates just by looking at the version number.</p>"},{"location":"source-control/component-versioning/#version-numbers-and-versioning-schemes","title":"Version Numbers and Versioning Schemes","text":"<p>For developers or other components to detect breaking changes the version number of a component is important.</p> <p>There is different versioning number schemes, e.g.</p> <p><code>major.minor[.build[.revision]]</code></p> <p>or</p> <p><code>major.minor[.maintenance[.build]]</code>.</p> <p>Upon build / CI these version numbers are being generated. During CD / release components are pushed to a component repository such as Nuget, NPM, Docker Hub where a history of different versions is being kept.</p> <p>Each build the version number is incremented at the last digit.</p> <p>Updating the major / minor version indicates changes of the API / interfaces / contracts:</p> <ul> <li>Major Version: A breaking change</li> <li>Minor Version: A backwards-compatible minor change</li> <li>Build / Revision: No API change, just a different build.</li> </ul>"},{"location":"source-control/component-versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>Semantic Versioning is a versioning scheme specifying how to interpret the different version numbers. The most common format is <code>major.minor.patch</code>. The version number is incremented based on the following rules:</p> <ul> <li>Major version when you make incompatible API changes,</li> <li>Minor version when you add functionality in a backwards-compatible manner, and</li> <li>Patch version when you make backwards-compatible bug fixes.</li> </ul> <p>Examples of semver version numbers:</p> <ul> <li>1.0.0-alpha.1: +1 commit after the alpha release of 1.0.0</li> <li>2.1.0-beta: 2.1.0 in beta branch</li> <li>2.4.2: 2.4.2 release</li> </ul> <p>A common practice is to determine the version number during the build process. For this the source control repository is utilized to determine the version number automatically based the source code repository.</p> <p>The <code>GitVersion</code> tool uses the git history to generate repeatable and unique version number based on</p> <ul> <li>number of commits since last major or minor release</li> <li>commit messages</li> <li>tags</li> <li>branch names</li> </ul> <p>Version updates happen through:</p> <ul> <li>Commit messages or tags for Major / Minor / Revision updates. <p>When using commit messages a convention such as Conventional Commits is recommended (see Git Guidance - Commit Message Structure)</p> </li> <li>Branch names (e.g. develop, release/..) for Alpha / Beta / RC</li> <li>Otherwise: Number of commits (+12, ...)</li> </ul>"},{"location":"source-control/component-versioning/#semantic-versioning-within-a-monorepo","title":"Semantic Versioning Within a Monorepo","text":"<p>A monorepo, short for \"monolithic repository\", is a software development practice where multiple related projects, components, or modules are stored within a single version-controlled repository as opposed to maintaining them in separate repositories.</p> <p></p>"},{"location":"source-control/component-versioning/#challenges-with-versioning-in-a-monorepo-structure","title":"Challenges with Versioning in a Monorepo Structure","text":"<p>Versioning in a monorepo involves making decisions about how to assign version numbers to different projects and components contained within the repository.</p> <p>Assigning a single version number to all projects in a monorepo can lead to frequent version increments if changes in one project don't match the significance of changes in another. This might be excessive if some projects undergo rapid development while others evolve more slowly.</p> <p>Ideally, we would want each project within the monorepo to have its own version number. Changes in one project shouldn't necessarily trigger version changes in others. This strategy allows projects to evolve at their own pace, without forcing all projects to adopt the same version number. It aligns well with the differing release cadences of distinct projects.</p>"},{"location":"source-control/component-versioning/#semantic-release-package-for-versioning","title":"semantic-release Package for Versioning","text":"<p>semantic-release simplifies the entire process of releasing a package, which encompasses tasks such as identifying the upcoming version number, producing release notes, and distributing the package. This process severs the direct link between human sentiments and version identifiers. Instead, it rigorously adheres to the Semantic Versioning standards and effectively conveys the significance of alterations to end users.</p> <p><code>semantic-release</code> relies on commit messages to assess how codebase changes impact consumers. By adhering to structured conventions for commit messages, <code>semantic-release</code> autonomously identifies the subsequent semantic version, compiles a changelog, and releases the software.</p> <p>Angular Commit Message Conventions serve as the default for <code>semantic-release</code>. However, the configuration options of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins, including presets, can be adjusted to modify the commit message format.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type fix(pencil): stop graphite breaking when too much pressure applied Patch Fix Release feat(pencil): add 'graphiteWidth' option Minor Feature Release perf(pencil): remove graphiteWidth option        BREAKING CHANGE: The graphiteWidth option has been removed.  The default graphite width of 10mm is always used for performance reasons. Major Breaking Release  (Note that the BREAKING CHANGE:  token must be in the footer of the commit) <p>The inherent setup of <code>semantic-release</code> presumes a direct correspondence between a GitHub repository and a package. Hence changes anywhere in the project result in a version upgrade for the project.</p> <p>The semantic-release-monorepo tool permits the utilization of <code>semantic-release</code> within a solitary GitHub repository that encompasses numerous packages.</p> <p>Instead of attributing all commits to a single package, commits are assigned to packages based on the files that a commit touched.</p> <p>If a commit touches a file in or below a package's root, it will be considered for that package's next release. A single commit can belong to multiple packages and may trigger the release of multiple packages.</p> <p>In order to avoid version collisions, generated git tags are namespaced using the given package's name: <code>&lt;package-name&gt;</code>-<code>&lt;version&gt;</code>.</p> <p></p>"},{"location":"source-control/component-versioning/#semantic-release-configurations","title":"semantic-release Configurations","text":"<p><code>semantic-release</code>\u2019s options, mode and plugins can be set via either:</p> <ul> <li>A .releaserc file, written in YAML or JSON, with optional extensions: .yaml/.yml/.json/.js/.cjs</li> <li>A release.config.(js|cjs) file that exports an object</li> <li>A release key in the project's package.json file</li> </ul> <p>Here is an example .releaserc file which contains the configuration for: 1. git tags for the releases from different types of branches 2. Any plugins required, list of supported plugins can be found here. In this file semantic-release-monorepo plugin is extended.</p> <pre><code>{\n    \"ci\": true,\n    \"repositoryUrl\": \"your repository url\",\n    \"branches\": [\n      \"master\",\n      {\n        \"name\": \"feature/*\",\n        \"prerelease\": \"beta-${name.replace(/\\\\//g, '-').replace(/_/g, '-')}\"\n      },\n      {\n        \"name\": \"[a-zA-Z0-9_]+/[a-zA-Z0-9-_]+\",\n        \"prerelease\": \"dev-${name.replace(/\\\\//g, '-').replace(/_/g, '--')}\"\n      }\n    ],\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      [\n        \"@semantic-release/exec\",\n        {\n          \"verifyReleaseCmd\": \"echo ${nextRelease.name} &gt; .VERSION\"\n        }\n      ],\n      \"semantic-release-ado\"\n    ],\n    \"extends\": \"semantic-release-monorepo\"\n  }\n</code></pre>"},{"location":"source-control/component-versioning/#resources","title":"Resources","text":"<ul> <li>GitVersion</li> <li>Semantic Versioning</li> <li>Versioning in C#</li> <li>semantic-release</li> <li>semantic-release-monorepo</li> </ul>"},{"location":"source-control/merge-strategies/","title":"Merge Strategies","text":"<p>Agree if you want a linear or non-linear commit history. There are pros and cons to both approaches:</p> <ul> <li>Pro linear: Avoid messy git history, use linear history</li> <li>Con linear: Why you should stop using Git rebase</li> </ul>"},{"location":"source-control/merge-strategies/#approach-for-non-linear-commit-history","title":"Approach for Non-Linear Commit History","text":"<p>Merging <code>topic</code> into <code>main</code></p> <pre><code>  A---B---C topic\n /         \\\nD---E---F---G---H main\n\ngit fetch origin\ngit checkout main\ngit merge topic\n</code></pre>"},{"location":"source-control/merge-strategies/#two-approaches-to-achieve-a-linear-commit-history","title":"Two Approaches to Achieve a Linear Commit History","text":""},{"location":"source-control/merge-strategies/#rebase-topic-branch-before-merging-into-main","title":"Rebase Topic Branch Before Merging into Main","text":"<p>Before merging <code>topic</code> into <code>main</code>, we rebase <code>topic</code> with the <code>main</code> branch:</p> <pre><code>          A---B---C topic\n         /         \\\nD---E---F-----------G---H main\n\ngit checkout main\ngit pull\ngit checkout topic\ngit rebase origin/main\n</code></pre> <p>Create a PR topic --&gt; main in Azure DevOps and approve using the squash merge option</p>"},{"location":"source-control/merge-strategies/#rebase-topic-branch-before-squash-merge-into-main","title":"Rebase Topic Branch Before Squash Merge into Main","text":"<p>Squash merging is a merge option that allows you to condense the Git history of topic branches when you complete a pull request. Instead of adding each commit on <code>topic</code> to the history of <code>main</code>, a squash merge takes all the file changes and adds them to a single new commit on <code>main</code>.</p> <pre><code>          A---B---C topic\n         /\nD---E---F-----------G---H main\n</code></pre> <p>Create a PR topic --&gt; main in Azure DevOps and approve using the squash merge option</p>"},{"location":"source-control/naming-branches/","title":"Naming Branches","text":"<p>When contributing to existing projects, look for and stick with the agreed branch naming convention. In open source projects this information is typically found in the contributing instructions, often in a file named <code>CONTRIBUTING.md</code>.</p> <p>In the beginning of a new project the team agrees on the project conventions including the branch naming strategy.</p> <p>Here's an example of a branch naming convention:</p> <pre><code>&lt;user alias&gt;/[feature/bug/hotfix]/&lt;work item ID&gt;_&lt;title&gt;\n</code></pre> <p>Which could translate to something as follows:</p> <pre><code>dickinson/feature/271_add_more_cowbell\n</code></pre> <p>The example above is just that - an example. The team can choose to omit or add parts. Choosing a branch convention can depend on the development model (e.g. trunk-based development), versioning model, tools used in managing source control, matter of taste etc. Focus on simplicity and reducing ambiguity; a good branch naming strategy allows the team to understand the purpose and ownership of each branch in the repository.</p>"},{"location":"source-control/secrets-management/","title":"Working with Secrets in Source Control","text":"<p>The best way to avoid leaking secrets is to store them in local/private files and exclude these from git tracking with a .gitignore file. E.g. the following pattern will exclude all files with the extension <code>.private.config</code>:</p> <pre><code># remove private configuration\n*.private.config\n</code></pre> <p>For more details on proper management of credentials and secrets in source control, and handling an accidental commit of secrets to source control, please refer to the Secrets Management document which has further information, split by language as well.</p> <p>As an extra security measure, apply credential scanning in your CI/CD pipeline.</p>"},{"location":"source-control/git-guidance/","title":"Git Guidance","text":""},{"location":"source-control/git-guidance/#what-is-git","title":"What is Git?","text":"<p>Git is a distributed version control system. This means that - unlike SVN or CVS - it doesn't use a central server to synchronize. Instead, every participant has a local copy of the source-code, and the attached history that is kept in sync by comparing commit hashes (SHA hashes of changes between each git commit command) making up the latest version (called <code>HEAD</code>).</p> <p>For example:</p> <pre><code>repo 1: A -&gt; B -&gt; C -&gt; D -&gt; HEAD\nrepo 2: A -&gt; B -&gt; HEAD\nrepo 3: X -&gt; Y -&gt; Z -&gt; HEAD\nrepo 4: A -&gt; J -&gt; HEAD\n</code></pre> <p>Since they share a common history, repo 1 and repo 2 can be synchronized fairly easily, repo 4 may be able to synchronize as well, but it's going to have to add a commit (J, and maybe a merge commit) to repo 1. Repo 3 cannot be easily synchronized with the others. Everything related to these commits is stored in a local .git directory in the root of the repository.</p> <p>In other words, by using Git you are simply creating immutable file histories that uniquely identify the current state and therefore allow sharing whatever comes after. It's a Merkle tree.</p> <p>Be sure to run <code>git help</code> after Git installation to find really in-depth explanations of everything.</p>"},{"location":"source-control/git-guidance/#installation","title":"Installation","text":"<p>Git is a tool set that must be installed. Install Git and follow the First-Time Git Setup.</p> <p>A recommended installation is the Git Lens extension for Visual Studio Code. Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more.</p> <p>You can use these commands as well to configure your Git for Visual Studio Code as an editor for merge conflicts and diff tool.</p> <pre><code>git config --global user.name [YOUR FIRST AND LAST NAME]\ngit config --global user.email [YOUR E-MAIL ADDRESS]\n\ngit config --global merge.tool vscode\ngit config --global mergetool.vscode.cmd \"code --wait $MERGED\"\n\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd \"code --wait --diff $LOCAL $REMOTE\"\n</code></pre>"},{"location":"source-control/git-guidance/#basic-workflow","title":"Basic Workflow","text":"<p>A basic Git workflow is as follows; you can find more information on the specific steps below.</p> <pre><code># pull the latest changes\ngit pull\n\n# start a new feature branch based on the develop branch\ngit checkout -b feature/123-add-git-instructions develop\n\n# edit some files\n\n# add and commit the files\ngit add &lt;file&gt;\ngit commit -m \"add basic instructions\"\n\n# edit some files\n\n# add and commit the files\ngit add &lt;file&gt;\ngit commit -m \"add more advanced instructions\"\n\n# check your changes\ngit status\n\n# push the branch to the remote repository\ngit push --set-upstream origin feature/123-add-git-instructions\n</code></pre>"},{"location":"source-control/git-guidance/#cloning","title":"Cloning","text":"<p>Whenever you want to make a change to a repository, you need to first clone it. Cloning a repository pulls down a full copy of all the repository data, so that you can work on it locally. This copy includes all versions of every file and folder for the project.</p> <pre><code>git clone https://github.com/username/repo-name\n</code></pre> <p>You only need to clone the repository the first time. Before any subsequent branches you can sync any changes from the remote repository using <code>git pull</code>.</p>"},{"location":"source-control/git-guidance/#branching","title":"Branching","text":"<p>To avoid adding code that has not been peer reviewed to the main branch (ex. <code>develop</code>) we typically work in feature branches, and merge these back to the main trunk with a Pull Request. It's even the case that often the <code>main</code> or <code>develop</code> branch of a repository are locked so that you can't make changes without a Pull Request. Therefore, it is useful to create a separate branch for your local/feature work, so that you can work and track your changes in this branch.</p> <p>Pull the latest changes and create a new branch for your work based on the trunk (in this case <code>develop</code>).</p> <pre><code>git pull\ngit checkout -b feature/feature-name develop\n</code></pre> <p>At any point, you can move between the branches with <code>git checkout &lt;branch&gt;</code> as long as you have committed or stashed your work. If you forget the name of your branch use <code>git branch --all</code> to list all branches.</p>"},{"location":"source-control/git-guidance/#committing","title":"Committing","text":"<p>To avoid losing work, it is good to commit often in small chunks. This allows you to revert only the last changes if you discover a problem and also neatly explains exactly what changes were made and why.</p> <ol> <li>Make changes to your branch</li> <li> <p>Check what files were changed</p> <pre><code>&gt; git status\nOn branch feature/271-basic-commit-info\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   source-control/git-guidance/README.md\n</code></pre> </li> <li> <p>Track the files you wish to include in the commit. To track all modified files:</p> <pre><code>git add --all\n</code></pre> <p>Or to track only specific files:</p> <pre><code>git add source-control/git-guidance/README.md\n</code></pre> </li> <li> <p>Commit the changes to your local branch with a descriptive commit message</p> <pre><code>git commit -m \"add basic git instructions\"\n</code></pre> </li> </ol>"},{"location":"source-control/git-guidance/#pushing","title":"Pushing","text":"<p>When you are done working, push your changes to a branch in the remote repository using:</p> <pre><code>git push\n</code></pre> <p>The first time you push, you first need to set an upstream branch as follows. After the first push, the --set-upstream parameter and branch name are not needed anymore.</p> <pre><code>git push --set-upstream origin feature/feature-name\n</code></pre> <p>Once the feature branch is pushed to the remote repository, it is visible to anyone with access to the code.</p>"},{"location":"source-control/git-guidance/#merging","title":"Merging","text":"<p>We encourage the use of Pull Request to merge code to the main repository to make sure that all code in the final product is code reviewed</p> <p>The Pull Request (PR) process in Azure DevOps, GitHub and other similar tools make it easy both to start a PR, review a PR and merge a PR.</p>"},{"location":"source-control/git-guidance/#merge-conflicts","title":"Merge Conflicts","text":"<p>If multiple people make changes to the same files, you may need to resolve any conflicts that have occurred before you can merge.</p> <pre><code># check out the develop branch and get the latest changes\ngit checkout develop\ngit pull\n\n# check out your branch\ngit checkout &lt;your branch&gt;\n\n# merge the develop branch into your branch\ngit merge develop\n\n# if merge conflicts occur, above command will fail with a message telling you that there are conflicts to be solved\n\n# find which files need to be resolved\ngit status\n</code></pre> <p>You can start an interactive process that will show which files have conflicts. Sometimes you removed a file, where it was changed in dev. Or you made changes to some lines in a file where another developer made changes as well. If you went through the installation steps mentioned before, Visual Studio Code is set up as merge tool. You can also use a merge tool like kdiff3. When editing conflicts occur, the process will automatically open Visual Studio Code where the conflicting parts are highlighted in green and blue, and you have make a choice:</p> <ul> <li>Accept your changes (current)</li> <li>Accept the changes from dev branch (incoming)</li> <li>Accept them both and fix the code (probably needed)</li> </ul> <pre><code>Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n=======\nGit makes conflict resolution easy.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified\n</code></pre> <p>When this process is completed, make sure you test the result by executing build, checks, test to validate this merged result.</p> <pre><code># conclude the merge\ngit merge --continue\n\n# verify that everything went ok\ngit log\n\n# push the changes to the remote branch\ngit push\n</code></pre> <p>If no other conflicts appear, the PR can now be merged, and your branch deleted. Use <code>squash</code> to reduce your changes into a single commit, so the commit history can be within an acceptable size.</p>"},{"location":"source-control/git-guidance/#stashing-changes","title":"Stashing Changes","text":"<p><code>git stash</code> is super handy if you have un-committed changes in your working directory, but you want to work on a different branch. You can run <code>git stash</code>, save the un-committed work, and revert to the HEAD commit. You can retrieve the saved changes by running <code>git stash pop</code>:</p> <pre><code>git stash\n\u2026\ngit stash pop\n</code></pre> <p>Or you can move the current state into a new branch:</p> <pre><code>git stash branch &lt;new_branch_to_save_changes&gt;\n</code></pre>"},{"location":"source-control/git-guidance/#recovering-lost-commits","title":"Recovering Lost Commits","text":"<p>If you \"lost\" a commit that you want to return to, for example to revert a <code>git rebase</code> where your commits got squashed, you can use <code>git reflog</code> to find the commit:</p> <pre><code>git reflog\n</code></pre> <p>Then you can use the reflog reference (<code>HEAD@{}</code>) to reset to a specific commit before the rebase:</p> <pre><code>git reset HEAD@{2}\n</code></pre>"},{"location":"source-control/git-guidance/#commit-best-practices","title":"Commit Best Practices","text":"<p>A commit combines changes into a logical unit. Adding a descriptive commit message can aid in comprehending the code changes and understanding the rationale behind the modifications. Consider the following when making your commits:</p> <ul> <li>Make small commits. This makes changes easier to review, and if we need to revert a commit, we lose less work. Consider splitting the commit into separate commits with <code>git add -p</code> if it includes more than one logical change or bug fix.</li> <li>Don't mix whitespace changes with functional code changes. It is hard to determine if the line has a functional change or only removes a whitespace, so functional changes may go unnoticed.</li> <li>Commit complete and well tested code. Never commit incomplete code, get in the habit of testing your code before committing.</li> <li>Write good commit messages.<ul> <li>Why is it necessary? It may fix a bug, add a feature, improve performance, or just be a change for the sake of correctness</li> <li>What effects does this change have? In addition to the obvious ones, this may include benchmarks, side effects etc.</li> </ul> </li> </ul> <p>You can specify the default git editor, which allows you to write your commit messages using your favorite editor. The following command makes Visual Studio Code your default git editor:</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre>"},{"location":"source-control/git-guidance/#commit-message-structure","title":"Commit Message Structure","text":"<p>The essential parts of a commit message are:</p> <ul> <li>subject line: a short description of the commit, maximum 50 characters long</li> <li>body (optional): a longer description of the commit, wrapped at 72 characters, separated from the subject line by a blank line</li> </ul> <p>You are free to structure commit messages; however, git commands like <code>git log</code> utilize above structure. Therefore, it can be helpful to follow a convention within your team and to utilize git best.</p> <p>For example, Conventional Commits is a lightweight convention that complements SemVer, by describing the features, fixes, and breaking changes made in commit messages. See Component Versioning for more information on versioning.</p> <p>For more information on commit message conventions, see:</p> <ul> <li>A Note About Git Commit Messages</li> <li>Conventional Commits</li> <li>Git commit best practices</li> <li>How to Write a Git Commit Message</li> <li>How to Write Better Git Commit Messages</li> <li>Information in commit messages</li> <li>On commit messages</li> </ul>"},{"location":"source-control/git-guidance/#managing-remotes","title":"Managing Remotes","text":"<p>A local git repository can have one or more backing remote repositories. You can list the remote repositories using <code>git remote</code> - by default, the remote repository you cloned from will be called origin</p> <pre><code>&gt; git remote -v\norigin  https://github.com/microsoft/code-with-engineering-playbook.git (fetch)\norigin  https://github.com/microsoft/code-with-engineering-playbook.git (push)\n</code></pre>"},{"location":"source-control/git-guidance/#working-with-forks","title":"Working with Forks","text":"<p>You can set multiple remotes. This is useful for example if you want to work with a forked version of the repository. For more info on how to set upstream remotes and syncing repositories when working with forks see GitHub's Working with forks documentation.</p>"},{"location":"source-control/git-guidance/#updating-the-remote-if-a-repository-changes-names","title":"Updating the Remote if a Repository Changes Names","text":"<p>If the repository is changed in some way, for example a name change, or if you want to switch between HTTPS and SSH you need to update the remote</p> <pre><code># list the existing remotes\n&gt; git remote -v\norigin  https://hostname/username/repository-name.git (fetch)\norigin  https://hostname/username/repository-name.git (push)\n\n# change the remote url\ngit remote set-url origin https://hostname/username/new-repository-name.git\n\n# verify that the remote URL has changed\n&gt; git remote -v\norigin  https://hostname/username/new-repository-name.git (fetch)\norigin  https://hostname/username/new-repository-name.git (push)\n</code></pre>"},{"location":"source-control/git-guidance/#rolling-back-changes","title":"Rolling Back Changes","text":""},{"location":"source-control/git-guidance/#reverting-and-deleting-commits","title":"Reverting and Deleting Commits","text":"<p>To \"undo\" a commit, run the following two commands: <code>git revert</code> and <code>git reset</code>. <code>git revert</code> creates a new commit that undoes commits while <code>git reset</code> allows deleting commits entirely from the commit history.</p> <p>If you have committed secrets/keys, <code>git reset</code> will remove them from the commit history!</p> <p>To delete the latest commit use <code>HEAD~</code>:</p> <pre><code>git reset --hard HEAD~1\n</code></pre> <p>To delete commits back to a specific commit, use the respective commit id:</p> <pre><code>git reset --hard &lt;sha1-commit-id&gt;\n</code></pre> <p>after you deleted the unwanted commits, push using <code>force</code>:</p> <pre><code>git push origin HEAD --force\n</code></pre> <p>Interactive rebase for undoing commits:</p> <pre><code>git rebase -i HEAD~N\n</code></pre> <p>The above command will open an interactive session in an editor (for example vim) with the last N commits sorted from oldest to newest. To undo a commit, delete the corresponding line of the commit and save the file. Git will rewrite the commits in the order listed in the file and because one (or many) commits were deleted, the commit will no longer be part of the history.</p> <p>Running rebase will locally modify the history, after this one can use <code>force</code> to push the changes to remote without the deleted commit.</p>"},{"location":"source-control/git-guidance/#using-submodules","title":"Using Submodules","text":"<p>Submodules can be useful in more complex deployment and/or development scenarios</p> <p>Adding a submodule to your repo</p> <pre><code>git submodule add -b master &lt;your_submodule&gt;\n</code></pre> <p>Initialize and pull a repo with submodules:</p> <pre><code>git submodule init\ngit submodule update --init --remote\ngit submodule foreach git checkout master\ngit submodule foreach git pull origin\n</code></pre>"},{"location":"source-control/git-guidance/#working-with-images-video-and-other-binary-content","title":"Working with Images, Video and Other Binary Content","text":"<p>Avoid committing frequently changed binary files, such as large images, video or compiled code to your git repository. Binary content is not diffed like text content, so cloning or pulling from the repository may pull each revision of the binary file.</p> <p>One solution to this problem is <code>Git LFS (Git Large File Storage)</code> - an open source Git extension for versioning large files. You can find more information on Git LFS in the Git LFS and VFS document.</p>"},{"location":"source-control/git-guidance/#working-with-large-repositories","title":"Working with Large Repositories","text":"<p>When working with a very large repository of which you don't require all the files, you can use <code>VFS for Git</code> - an open source Git extension that virtualize the file system beneath your Git repository, so that you seem to work in a regular working directory but while VFS for Git only downloads objects as they are needed. You can find more information on VFS for Git in the Git LFS and VFS document.</p>"},{"location":"source-control/git-guidance/#tools","title":"Tools","text":"<ul> <li>Visual Studio Code is a cross-platform powerful source code editor with built in git commands. Within Visual Studio Code editor you can review diffs, stage changes, make commits, pull and push to your git repositories. You can refer to Visual Studio Code Git Support for documentation.</li> <li>Use a shell/terminal to work with Git commands instead of relying on GUI clients.</li> <li>If you're working on Windows, posh-git is a great PowerShell environment for Git. Another option is to use Git bash for Windows. On Linux/Mac, install git and use your favorite shell/terminal.</li> </ul>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/","title":"Using Git LFS and VFS for Git Introduction","text":"<p>Git LFS and VFS for Git are solutions for using Git with (large) binary files and large source trees.</p>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#git-lfs","title":"Git LFS","text":"<p>Git is very good and keeping track of changes in text-based files like code, but it is not that good at tracking binary files. For instance, if you store a Photoshop image file (PSD) in a repository, with every change, the complete file is stored again in the history. This can make the history of the Git repo very large, which makes a clone of the repository more and more time-consuming.</p> <p>A solution to work with binary files is using Git LFS (or Git Large File System). This is an extension to Git and must be installed separately, and it can only be used with a repository platform that supports LFS. GitHub.com and Azure DevOps for instance are platforms that have support for LFS.</p> <p>The way it works in short, is that a placeholder file is stored in the repo with information for the LFS system. It looks something like this:</p> <pre><code>version https://git-lfs.github.com/spec/v1\noid a747cfbbef63fc0a3f5ffca332ae486ee7bf77c1d1b9b2de02e261ef97d085fe\nsize 4923023\n</code></pre> <p>The actual file is stored in a separate storage. This way Git will track changes in this placeholder file, not the large file. The combination of using Git and Git LFS will hide this from the developer though. You will just work with the repository and files as before.</p> <p>When working with these large files yourself, you'll still see the Git history grown on your own machine, as Git will still start tracking these large files locally, but when you clone the repo, the history is actually pretty small. So it's beneficial for others not working directly on the large files.</p>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#pros-of-git-lfs","title":"Pros of Git LFS","text":"<ul> <li>Uses the end to end Git workflow for all files</li> <li>Git LFS supports file locking to avoid conflicts for undiffable assets</li> <li>Git LFS is fully supported in Azure DevOps Services</li> </ul>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#cons-of-git-lfs","title":"Cons of Git LFS","text":"<ul> <li>Everyone who contributes to the repository needs to install Git LFS</li> <li>If not set up properly:<ul> <li>Binary files committed through Git LFS are not visible as Git will only download the data describing the large file</li> <li>Committing large binaries will push the full binary to the repository</li> </ul> </li> <li>Git cannot merge the changes from two different versions of a binary file; file locking mitigates this</li> <li>Azure Repos do not support using SSH for repositories with Git LFS tracked files - for more information see the Git LFS authentication documentation</li> </ul>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#installation-and-use-of-git-lfs","title":"Installation and use of Git LFS","text":"<p>Go to https://git-lfs.github.com and download and install the setup from there.</p> <p>For every repository you want to use LFS, you have to go through these steps:</p> <ul> <li>Setup LFS for the repo:</li> </ul> <pre><code>git lfs install\n</code></pre> <ul> <li>Indicate which files have to be considered as large files (or binary files). As an example, to consider all Photoshop files to be large:</li> </ul> <pre><code>git lfs track \"*.psd\"\n</code></pre> <p>There are more fine-grained ways to indicate files in a folder and more. See the Git LFS Documentation.</p> <p>With these commands a <code>.gitattribute</code> file is created which contains these settings and must be part of the repository.</p> <p>From here on you just use the standard Git commands to work in the repository. The rest will be handled by Git and Git LFS.</p>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#common-lfs-commands","title":"Common LFS Commands","text":"<p>Install Git LFS</p> <pre><code>git lfs install       # windows\nsudo apt-get git-lfs  # linux\n</code></pre> <p>See the Git LFS installation instructions for installation on other systems</p> <p>Track .mp4 files with Git LFS</p> <pre><code>git lfs track '*.mp4'\n</code></pre> <p>Update the <code>.gitattributes</code> file listing the files and patterns to track</p> <pre><code>*.mp4 filter=lfs diff=lfs merge=lfs -text\ndocs/images/* filter=lfs diff=lfs merge=lfs -text\n</code></pre> <p>List all patterns tracked</p> <pre><code>git lfs track\n</code></pre> <p>List all files tracked</p> <pre><code>git lfs ls-files\n</code></pre> <p>Download files to your working directory</p> <pre><code>git lfs pull\ngit lfs pull --include=\"path/to/file\"\n</code></pre>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#vfs-for-git","title":"VFS for Git","text":"<p>Imagine a large repository containing multiple projects, ex. one per feature. As a developer you may only be working on some features, and thus you don't want to download all the projects in the repo. By default, with Git however, cloning the repository means you will download all files/projects.</p> <p>VFS for Git (or Virtual File System for Git) solves this problem, as it will only download what you need to your local machine, but if you look in the file system, e.g. with Windows Explorer, it will show all the folders and files including the correct file sizes.</p> <p>The Git platform must support GVFS to make this work. GitHub.com and Azure DevOps both support this out of the box.</p>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#installation-and-use-of-vfs-for-git","title":"Installation and use of VFS for Git","text":"<p>Microsoft create VFS for Git and made it open source. It can be found at https://github.com/microsoft/VFSForGit. It's only available for Windows.</p> <p>The necessary installers can be found at https://github.com/Microsoft/VFSForGit/releases</p> <p>On the releases page you'll find two important downloads:</p> <ul> <li>Git 2.28.0.0 installer, which is a requirement for running VFS for Git. This is not the same as the standard Git for Windows install!</li> <li>SetupGVFS installer.</li> </ul> <p>Download those files and install them on your machine.</p> <p>To be able to use VFS for Git for a repository, a <code>.gitattributes</code> file needs to be added to the repo with this line in it:</p> <pre><code>* -text\n</code></pre> <p>To clone a repository to your machine using VFS for Git you use <code>gvfs</code> instead of <code>git</code> like so:</p> <pre><code>gvfs clone [URL] [dir]\n</code></pre> <p>Once this is done, you have a folder which contains a <code>src</code> folder which contains the contents of the repository. This is done because of a practice to put all outputs of build systems outside this tree. This makes it easier to manage <code>.gitignore</code> files and to keep Git performant with lots of files.</p> <p>For working with the repository you just use Git commands as before.</p> <p>To remove a VFS for Git repository from your machine, make sure the VFS process is stopped and execute this command from the main folder:</p> <pre><code>gvfs unmount\n</code></pre> <p>This will stop the process and unregister it, after that you can safely remove the folder.</p>"},{"location":"source-control/git-guidance/git-lfs-and-vfs/#resources","title":"Resources","text":"<ul> <li>Git LFS getting started</li> <li>Git LFS manual</li> <li>Git LFS on Azure Repos</li> </ul>"}]}