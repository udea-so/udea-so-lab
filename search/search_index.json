{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Laboratorio de Sistema Operativos - UdeA","text":"<p>Repositorio con material de las sesiones de laboratorio</p>"},{"location":"#sesiones-de-laboratorio","title":"Sesiones de laboratorio","text":""},{"location":"#evaluacion","title":"Evaluaci\u00f3n","text":"Evaluaci\u00f3n Ex\u00e1mentes Laboratorio Seguimiento (quizzes y actividades) Porcentaje Primera parte M 1 y 2 - 15 % P 1 y 2 - 15 % M 1 y 2 - 10 % 40 % Segunda parte M 3 y 4 - 15 % P 3 y 4 - 15 % M 3 y 4 - 10 % 40 % Trabajo final 20 % 100 %"},{"location":"#cronograma-del-curso","title":"Cronograma del curso","text":"# Practica Fecha virtual Fecha presencial Link Material 0 Presentaci\u00f3n del laboratorio 12/08/2024 12/08/2024 link 1 Practica 1 - Introducci\u00f3n al lenguaje C ~~19/08/2024~~ ~~19/08/2024~~ Festivo 26/08/2024 26/08/2024 link 02/09/2024 02/09/2024 link 2 Practica 2 - Procesos 09/09/2024 09/09/2024 16/09/2024 16/09/2024 23/09/2024 23/09/2024 30/09/2024 30/09/2024 3 Practica 3 - Hilos 07/10/2024 07/10/2024 ~~14/10/2024~~ ~~14/10/2024~~ Festivo 21/10/2024 21/10/2024 28/10/2024 28/10/2024 4 Practica 4 - I/O ~~04/11/2024~~ ~~04/11/2024~~ Festivo ~~11/11/2024~~ ~~11/11/2024~~ Festivo 18/11/2024 18/11/2024 25/11/2024 25/11/2024 <p>Nota: Las fechas que se encuentran tachadas es por que son dias festivos</p>"},{"location":"#ejemplos-por-encuentro","title":"Ejemplos por encuentro","text":"<p>Acceda al siguiente link para ver los ejemplos por encuentro sincronico.</p>"},{"location":"lab1/","title":"Practica 1","text":"<p>Fecha: </p>"},{"location":"lab1/#objetivos","title":"Objetivos","text":""},{"location":"lab1/#introduccion","title":"Introducci\u00f3n","text":"<p>En el siguiente laboratorio se ver\u00e1n las herramientas necesarias para el desarrollo del laboratorio as\u00ed como los conceptos de lenguaje C necesarios para realizar la primera practica. A continuaci\u00f3n se referencian los temas por sesi\u00f3n:</p> Sesi\u00f3n Tema 0 Presentaci\u00f3n del laboratorio [link] 1 Herramientas necesarias [link] 2 Introducci\u00f3n al lenguaje C [link]"},{"location":"lab1/#referncias","title":"Referncias","text":"<ol> <li>https://github.com/isLinXu/Stanford-CS-Course/blob/main/README.en.md</li> <li>https://www.mit.edu/~amidi/teaching/data-science-tools/</li> <li>https://bootlin.com/</li> <li>https://github.com/bootlin</li> <li>http://intrologic.stanford.edu/homepage/index.html</li> <li>https://see.stanford.edu/Course</li> <li>https://web.stanford.edu/class/cs106x/</li> <li>https://web.stanford.edu/class/cs107/</li> <li>https://web.stanford.edu/class/cs110/</li> <li>https://web.stanford.edu/class/cs101/</li> <li>https://web.stanford.edu/class/cs102/</li> <li>https://web.stanford.edu/class/cs103/</li> <li>https://web.stanford.edu/class/cs105/</li> <li>https://cs344-stanford.github.io/</li> </ol>"},{"location":"lab1/enunciado/","title":"Practica 1","text":""},{"location":"lab1/enunciado/#enunciado","title":"Enunciado","text":"<p>El enunciado y los recursos necesarios para el desarrollo de la practica 1 del laboratorio se encuentra en el siguiente link.</p>"},{"location":"lab1/enunciado/#sobre-los-test","title":"Sobre los test","text":"<p>En el directorio ra\u00edz del repositorio repositorio de la practica se encuentra el script test-reverse.sh que realiza los tests autom\u00e1ticos de la pr\u00e1ctica. La pr\u00e1ctica estar\u00e1 completa cuando todos los test hayan sido exitosos (Para mas informaci\u00f3n sobre estos consulte el siguiente link).</p> <p>Para trabajar el primer paso despu\u00e9s de clonar localmente el repositorio, es crear en el directorio ra\u00edz, el archivo donde va a realizar la soluci\u00f3n de la pr\u00e1ctica. Suponiendo que cre\u00f3 un archivo llamado <code>main.c</code> para colocar all\u00ed la soluci\u00f3n tenemos:</p> <p></p> <p>Para saber los detalles de ejecuci\u00f3n del script se pueden consultar el <code>help</code>:</p> <pre><code>./test-reverse.sh -h\n</code></pre> <p>El resultado es similar a lo que se muestra a continuaci\u00f3n:</p> <p></p> <p>Seg\u00fan lo anterior, para ejecutar todos los test se pueden emplear cualquiera de los siguientes comandos:</p> <pre><code>./test-reverse.sh       # Ejecucion de los test\n./test-reverse.sh -v    # Ejecucion de los test con log\n</code></pre> <p>Por ejemplo, en la siguiente figura se llevo a cabo la ejecuci\u00f3n del primero de los comandos anteriormente mostrados:</p> <p></p> <p>Si lo que se desea es la ejecuci\u00f3n de un solo test espec\u00edfico, se usa el siguiente comando:</p> <pre><code>./test-reverse.sh -t NUMERO_PRUEBA  # Ejecucion de un test determinado\n./test-reverse.sh -v -t NUMERO_PRUEBA # Ejecucion de un test determinado con log\n</code></pre> <p>La siguiente figura muestra el caso en el que se ejecuta el test 1 sin tener los resultados de la salida de manera detallada:</p> <p></p> <p>La siguiente figura muestra el test anterior pasando al script los argumentos para hacer que la salida se muestre de manera detallada:</p> <p></p> <p>La siguientes figuras muestran ambos casos para el test 2:</p> <p></p> <p></p>"},{"location":"lab1/enunciado/#6-referencias","title":"6. Referencias","text":"<ul> <li>https://www.mit.edu/~amidi/teaching/data-science-tools/tutorial/working-with-git/</li> <li>https://bootlin.com/blog/command-line/</li> <li>https://www.csl.cornell.edu/courses/ece2400/</li> <li>https://hackingcpp.com/cpp/cheat_sheets.html</li> <li>https://x.com/b0rk</li> <li>https://wizardzines.com/</li> <li>https://github.com/jvns</li> <li>https://jvns.ca/</li> <li>https://realpython.com/c-for-python-programmers/</li> <li>https://diveintosystems.org/book/Appendix1/index.html</li> <li>https://techdevguide.withgoogle.com/paths/data-structures-and-algorithms/</li> </ul>"},{"location":"lab1/sesion-0/presentacion-laboratorio/","title":"Sesi\u00f3n 0 - Presentacion del laboratorio","text":"<p>Fecha: </p>"},{"location":"lab1/sesion-0/presentacion-laboratorio/#1-sondeo","title":"1. Sondeo","text":"<p>Este sondeo se realizo entre los estudiantes de la modalidad virtual</p> # Pregunta Si No Total 1 \u00bfHa trabajado antes con un Linux o un SO diferente de Windows? 13 8 21 2 \u00bfHa trabajado con la terminal (no importa el sistema operativo)? 19 2 21 3 \u00bfHa trabajado con el lenguaje C o C++? 0 21 21 4 \u00bfTiene alguna distribuci\u00f3n de linux en la m\u00e1quina en la que hace los trabajos de la universidad? 7 13 21"},{"location":"lab1/sesion-0/presentacion-laboratorio/#2-herramientas-necesarias","title":"2. Herramientas necesarias","text":"<p>La siguiente lista muestra las herramientas que se van a emplear a lo largo del laboratorio:</p> <ul> <li> Cualquier distribuci\u00f3n de Linux (Ubuntu, WSL,...) [link]</li> <li> Compilador gcc [link]</li> <li> Git [link]</li> <li> Github [link]</li> </ul>"},{"location":"lab1/sesion-0/presentacion-laboratorio/#3-lenguaje-de-programacion","title":"3. Lenguaje de programaci\u00f3n","text":"<p>El lenguaje C ser\u00e9 el empleado para el desarrollo de las practicas de laboratorio. A continuaci\u00f3n, se muestran algunos recursos de utilidad:</p> <ol> <li>Introducci\u00f3n al lenguaje C (Apuntes de clase)  [link]</li> <li>C for Java Programmers (Dive into Systems) [link]</li> <li>C for Python Programmers (Real Python) [link]</li> </ol>"},{"location":"lab1/sesion-0/presentacion-laboratorio/#4-recursos-adicionales","title":"4. Recursos adicionales","text":"<ol> <li>https://github.com/isLinXu/Stanford-CS-Course/blob/main/README.en.md</li> <li>https://www.mit.edu/~amidi/teaching/data-science-tools/</li> <li>https://bootlin.com/</li> <li>https://github.com/bootlin</li> <li>http://intrologic.stanford.edu/homepage/index.html</li> <li>https://see.stanford.edu/Course</li> <li>https://web.stanford.edu/class/cs106x/</li> <li>https://web.stanford.edu/class/cs107/</li> <li>https://web.stanford.edu/class/cs110/</li> <li>https://web.stanford.edu/class/cs101/</li> <li>https://web.stanford.edu/class/cs102/</li> <li>https://web.stanford.edu/class/cs103/</li> <li>https://web.stanford.edu/class/cs105/</li> <li>https://cs344-stanford.github.io/</li> <li>https://josejuansanchez.org/daw/</li> </ol>"},{"location":"lab1/sesion-1/sesion1/","title":"Sesi\u00f3n 1 - Primeros pasos","text":"<p>Fecha: </p>"},{"location":"lab1/sesion-1/sesion1/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta sesi\u00f3n se van a conocer las principales herramientas de desarrollo que se emplearan en el laboratorio:</p> <ol> <li>Introducci\u00f3n a la consola de linux [link].</li> <li>Manejo basico del compilador gcc [link].</li> <li>Manejo basico del git [link].</li> </ol>"},{"location":"lab1/sesion-1/sesion1/#recursos-disponibles","title":"Recursos disponibles","text":"<p>A continuaci\u00f3n se muestran una lista de apuntes de clase que le pueden servir para el desarrollo de esta practica:</p> <ol> <li>Linux b\u00e1sico [link]</li> <li>Compilador gcc [link]</li> <li>Introducci\u00f3n al lenguaje C [link]</li> </ol>"},{"location":"lab1/sesion-1/sesion1/#referencias","title":"Referencias","text":"<ul> <li>https://www.mit.edu/~amidi/teaching/data-science-tools/tutorial/working-with-git/</li> <li>https://bootlin.com/blog/command-line/</li> <li>https://www.csl.cornell.edu/courses/ece2400/</li> <li>https://hackingcpp.com/cpp/cheat_sheets.html</li> <li>https://x.com/b0rk</li> <li>https://wizardzines.com/</li> <li>https://github.com/jvns</li> <li>https://jvns.ca/</li> <li>https://realpython.com/c-for-python-programmers/</li> <li>https://diveintosystems.org/book/Appendix1/index.html</li> <li>https://techdevguide.withgoogle.com/paths/data-structures-and-algorithms/</li> </ul>"},{"location":"lab1/sesion-1/herramientas/intro-gcc/","title":"Introducci\u00f3n al compilador <code>gcc</code>","text":"<p>Para la pr\u00e1ctica con tener claro los siguientes comandos del compilador <code>gcc</code> es suficiente:</p> <ol> <li> <p>Generaci\u00f3n del ejecutable:</p> <pre><code>gcc archivoFuente \u2013o nombreEjecutable -Wall\n</code></pre> </li> <li> <p>Corriendo el ejecutable:</p> <pre><code>./nombreEjecutable\n</code></pre> </li> </ol> <p>Por ejemplo, suponiendo que se tiene un archivo fuente con el siguiente llamado <code>hola_mundo.c</code>:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  printf(\"Hola mundo\\n\");\n  return 0;\n}\n</code></pre> <p>Si deseamos crear un ejecutable llamado <code>hola_mundo.out</code>, entonces el comando para compilar es:</p> <pre><code>gcc hola_mundo.c \u2013o hola_mundo.out -Wall\n</code></pre> <p>Luego, para correr el ejecutable el comando ser\u00e1:</p> <pre><code>./hola_mundo.out\n</code></pre>"},{"location":"lab1/sesion-1/herramientas/intro-gcc/#material-de-apoyo","title":"Material de apoyo","text":"<ol> <li>Laboratory: Tutorial </li> <li>An Introduction to GCC (MIT) [link]</li> </ol>"},{"location":"lab1/sesion-1/herramientas/intro-gcc/#reference-sheet","title":"Reference sheet","text":"<p>ECE 2400 Linux, Git, C/C++ Cheat Sheet [link]</p>"},{"location":"lab1/sesion-1/herramientas/intro-git/","title":"Uso b\u00e1sico del <code>git</code>","text":"<p>La mejor forma de empezar a conocer el <code>git</code> es a traves del git cheat sheet de Julia Evans</p> <p></p> <p>Para la pr\u00e1ctica, no son muchos los conceptos de git que se necesitan, b\u00e1sicamente el trabajo se reduce a manejar los siguientes comandos:</p>  Comandos git basicos     Creaci\u00f3n de repositorios  <code>git config --global user.name \"[name]\"</code> Establece el nombre que desea est\u00e9 anexado a sus transacciones de commit <code>git config --global user.email \"[email address]\"</code> Establece el e-mail que desea est\u00e9 anexado a sus transacciones de commit  Creaci\u00f3n de repositorios <code>git clone [url]</code> Descarga un proyecto y toda su historia de versi\u00f3n  Creaci\u00f3n de repositorios  <code>git status</code> Enumera todos los archivos nuevos o modificados que se deben confirmar <code>git add [file]</code> Toma una instant\u00e1nea del archivo para preparar la versi\u00f3n <code>git commit -m \"[descriptive message]\"</code> Registra las instant\u00e1neas del archivo permanentemente en el historial de versi\u00f3n  Creaci\u00f3n de repositorios  <code>git push [alias] [branch]</code> Carga todos los commits de la rama local al GitHub <code>git pull</code> Descarga el historial del marcador e incorpora cambios <p>En el siguiente link se ilustra y explica muy bien lo m\u00e1s necesario.</p> <p>A continuaci\u00f3n, se comparten algunos res\u00famenes que le pueden servir, el cacharreo va de cuenta suya:</p>"},{"location":"lab1/sesion-1/herramientas/intro-git/#reference-sheet","title":"Reference sheet","text":"<ol> <li>Git Cheat Sheet (github) [link]</li> <li>Git Cheat Sheet (Roger Dudler) [link]</li> <li>Git Cheat Sheet (GitLab) [link]</li> <li>Git Cheat Sheet (github) [espa\u00f1ol] [ingles]</li> </ol>"},{"location":"lab1/sesion-1/herramientas/linux-basico/","title":"Linux b\u00e1sico","text":"<p>En linux todo es un archivo (directorios, archivos como tal y dispositivos). En linux el sistema de archivos se organiza en una estructura jer\u00e1rquica a modo de arbol, siendo el nivel m\u00e1s alto del sistema el directorio ra\u00edz (<code>/</code>) tal y como se muestra en la siguiente figura:</p> <p></p> Comando Descripci\u00f3n <code>whatis</code> Muestra de manera resumida lo que hace un comando. <code>man</code> Muestra el manual de comandos <code>pwd</code> Imprime la ruta del directorio de trabajo actual <code>cd</code> Cambia el directorio de trabajo actual <code>ls</code> Lista los el contenido (archivos y directorios) del directorio de trabajo actual <code>clear</code> Limpia pantalla <code>mkdir</code> Crea un nuevo directorio <code>rmdir</code> Borrar directorio <code>cp</code> Copia archivos y directorios <code>rm</code> Borra archivos y directorios <code>mv</code> Mueve o renombra archivos <p>De todos los comandos, el manual (<code>man</code>) es muy importante, la siguiente imagen de Julia Evans resume c\u00f3mo usarlo:</p> <p></p> <p>Tambi\u00e9n es bueno tener en cuenta que cuando se quiera navegar en consola, por medio del comando <code>cd</code>, a trav\u00e9s del sistema de archivos recordar algunos los directorios especiales empleados en linux:</p> Directorio Descripci\u00f3n <code>/</code> Directorio ra\u00edz <code>.</code>/ Directorio actual <code>..</code>/ Directorio padre del directorio actual (directorio en el cual me encuentro ubicado)"},{"location":"lab1/sesion-1/herramientas/linux-basico/#material-de-apoyo","title":"Material de apoyo","text":"<ol> <li>Linux b\u00e1sico (material del curso) [link]</li> <li>Working with Bash (MIT) [link]</li> <li>The Unix and GNU/Linux command line (Free Electrons) [link]</li> </ol>"},{"location":"lab1/sesion-1/herramientas/linux-basico/#reference-sheet","title":"Reference sheet","text":"<p>GNU/Linux most wanted [link]</p>"},{"location":"lab1/sesion-2/sesion2/","title":"Sesi\u00f3n 2 - Introducci\u00f3n al lenguaje C","text":""},{"location":"lab1/sesion-2/sesion2/#recursos","title":"Recursos","text":"<p>El curso de Sistemas operativos dispone de unos apuntes de clase: Introducci\u00f3n al lenguaje C [link] en el cual se encuentran la mayoria de los conceptos de este lenguaje necesarios para trabajar a lo largo de los laboratorios. A continuaci\u00f3n se listan las diferentes secciones:</p> <ul> <li> Introducci\u00f3n al lenguaje C [teoria] </li> <li> Apuntadores y arreglos [teoria] [ejemplos]</li> <li> Apuntadores y matrices [teoria] [ejemplos]</li> <li> Estructuras [teoria] [ejemplos]</li> <li> Memoria din\u00e1mica [teoria] [ejemplos]</li> <li> Archivos [teoria] [ejemplos]</li> <li> Argumentos por l\u00ednea de comandos [ejemplos]</li> </ul>"},{"location":"lab1/sesion-2/sesion2/#reference-sheet","title":"Reference sheet","text":"<ol> <li>C Reference Card (ANSI) [link]</li> <li>The C Cheat Sheet (Andrew Sterian) [link]</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/","title":"Miselanea de ejemplos","text":""},{"location":"lab1/sesion-2/ejemplos_c/#temario-principal","title":"Temario principal","text":"<ol> <li>Desarrollo de aplicaciones en lenguaje C usando Linux (link)</li> <li>Ejemplos varios del lenguaje C (link)</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/#referencias","title":"Referencias","text":"<ul> <li>https://diveintosystems.cs.swarthmore.edu/</li> <li>https://diveintosystems.org/book/index.html</li> <li>http://cslibrary.stanford.edu/</li> <li>https://www.atariarchives.org/cgp/index.php</li> <li>https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/</li> <li>https://realpython.com/c-for-python-programmers/</li> <li>https://developerhelp.microchip.com/xwiki/bin/view/software-tools/c-programming/</li> <li>https://github.com/MicrochipTech/dh-c-programming-exercise-files</li> <li>https://github.com/PacktPublishing/Learn-C-Programming</li> <li>https://github.com/ptdecker/cbasics</li> <li>https://github.com/LiaBooks/C-Programming</li> <li>https://www.cs.swarthmore.edu/courses/CS31/S21/</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/","title":"Miselanea de ejemplos","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/#lista-de-ejemplos","title":"Lista de ejemplos","text":"<ul> <li> Arreglos y matrices [link]</li> <li> Estructuras [link]</li> <li> Apuntadores [link]</li> <li> Linea de comandos [link]</li> <li> Utilidad Make [link]</li> <li> Memoria dinamica [link]</li> <li> Listas enlazadas (En construcci\u00f3n...)</li> <li> Manejo de archivos [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/#referencias","title":"Referencias","text":"<ul> <li>https://developerhelp.microchip.com/xwiki/bin/view/software-tools/c-programming/</li> <li>https://developerhelp.microchip.com/xwiki/bin/view/software-tools/c-programming/lab9/</li> <li>https://github.com/MicrochipTech/dh-c-programming-exercise-files/tree/main/Lab09.X</li> <li>https://github.com/MicrochipTech/dh-c-programming-exercise-files/tree/main/Lab09-Solution.X</li> <li>https://developerhelp.microchip.com/xwiki/bin/view/software-tools/c-programming/resources/</li> <li>https://gist.github.com/jakelevi1996/ce46a808fe3b5ef06ece63aea0bd2fed</li> <li>https://github.com/ferrcho024/Project_to_C/tree/main/MQTT_template</li> <li>https://github.com/ferrcho024/Project_to_C/tree/main/c_files</li> <li>https://github.com/PacktPublishing/Learn-C-Programming/tree/master</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/archivos/","title":"Archivos","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/archivos/#actividad","title":"Actividad","text":"<p>Descargue el archivo file_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd file_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/archivos/#ejemplo","title":"Ejemplo","text":"<p>El siguiente ejemplo contiene los siguientes archivos: * Archivo fuente: file-io.c * Archivo de texto: foo.txt</p> <p>A continuaci\u00f3n se muestra el archivo fuente: file-io.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture05/file-io.c\n*/\n\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nint main() {\n    FILE *fp;\n    char buff[MAX];\n\n    fp = fopen(\"foo.txt\", \"r\");\n\n    while (fgets(buff, MAX, fp)) {\n        printf(\"%s\", buff);\n    }\n    fclose(fp);\n\n    fp = fopen(\"bar.bin\", \"wb\");\n    int num = 0x12345678;\n    fwrite(&amp;num, sizeof(int), 1, fp);\n    fclose(fp);\n\n    fp = fopen(\"bar.bin\", \"rb\");\n    int readNum;\n    fread(&amp;readNum, sizeof(int), 1, fp);\n    printf(\"readNum = 0x%x\\n\", readNum);\n    fclose(fp);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./file-io\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/archivos/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Manejo de archivos en C[link]</li> <li>Input / Output in C [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/archivos/#enlaces","title":"Enlaces","text":"<ul> <li>https://diveintosystems.org/</li> <li>https://docs.google.com/document/d/1YyOs7Az5JodqKscj5KiPl0ZpxAUMZ6d9EYIPxUrsGig/edit</li> <li>https://docs.google.com/document/d/1EGIRt1JSe1Dh2UclyVkEufg2ExJKUBWdaH3SYTsoNF0/edit#heading=h.sxobt3v8bjei</li> <li>https://docs.google.com/document/d/1YyOs7Az5JodqKscj5KiPl0ZpxAUMZ6d9EYIPxUrsGig/edit#heading=h.9zrjc4s0l7tx</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/","title":"Arreglos y matrices","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#actividad","title":"Actividad","text":"<p>Descargue el archivo arrays_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd arrays_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplos","title":"Ejemplos","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>array01.c</li> <li>array02.c</li> <li>array03.c</li> <li>array04.c</li> <li>2d-array01.c</li> <li>2d-array02.c</li> <li>2d-array03.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-1","title":"Ejemplo 1","text":"<p>Archivo: array01.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/array01.c \n*/\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nint main()\n{\n    int a[MAX];\n\n    int i;\n\n    // initialize the array to zeros.\n    for (i = 0; i &lt; MAX; ++i) {\n        a[i] = 0;\n    }\n\n    for (i = 0; i &lt; MAX; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./array01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-2","title":"Ejemplo 2","text":"<p>Archivo: array02.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/array02.c \n*/\n\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nint main()\n{\n    int a[MAX];\n\n    int i;\n\n    // initialize the array to zeros.\n    // Question: what happens if you forget to initialize the array?\n    // for (i = 0; i &lt; MAX; ++i) {\n    //     a[i] = 0;\n    // }\n\n    for (i = 0; i &lt; MAX; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./array02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-3","title":"Ejemplo 3","text":"<p>Archivo: array03.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/array03.c \n*/\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nint main()\n{\n    int a[MAX];\n\n    int i;\n\n    // initialize the array to zeros.\n    for (i = 0; i &lt; MAX; ++i) {\n        a[i] = 0;\n    }\n\n    // What happens if the array index is out of bounds?\n    // Compare the behaviour with Java.\n    for (i = 0; i &lt; 2 * MAX; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./array03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-4","title":"Ejemplo 4","text":"<p>Archivo: array04.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/array04.c \n*/\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nint main()\n{\n    int a[MAX];\n\n    int i;\n\n    // initialize the array to zeros.\n    for (i = 0; i &lt; MAX; ++i) {\n        a[i] = 0;\n    }\n\n    // Name of an array points to the address of the first element in the array.\n    printf(\"a = %p\\n\", a);\n\n    // Where is this array stored in memory?\n    for (i = 0; i &lt; MAX; ++i) {\n        printf(\"addr: %p | a[%d] = %d\\n\", &amp;a[i], i, a[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./array04\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-5","title":"Ejemplo 5","text":"<p>Archivo: 2d-array01.c</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAXROW 3\n#define MAXCOL 3\n\nint main()\n{\n    int matrix[MAXROW][MAXCOL];\n\n    int i;\n    int j;\n\n    // initialize the 2d-array.\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            matrix[i][j] = i + j;\n        }\n    }\n\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            printf(\"%d \\t\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./2d-array01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-6","title":"Ejemplo 6","text":"<p>Archivo: 2d-array02.c</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAXROW 3\n#define MAXCOL 3\n\nint main()\n{\n    int matrix[MAXROW][MAXCOL];\n\n    int i;\n    int j;\n\n    // initialize the 2d-array.\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            matrix[i][j] = i + j;\n        }\n    }\n\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            printf(\"%d \\t\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    // How are the elements in a 2d-array stored in memory?\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            printf(\"addr = %p\\t i, j = %d, %d\\t value = %d\\n\", &amp;matrix[i][j], i, j, matrix[i][j]);\n        }\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./2d-array02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#ejemplo-7","title":"Ejemplo 7","text":"<p>Archivo: 2d-array03.c</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAXROW 3\n#define MAXCOL 3\n\nvoid print_2darray(int a[][MAXCOL]);\n\nint main()\n{\n    int matrix[MAXROW][MAXCOL];\n\n    int i;\n    int j;\n    // initialize the 2d-array.\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            matrix[i][j] = i + j;\n        }\n    }\n\n    print_2darray(matrix);\n\n    return 0;\n}\n\nvoid print_2darray(int a[][MAXCOL]) {\n    int i;\n    int j;\n    for (i = 0; i &lt; MAXROW; ++i) {\n        for (j = 0; j &lt; MAXCOL; ++j) {\n            printf(\"%d \\t\", a[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./2d-array03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/arreglos_matrices/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Apuntadores y arreglos [link]</li> <li>Apuntadores y arreglos multidimensionales [link]</li> <li>Arrays and Strings [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/","title":"Argumentos por linea de comandos","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#actividad","title":"Actividad","text":"<p>Descargue el archivo cmd_line_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd file_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#ejemplos","title":"Ejemplos","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>cmd_line_args01.c</li> <li>cmd_line_args02.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#ejemplo-1","title":"Ejemplo 1","text":"<p>Archivo: cmd_line_args01.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/cmd_line_args01.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Argument vector (argv) is declared as an array of pointers to characters.\nint main(int argc, char *argv[])\n{\n    int i;\n\n    if (argc != 4) {\n        fprintf(stderr, \"USAGE: %s &lt;name&gt; &lt;age&gt; &lt;alpha&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    for (i = 0; i &lt; 4; ++i) {\n        printf(\"argv[%d] = %s\\n\", i, argv[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <ul> <li> <p>Test 1:</p> <pre><code>./cmd_line_args01\n</code></pre> </li> </ul> <ul> <li>Test 2:</li> </ul> <pre><code>./cmd_line_args01 pepe 10 0.2\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#ejemplo-2","title":"Ejemplo 2","text":"<p>Archivo: cmd_line_args02.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/cmd_line_args02.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Argument vector (argv) is declared as a pointer to a character pointer.\n// In other words, argv is a pointer to a pointer to a character.\nint main(int argc, char **argv)\n{\n    int i;\n\n    if (argc != 4) {\n        fprintf(stderr, \"USAGE: %s &lt;name&gt; &lt;age&gt; &lt;alpha&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    for (i = 0; i &lt; 4; ++i) {\n        printf(\"argv[%d] = %s\\n\", i, argv[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <ul> <li> <p>Test 1:</p> <pre><code>./cmd_line_args02\n</code></pre> </li> </ul> <ul> <li>Test 2:</li> </ul> <pre><code>./cmd_line_args02 pepe 10 0.2\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Command Line Arguments [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/cmd_line_args/#enlaces","title":"Enlaces","text":"<ul> <li>https://diveintosystems.org/</li> <li>https://docs.google.com/document/d/1YyOs7Az5JodqKscj5KiPl0ZpxAUMZ6d9EYIPxUrsGig/edit</li> <li>https://docs.google.com/document/d/1EGIRt1JSe1Dh2UclyVkEufg2ExJKUBWdaH3SYTsoNF0/edit#heading=h.sxobt3v8bjei</li> <li>https://docs.google.com/document/d/1YyOs7Az5JodqKscj5KiPl0ZpxAUMZ6d9EYIPxUrsGig/edit#heading=h.9zrjc4s0l7tx</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/","title":"Estructuras","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#actividad","title":"Actividad","text":"<p>Descargue el archivo structs_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd structs_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplos","title":"Ejemplos","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>structs01.c</li> <li>structs02.c</li> <li>structs03.c</li> <li>structs04.c</li> <li>structs05.c</li> <li>structs06.c</li> <li>structs07.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-1","title":"Ejemplo 1","text":"<p>Archivo: structs01.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    struct date {\n        int month;\n        int day;\n        int year;\n    };\n    struct date today;\n\n    today.month = 9;\n    today.day = 25;\n    today.year = 2004;\n\n    printf(\"Today's date is %i/%i/%.2i.\\n\", today.month, today.day,\n           today.year);\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-2","title":"Ejemplo 2","text":"<p>Archivo: structs02.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n// Program to determine tomorrow's date\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    struct date {\n        int month;\n        int day;\n        int year;\n    };\n\n    struct date today, tomorrow;\n\n    const int daysPerMonth[12] = {31, 28, 31, 30, 31, 30,\n                                  31, 31, 30, 31, 30, 31};\n\n    printf(\"Enter today's date (mm dd yyyy): \");\n    scanf(\"%i%i%i\", &amp;today.month, &amp;today.day, &amp;today.year);\n\n    if (today.day != daysPerMonth[today.month - 1]) {\n        tomorrow.day = today.day + 1;\n        tomorrow.month = today.month;\n        tomorrow.year = today.year;\n    }\n    else if (today.month == 12) { // end of year\n        tomorrow.day = 1;\n        tomorrow.month = 1;\n        tomorrow.year = today.year + 1;\n    }\n    else { // end of month\n        tomorrow.day = 1;\n        tomorrow.month = today.month + 1;\n        tomorrow.year = today.year;\n    }\n\n    printf(\"Tomorrow's date is %i/%i/%.2i.\\n\", tomorrow.month,\n           tomorrow.day, tomorrow.year);\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-3","title":"Ejemplo 3","text":"<p>Archivo: structs03.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n// Program to determine tomorrow's date\n#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\nstruct date {\n    int month;\n    int day;\n    int year;\n};\n\nint numberOfDays(struct date);\nbool isLeapYear(struct date);\nstruct date dateUpdate1(struct date);\nstruct date dateUpdate2(struct date);\n\nint main(void) {\n    struct date dateUpdate(struct date today);\n    struct date thisDay, nextDay;\n    printf(\"Enter today's date (mm dd yyyy): \");\n    scanf(\"%i%i%i\", &amp;thisDay.month, &amp;thisDay.day,\n          &amp;thisDay.year);\n    // Get next day using dateUpdate1\n    nextDay = dateUpdate1(thisDay);\n    printf(\"Tomorrow's date is %i/%i/%.2i.\\n\", nextDay.month,\n           nextDay.day, nextDay.year);\n\n    // Get next day using dateUpdate2 (The result is te same)\n    nextDay = dateUpdate2(thisDay);\n    printf(\"Tomorrow's date is %i/%i/%.2i.\\n\", nextDay.month,\n           nextDay.day, nextDay.year);\n    return 0;\n}\n\n// Function to calculate tomorrow's date\nstruct date dateUpdate1(struct date today) {\n    struct date tomorrow;\n    int numberOfDays(struct date d);\n    if (today.day != numberOfDays(today))\n    {\n        tomorrow.day = today.day + 1;\n        tomorrow.month = today.month;\n        tomorrow.year = today.year;\n    }\n    else if (today.month == 12)\n    { // end of year\n        tomorrow.day = 1;\n        tomorrow.month = 1;\n        tomorrow.year = today.year + 1;\n    }\n    else\n    { // end of month\n        tomorrow.day = 1;\n        tomorrow.month = today.month + 1;\n        tomorrow.year = today.year;\n    }\n    return tomorrow;\n}\n\n// Function to calculate tomorrow's date \u00e2\u20ac\u201c using compound literals\nstruct date dateUpdate2(struct date today) {\n    struct date tomorrow;\n    int numberOfDays(struct date d);\n    if (today.day != numberOfDays(today))\n        tomorrow = (struct date){today.month, today.day + 1, today.year};\n    else if (today.month == 12) // end of year\n        tomorrow = (struct date){1, 1, today.year + 1};\n    else // end of month\n        tomorrow = (struct date){today.month + 1, 1, today.year};\n    return tomorrow;\n}\n\n// Function to find the number of days in a month\nint numberOfDays(struct date d) {\n    int days;\n    bool isLeapYear(struct date d);\n    const int daysPerMonth[12] =\n        {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if (isLeapYear(d) == true &amp;&amp; d.month == 2)\n        days = 29;\n    else\n        days = daysPerMonth[d.month - 1];\n    return days;\n}\n\n// Function to determine if it's a leap year\nbool isLeapYear(struct date d) {\n    bool leapYearFlag;\n    if ((d.year % 4 == 0 &amp;&amp; d.year % 100 != 0) ||\n        d.year % 400 == 0)\n        leapYearFlag = true; // It's a leap year\n    else\n        leapYearFlag = false; // Not a leap year\n    return leapYearFlag;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-4","title":"Ejemplo 4","text":"<p>Archivo: structs04.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n// Program to update the time by one second\n\n#include &lt;stdio.h&gt;\nstruct time {\n    int hour;\n    int minutes;\n    int seconds;\n};\n\nstruct time timeUpdate(struct time);\n\nint main(void) {\n    struct time timeUpdate(struct time now);\n    struct time currentTime, nextTime;\n    printf(\"Enter the time (hh:mm:ss): \");\n    scanf(\"%i:%i:%i\", &amp;currentTime.hour,\n          &amp;currentTime.minutes, &amp;currentTime.seconds);\n    nextTime = timeUpdate(currentTime);\n    printf(\"Updated time is %.2i:%.2i:%.2i\\n\", nextTime.hour,\n           nextTime.minutes, nextTime.seconds);\n    return 0;\n}\n\n// Function to update the time by one second\nstruct time timeUpdate(struct time now) {\n    ++now.seconds;\n    if (now.seconds == 60) { // next minute\n        now.seconds = 0;\n        ++now.minutes;\n        if (now.minutes == 60) { // next hour\n            now.minutes = 0;\n            ++now.hour;\n            if (now.hour == 24) // midnight\n                now.hour = 0;\n        }\n    }\n    return now;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs04\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-5","title":"Ejemplo 5","text":"<p>Archivo: structs05.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n// Program to illustrate arrays of structures\n#include &lt;stdio.h&gt;\n\nstruct time {\n    int hour;\n    int minutes;\n    int seconds;\n};\n\nstruct time timeUpdate(struct time);\n\nint main(void) {\n    struct time timeUpdate(struct time now);\n    struct time testTimes[5] =\n        {{11, 59, 59}, {12, 0, 0}, {1, 29, 59}, {23, 59, 59}, {19, 12, 27}};\n    int i;\n    for (i = 0; i &lt; 5; ++i) {\n        printf(\"Time is %.2i:%.2i:%.2i\", testTimes[i].hour,\n               testTimes[i].minutes, testTimes[i].seconds);\n        testTimes[i] = timeUpdate(testTimes[i]);\n        printf(\" ...one second later it's %.2i:%.2i:%.2i\\n\",\n               testTimes[i].hour, testTimes[i].minutes, testTimes[i].seconds);\n    }\n    return 0;\n}\n\n// Function to update the time by one second\nstruct time timeUpdate(struct time now) {\n    ++now.seconds;\n    if (now.seconds == 60) { // next minute\n        now.seconds = 0;\n        ++now.minutes;\n        if (now.minutes == 60) { // next hour\n            now.minutes = 0;\n            ++now.hour;\n            if (now.hour == 24) { // midnight\n                now.hour = 0;\n            }\n        }\n    }\n    return now;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs05\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-6","title":"Ejemplo 6","text":"<p>Archivo: structs06.c</p> <pre><code>/*\nBook: Programming in C\nAuthor: Stephen G. Kochan\n*/\n\n// Program to illustrate structures and arrays\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i;\n    struct month\n    {\n        int numberOfDays;\n        char name[3];\n    };\n\n    const struct month months[12] = {\n                                        {31, {'J', 'a', 'n'}}, \n                                        {28, {'F', 'e', 'b'}}, \n                                        {31, {'M', 'a', 'r'}}, \n                                        {30, {'A', 'p', 'r'}}, \n                                        {31, {'M', 'a', 'y'}}, \n                                        {30, {'J', 'u', 'n'}}, \n                                        {31, {'J', 'u', 'l'}}, \n                                        {31, {'A', 'u', 'g'}}, \n                                        {30, {'S', 'e', 'p'}}, \n                                        {31, {'O', 'c', 't'}}, \n                                        {30, {'N', 'o', 'v'}}, \n                                        {31, {'D', 'e', 'c'}}\n                                    };\n\n    printf(\"Month Number of Days\\n\");\n    printf(\"----- --------------\\n\");\n\n    for (i = 0; i &lt; 12; ++i) {\n        printf(\" %c%c%c %i\\n\",\n               months[i].name[0], months[i].name[1],\n               months[i].name[2], months[i].numberOfDays);\n        }\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs06\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#ejemplo-7","title":"Ejemplo 7","text":"<p>Archivo: structs07.c</p> <pre><code>/*\nBook: Advanced Topics in C\nAuthor: Noel Kalicharan\nURL: https://github.com/Apress/adv-topics-in-c/blob/master/P21SortSearchStruct.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;errno.h&gt;\n\n#define MaxStudents 100\n#define MaxNameLength 30\n#define MaxNameBuffer MaxNameLength+1\n\ntypedef struct {\n    char name[MaxNameBuffer];\n    int age;\n    char gender;\n} Student;\n\nvoid printStudent(Student);\nint getData(FILE *, Student []);\nint search(char [], Student [], int);\nvoid sort(Student [], int);\nvoid getString(FILE *, char []) ;\nchar readChar(FILE *);\n\nint main() {\n    Student pupil[MaxStudents];\n    char aName[MaxNameBuffer];\n\n    FILE * in = fopen(\"input.txt\", \"r\");\n    if (in == NULL) {\n        printf(\"Error opening file: %s.\\n\", strerror(errno));\n        exit(1);\n    }\n\n    int numStudents = getData(in, pupil);\n    if (numStudents == 0) {\n        printf(\"No data supplied for students\");\n        exit(1);\n    }\n\n  printf(\"\\n\");\n  for (int h = 0; h &lt; numStudents; h++) printStudent(pupil[h]);\n    printf(\"\\n\");\n\n    getString(in, aName);\n    while (strcmp(aName, \"END\") != 0) {\n        int ans = search(aName, pupil, numStudents);\n        if (ans == -1) printf(\"%s not found\\n\", aName);\n        else printf(\"%s found at location %d\\n\", aName, ans);\n        getString(in, aName);\n    }\n\n    sort(pupil, numStudents);\n    printf(\"\\n\");\n  for (int h = 0; h &lt; numStudents; h++) printStudent(pupil[h]);\n} //end main\n\nvoid printStudent(Student t) {\n    printf(\"Name: %s Age: %d Gender: %c\\n\", t.name, t.age, t.gender);\n} //end printStudent\n\nint getData(FILE *in, Student list[]) {\n    char temp[MaxNameBuffer];\n    void getString(FILE *, char[]);\n    char readChar(FILE *);\n\n  int n = 0;\n  getString(in, temp);\n    while (n &lt; MaxStudents &amp;&amp; strcmp(temp, \"END\") != 0) {\n        strcpy(list[n].name, temp);\n        fscanf(in, \"%d\", &amp;list[n].age);\n        list[n].gender = readChar(in);\n        n++;\n        getString(in, temp);\n    }\n    return n;\n} //end getData\n\nint search(char key[], Student list[], int n) {\n//search for key in list[0] to list[n-1]\n//if found, return the location; if not found, return -1\n    for (int h = 0; h &lt; n; h++)\n        if (strcmp(key, list[h].name) == 0) return h;\n    return -1;\n} //end search\n\nvoid sort(Student list[], int n) {\n//sort list[0] to list[n-1] by name using an insertion sort\n    for (int h = 1; h &lt; n; h++) {\n        Student temp = list[h];\n        int k = h - 1;\n        while (k &gt;= 0 &amp;&amp; strcmp(temp.name, list[k].name) &lt; 0) {\n            list[k + 1] = list[k];\n            k = k - 1;\n        }\n    list[k + 1] = temp;\n    } //end for\n} //end sort\n\nvoid getString(FILE * in, char str[]) {\n//stores, in str, the next string within delimiters\n// the first non-whitespace character is the delimiter\n// the string is read from the file 'in'\n\n    char ch, delim;\n    int n = 0;\n    str[0] = '\\0';\n    // read over white space\n    while (isspace(ch = getc(in))) ; //empty while body\n    if (ch == EOF) return;\n\n    delim = ch;\n    while (((ch = getc(in)) != delim) &amp;&amp; (ch != EOF))\n        str[n++] = ch;\n    str[n] = '\\0';\n} // end getString\n\nchar readChar(FILE * in) {\n    char ch;\n    while (isspace(ch = getc(in))) ; //empty while body\n    return ch;\n} //end readChar\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs07\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Estructuras [link]</li> <li>Structs [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/estructuras/#enlaces","title":"Enlaces","text":"<ul> <li>https://www.educative.io/blog/advanced-c-programming-concepts-for-developers</li> <li>https://github.com/Apress/adv-topics-in-c</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/","title":"Ejemplo","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#ejemplo-un-solo-archivo","title":"Ejemplo un solo archivo","text":"<p>En este caso todo el programa se encuentra en el archivo app_main.c.</p>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#compilacion-y-enlazado","title":"Compilaci\u00f3n y enlazado","text":"<pre><code>gcc -Wall -o app.out app_main.c -lm\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#ejecucion","title":"Ejecuci\u00f3n","text":"<pre><code>./app.out\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#ejemplo-multiarchivo","title":"Ejemplo multiarchivo","text":"<p>En este caso todo el programa se encuentra dividido en varios archivos:</p> <ul> <li>Archivos cabecera:<ul> <li>helper1.h</li> <li>helper2.h</li> </ul> </li> <li>Archivos fuente:<ul> <li>helper1.c</li> <li>helper2.c</li> <li>main.c</li> </ul> </li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#compilacion","title":"Compilacion","text":"<pre><code># Compilacion individual\ngcc -Wall -O -c helper1.c\ngcc -Wall -O -c helper2.c\ngcc -Wall -O -c main.c\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#enlazado","title":"Enlazado","text":"<pre><code># Enlazado\ngcc -o app.out main.o helper1.o helper2.o -lm \n</code></pre> <p>Para el enlazado se pueden usar comodines (wildcards):</p> <pre><code>gcc -o app.out *.o -lm \n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#ejecucion_1","title":"Ejecuci\u00f3n","text":"<pre><code>./main.out\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#uso-del-make","title":"Uso del make","text":"<ol> <li> <p>Forma 1: Usando el comando make cuando el archivo con make tiene el nombre por defecto, esto es <code>Makefile</code>:</p> <pre><code>make\n</code></pre> </li> <li> <p>Forma 2: Usando el comando make cuando el archivo con make un nombre diferente al que se maneja por defecto. Por ejemplo si el archivo se llama <code>makefile_basico</code>, el comando a aplicar es el siguiente:</p> <pre><code>make -f makefile_basico\n</code></pre> </li> </ol> <p>A continuaci\u00f3n se muestran dos archivos makefiles, uno sencillo y otro que hace uso de comodines y puede ser empleado de manera generica:</p> <ol> <li>Archivo make sencillo: makefile_basico</li> <li>Archivo make con comodines (wildcards): makefile_mejorado</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/multi-file_project/#referencias","title":"Referencias","text":"<ul> <li>https://makefiletutorial.com/</li> <li>https://diveintosystems.org/book/C2-C_depth/advanced_writing_libraries.html</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/","title":"Apuntadores","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#actividad","title":"Actividad","text":"<p>Descargue el archivo pointer_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd pointer_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplos","title":"Ejemplos","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#apuntadores_1","title":"Apuntadores","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>pointers01.c</li> <li>pointers02.c</li> <li>pointers03.c</li> <li>pointers04.c</li> <li>pointers05.c</li> <li>null.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-1","title":"Ejemplo 1","text":"<p>Archivo: pointers01.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int a = 1000;\n    int b = 2000;\n\n    int *pa = &amp;a;\n    int *pb;\n\n    pb = &amp;b;\n\n    // Print values of a and b.\n    printf(\"a = %d\\t *pa = %d\\n\", a, *pa);\n    printf(\"b = %d\\t *pb = %d\\n\", b, *pb);\n\n    // Print addresses of a and b.\n    printf(\"&amp;a = %p\\t pa = %p\\n\", &amp;a, pa);\n    printf(\"&amp;b = %p\\t pb = %p\\n\", &amp;b, pb);\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./pointers01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-2","title":"Ejemplo 2","text":"<p>Archivo: pointers02.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nmain() {\n    int x = 15;\n    printf(\"\\n Value of x = %d\", x);\n    printf(\"\\n Address of x = %u\", &amp;x);\n    printf(\"\\n Value at address %d = %d\", *(&amp;x));\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./pointers02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-3","title":"Ejemplo 3","text":"<p>Archivo: pointers03.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int num = 10;\n    int * pnum = &amp;num;\n    printf(\"num = %d\\n\", num);\n    printf(\"*pnum = %d\\n\", *pnum);\n    printf(\"&amp;num = %p\\n\", &amp;num);\n    printf(\"pnum = %p\\n\", pnum);\n    ++pnum;\n    printf(\"pnum = %p\\n\", pnum);\n\n    int arr[5] = {10, 20, 30, 40 ,50};\n    int * parr = &amp;arr[0];\n\n    int i;\n    for (i = 0; i &lt; 5; i++) {\n        printf(\"%d\\n\", arr[i]);\n    }\n    printf(\"\\n\");\n    for (i = 0; i &lt; 5; i++) {\n        printf(\"%p\\t\", parr);\n        printf(\"%d\\n\", *parr);\n        parr++;\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./pointers03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-4","title":"Ejemplo 4","text":"<p>Archivo: pointers04.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nmain() {\n    int x = 15;\n    int *y;\n    y = &amp;x;\n    printf(\"\\n Value of x = %d\", x);\n    printf(\"\\n Address of x = %u\", &amp;x);\n    printf(\"\\n Value of x = %d\", *y);\n    printf(\"\\n Address of x = %u\", y);\n    printf(\"\\n Address of y = %u\", &amp;y);\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./pointers04\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-5","title":"Ejemplo 5","text":"<p>Archivo: pointers05.c</p> <pre><code>/* This program illustrates the usage of pointers to\nexchange the contents of two variables */\n\n#include &lt;stdio.h&gt;\n\nmain() {\n    int x, y;\n    int *p1, *p2, *p3; /* pointers to integers */\n    printf(\"\\n Enter two integer values\");\n    scanf(\"%d %d\", &amp;x, &amp;y);\n    /* Assign the addresses x and y to p1 and p2 */\n    p1 = &amp;x;\n    p2 = &amp;y;\n    /* Exchange the pointers */\n    p3 = p1;\n    p1 = p2;\n    p2 = p3;\n    /* Print the contents through exchanged contents */\n    printf(\"\\n The exchanged contents are\");\n    printf(\" %d &amp; %d\", *p1, *p2);\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./pointers05\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-6","title":"Ejemplo 6","text":"<p>Archivo: null.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int *p = NULL;\n    *p = 10;\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./null\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#apuntadores-y-arreglos","title":"Apuntadores y Arreglos","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>arrays_and_pointers01.c</li> <li>arrays_and_pointers02.c</li> <li>arrays_and_pointers03.c</li> <li>arrays_and_pointers04.c</li> <li>arrays_and_pointers05.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-7","title":"Ejemplo 7","text":"<p>Archivo: arrays_and_pointers01.c</p> <pre><code>/* Pointer variable method of processing an array */\n#include &lt;stdio.h&gt;\n\nmain() {\n    static int list[] = {20, 30, 35, 36, 39};\n    int *p;\n    int i = 0;\n    p = list; /* Assign the starting address of the list */\n    printf(\"\\n The list is ...\");\n    while (i &lt; 5)\n    {\n        printf(\"\\n %d %d ---element\", *p, i);\n        i++;\n        p++; /* increment pointer */\n    }\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./arrays_and_pointers01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-8","title":"Ejemplo 8","text":"<p>Archivo: arrays_and_pointers02.c</p> <pre><code>/* This program illustrates the usage of pointer to a string */\n#include &lt;stdio.h&gt;\n\nmain()\n{\n    char text[] = \"ENGINEERING\"; /* The string */\n    char *p;                     /* The pointer */\n    p = text;                    /* Assign the starting address of string to p */\n    printf(\"\\n The string..\");   /* Print the string */\n    while (*p != '\\0')\n    {\n        printf(\"%c\", *p);\n        p++;\n    }\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./arrays_and_pointers02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-9","title":"Ejemplo 9","text":"<p>Archivo: arrays_and_pointers03.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/arrays_and_pointers01.c\n*/\n\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nvoid print_array(int a[]);\n\nint main() {\n    int array[MAX];\n    int *parray;\n    int i;\n\n    // Fill some values in the array.\n    for (i = 0; i &lt; MAX; ++i) {\n        array[i] = i;\n    }\n\n    print_array(array);\n\n    parray = &amp;array[0];     // parray = array; also does the same thing.\n\n    // Modify the array using the array index notation.\n    printf(\"The array is modified using the array index notation!\\n\");\n    for (i = 0; i &lt; MAX; ++i) {\n        array[i] = i * 2;\n    }\n    print_array(array);\n\n    // Modify the array using the pointer notation.\n    printf(\"The array is modified using the array name as a pointer!\\n\");\n    for (i = 0; i &lt; MAX; ++i) {\n        *(array + i) = i * 3;\n    }\n    print_array(array);\n\n    // Modify the array using the pointer notation.\n    printf(\"The array is modified using the pointer named parray!\\n\");\n    for (i = 0; i &lt; MAX; ++i) {\n        *(parray + i) = i * 4;\n    }\n    print_array(array);\n\n    return 0;\n}\n\nvoid print_array(int a[]) {\n    int i;\n    for (i = 0; i &lt; MAX; ++i) {\n        printf(\"array[%d] = %d\\n\", i, a[i]);\n    }\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./arrays_and_pointers03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-10","title":"Ejemplo 10","text":"<p>Archivo: arrays_and_pointers04.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/arrays_and_pointers01.c\n*/\n\n\n#include &lt;stdio.h&gt;\n\n#define MAX 10\n\nvoid print_array(int a[]);\n\nint main() {\n    int array[MAX];\n    int i;\n\n    // Fill some values in the array.\n    for (i = 0; i &lt; MAX; ++i) {\n        array[i] = i;\n    }\n\n    print_array(array);\n\n    return 0;\n}\n\n// An array can be passed as a pointer.\n// Note the *a instead of a[] in parameters.\nvoid print_array(int *a) {\n    int i;\n    for (i = 0; i &lt; MAX; ++i) {\n        printf(\"array[%d] = %d\\n\", i, a[i]);\n    }\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./arrays_and_pointers04\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-11","title":"Ejemplo 11","text":"<p>Archivo: arrays_and_pointers05.c</p> <pre><code>#include &lt;stdio.h&gt;\n\nchar *item [] = { \n                  \"Chair\",\n                  \"Table\",\n                  \"Stool\",\n                  \"Desk\"\n                };\n\n\nint main() {\n    char *ptr;      // declare a pointer to a string\n    ptr = item[1]; // assign the appropriate pointer to ptr\n\n    printf(\"Item 1:%s\\n\", ptr);\n\n    printf(\"Items:\\n\");\n    for (int i = 0; i &lt; 4; i++) {\n        printf(\"%s\\n\", item[i]);\n    }\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./arrays_and_pointers05\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#apuntadores-y-estructuras","title":"Apuntadores y Estructuras","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>structs_and_pointers01.c</li> <li>structs_and_pointers01.c</li> <li>structs_and_pointers01.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-12","title":"Ejemplo 12","text":"<p>Archivo: structs_and_pointers01.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/structs_and_pointers01.c\n*/\n\n#include &lt;stdio.h&gt;\n\nstruct student {\n    char *name;\n    int id;\n};\n\nvoid print_student(struct student s) {\n    printf(\"name: %s\\t id: %d\\n\", s.name, s.id);\n}\n\nint main() {\n    // Create a student.\n    struct student s1;\n    s1.name = \"Oliver\";\n    s1.id = 1;\n    print_student(s1);\n\n    // Create a pointer to a student.\n    struct student *ps;\n    ps = &amp;s1;\n    print_student(*ps);\n\n    // Create another student.\n    struct student s2;\n    s2.name = \"Jonathan\";\n    s2.id = 2;\n    print_student(s2);\n\n    ps = &amp;s2;\n    print_student(*ps);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs_and_pointers01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-13","title":"Ejemplo 13","text":"<p>Archivo: structs_and_pointers02.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture03/structs_and_pointers02.c\n*/\n\n\n#include &lt;stdio.h&gt;\n\nstruct student {\n    char *name;\n    int id;\n};\n\ntypedef struct student Student;\n\nvoid print_student(Student *ps) {\n    printf(\"name: %s\\t id: %d\\n\", ps-&gt;name, ps-&gt;id);\n}\n\nint main() {\n    // Create an array of Students.\n    Student s[3];\n\n    s[0].name = \"Liangchen\";\n    s[0].id = 1;\n\n    s[1].name = \"Olivia\";\n    s[1].id = 2;\n\n    s[2].name = \"Kelsey\";\n    s[2].id = 3;\n\n    int i = 0;\n    for (i = 0; i &lt; 3; ++i) {\n        print_student(&amp;s[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs_and_pointers02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#ejemplo-14","title":"Ejemplo 14","text":"<p>Archivo: structs_and_pointers03.c</p> <pre><code>/* This program demonstrates the usage of an arrow operator */\n#include &lt;stdio.h&gt;\n\nstruct item {\n    char code[5];\n    int Qty;\n    float cost;\n};\n\nint main() {\n\n    struct item item_rec; /* Define a variable of struct type */\n    struct item *ptr;     /* Define a pointer of type struct */\n\n    /* Read data through dot operator */\n    printf(\"\\n Enter the data for an item\");\n    printf(\"\\nCode:\");\n    scanf(\"%s\", &amp;item_rec.code);\n    printf(\"\\nQty:\");\n    scanf(\"%d\", &amp;item_rec.Qty);\n    printf(\"\\nCost:\");\n    scanf(\"%f\", &amp;item_rec.cost);\n    /* Assign the address of item_rec */\n    ptr = &amp;item_rec;\n    printf(\"\\n The data for the item...\");\n    printf(\"\\nCode : %s\", ptr-&gt;code);\n    printf(\"\\nQty : %d\", ptr-&gt;Qty);\n    printf(\"\\nCost : %5.2f\", ptr-&gt;cost);\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./structs_and_pointers03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Apuntadores y arreglos [link]</li> <li>Apuntadores y arreglos multidimensionales [link]</li> <li>Estructuras en C[link]</li> <li>Structs [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/punteros/#referencias","title":"Referencias","text":"<ul> <li>Fundamentals of the C Programming Language [link]</li> <li>Fundamentals of the C Programming Language (Part I) [link]</li> <li>Fundamentals of the C Programming Language (Part II) [link]</li> <li>Fundamentals of the C Programming Language (Part III) [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/","title":"Reserva dinamica de memoria","text":""},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#actividad","title":"Actividad","text":"<p>Descargue el archivo dynamic_mem_examples.zip, descomprimalo e ingrese al directorio resultante:</p> <pre><code>cd dynamic_mem_examples\n</code></pre> <p>Una vez all\u00ed, liste los archivos en este directorio y verifique que se encuentre el archivo <code>Makefile</code>:</p> <pre><code>ls\n</code></pre> <p>Luego, compile y genere los ejecutables mediante el siguiente comando:</p> <pre><code>make\n</code></pre> <p>Si todo sale bien, por cada archivo fuente (<code>.c</code>) se genera un archivo ejecutable cuyo nombre ser\u00e1 el mismo del archivo fuente si na extenci\u00f3n. </p> <p>Para ejecutar los ejemplos use el nombre del archivo resultante al compilar sin tener en cuenta la extenci\u00f3n (<code>.c</code>). Por ejemplo, si el archivo se llama <code>ejemplo.c</code>, para ejecutar el archivo generado por el makefile use el siguiente comando comando:</p> <pre><code>./ejemplo\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplos","title":"Ejemplos","text":"<p>Analice y ejecute la siguiente lista de ejemplos:</p> <ol> <li>dynamic_array01.c</li> <li>dynamic_array02.c</li> <li>dynamic_array03.c</li> <li>dynamic_array04.c</li> <li>dynamic_array05.c</li> <li>dynamic_array06.c</li> <li>dynamic_array07.c</li> <li>dynamic_array_inclass.c</li> <li>linked_list.c</li> <li>linked_list_inclass.c</li> <li>sizeof_arrays.c</li> </ol>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-1","title":"Ejemplo 1","text":"<p>Archivo: dynamic_array01.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array01.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a variable length array (vla)\n    int a[num];\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = 0;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array01\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-2","title":"Ejemplo 2","text":"<p>Archivo: dynamic_array02.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array02.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap \n    int *a = malloc(num * sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = 0;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    free(a);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array02\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-3","title":"Ejemplo 3","text":"<p>Archivo: dynamic_array03.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array03.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap \n    // clear all the memory to zeros.\n    int *a = calloc(num, sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    free(a);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array03\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-4","title":"Ejemplo 4","text":"<p>Archivo: dynamic_array04.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array04.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap.\n    int *a = malloc(num * sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = i;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    // Question: is there a problem below?\n    // Need double the size of the original array.\n    printf(\"Resize array:\\n\");\n    a = malloc(2 * num * sizeof(int));\n\n    for (int i = 0; i &lt; 2 * num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n\n    free(a);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array04\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-5","title":"Ejemplo 5","text":"<p>Archivo: dynamic_array05.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array05.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap.\n    int *a = malloc(num * sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = i;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    printf(\"Resize array:\\n\");\n    // Need double the size of the original array.\n    int *p = malloc(2 * num * sizeof(int));\n\n    for (int i = 0; i &lt; num; ++i) {\n        p[i] = a[i];\n    }\n\n    free(a);\n\n    for (int i = 0; i &lt; 2 * num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    free(p);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array05\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-6","title":"Ejemplo 6","text":"<p>Archivo: dynamic_array06.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array06.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap.\n    int *a = malloc(num * sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = i;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    printf(\"Resize array:\\n\");\n    // Need double the size of the original array.\n    a = realloc(a, 2 * num * sizeof(int));\n\n    for (int i = 0; i &lt; 2 * num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    free(a);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array06\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-7","title":"Ejemplo 7","text":"<p>Archivo: dynamic_array07.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array07.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define ROWS 3\n#define COLS 3\n\nint** transpose(int a[][COLS]) {\n    int **p = malloc(ROWS * sizeof(int *));\n    for (int i = 0; i &lt; ROWS; ++i) {\n        p[i] = malloc(COLS * sizeof(int));\n    }\n\n    for (int i = 0; i &lt; ROWS; ++i) {\n        for (int j = 0; j &lt; COLS; ++j) {\n            // p[i][j] = a[j][i];\n            *(*(p + i) + j) = a[j][i];\n        }\n    }\n    return p;\n}\n\nint main() {\n    int a[ROWS][COLS] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    for (int i = 0; i &lt; ROWS; ++i) {\n        for (int j = 0; j &lt; COLS; ++j) {\n            printf(\"a[%d][%d] = %d\\t\", i, j, a[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    int **t = transpose(a);\n    for (int i = 0; i &lt; ROWS; ++i) {\n        for (int j = 0; j &lt; COLS; ++j) {\n            printf(\"t[%d][%d] = %d\\t\", i, j, t[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    // TODO: free the 2d array.\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array07\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-8","title":"Ejemplo 8","text":"<p>Archivo: dynamic_array_inclass.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/dynamic_array_inclass.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"USAGE: %s &lt;num_elems&gt;\\n\", argv[0]);\n        exit(1);\n    }\n\n    int num = atoi(argv[1]);\n    printf(\"num = %d\\n\", num);\n\n    // create a dynamic array on the heap \n    int *a = malloc(num * sizeof(int));\n\n    if (a == NULL) {\n        fprintf(stderr, \"Memory allocation failed.\\n\");\n        exit(1);\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        a[i] = i;\n    }\n\n    for (int i = 0; i &lt; num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    a = realloc(a, 2 * num * sizeof(int));\n\n    for (int i = 0; i &lt; 2 * num; ++i) {\n        printf(\"a[%d] = %d\\n\", i, a[i]);\n    }\n\n    free(a);\n\n    free(a);\n\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./dynamic_array_inclass\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-9","title":"Ejemplo 9","text":"<p>Archivo: linked_list.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/linked_list.c\n*/\n\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nstruct node {\n    int data;\n    struct node * next;\n};\n\nvoid print_list(struct node *head);\nstruct node * insert_at_end(struct node *head, int data);\nint delete_at_front(struct node **phead); \n\nint main() {\n    struct node * head = NULL;\n    print_list(head);\n    head = insert_at_end(head, 10);\n    print_list(head);\n    head = insert_at_end(head, 20);\n    print_list(head);\n    head = insert_at_end(head, 30);\n    print_list(head);\n    delete_at_front(&amp;head);\n    print_list(head);\n    delete_at_front(&amp;head);\n    print_list(head);\n    delete_at_front(&amp;head);\n    print_list(head);\n    return 0;\n}\n\nint delete_at_front(struct node **phead) {\n    struct node * first = *phead;\n    assert(first != NULL);\n    *phead = first-&gt;next;\n    int data = first-&gt;data;\n    free(first);\n    return data;\n}\n\nstruct node * insert_at_end(struct node *head, int data) {\n    // create a new node.\n    struct node * new_node = malloc(sizeof(struct node));\n    assert(new_node != NULL);\n    new_node-&gt;data = data;\n    new_node-&gt;next = NULL;\n\n    // list is empty.\n    if (head == NULL) {\n        head = new_node;\n        return head;    \n    }\n\n    // list has some elements already.\n    struct node *current = head;\n    while (current-&gt;next != NULL) {\n        current = current-&gt;next;\n    }\n\n    current-&gt;next = new_node;\n    return head;\n}\n\nvoid print_list(struct node *head) {\n    struct node * current = head;\n    if (current == NULL) {\n        printf(\"Empty list.\\n\");\n        return;\n    } else {\n        while (current) {\n            printf(\"|%d|%p| -&gt; \", current-&gt;data, current-&gt;next);\n            current = current-&gt;next;\n        } \n        printf(\"\\n\");\n    } \n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./linked_list\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-10","title":"Ejemplo 10","text":"<p>Archivo: linked_list_inclass.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/linked_list_inclass.c\n*/\n\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nstruct node {\n    int data;\n    struct node * next;\n};\n\nstruct node* insert_at_end(struct node* head, int data) {\n    struct node *new_node = malloc(sizeof(struct node));\n    new_node-&gt;data = data;\n    new_node-&gt;next = NULL;\n\n    if (head == NULL) {\n        return new_node;\n    }\n\n    struct node *curr = head;\n    while (curr-&gt;next != NULL) {\n        curr = curr-&gt;next;\n    }\n\n    curr-&gt;next = new_node;\n    return head;\n}\n\nvoid print_list(struct node *head) {\n    while (head != NULL) {\n        printf(\"|%d|%p| -&gt; \", head-&gt;data, head-&gt;next);\n        head = head-&gt;next;\n    }\n    printf(\"\\n\");\n}\n\nvoid delete_at_begin(struct node **phead) {\n    struct node *first = *phead;\n    *phead = (*phead)-&gt;next;\n    free(first);\n}\n\nvoid addOne(int *pn) {\n    *pn = *pn + 1;\n}\n\nint main() {\n    int n = 100;\n    addOne(&amp;n);\n    printf(\"n = %d\\n\", n);\n\n    struct node * head = NULL;\n    head = insert_at_end(head, 10);\n    print_list(head);\n    head = insert_at_end(head, 20);\n    print_list(head);\n    head = insert_at_end(head, 30);\n    print_list(head);\n    delete_at_begin(&amp;head);\n    print_list(head);\n    delete_at_begin(&amp;head);\n    print_list(head);\n    delete_at_begin(&amp;head);\n    print_list(head);\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./linked_list_inclass\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#ejemplo-11","title":"Ejemplo 11","text":"<p>Archivo: sizeof_arrays.c</p> <pre><code>/*\nAuthor: Adalbert Gerald Soosai Raj\nURL: https://pages.cs.wisc.edu/~gerald/cs354/Spring2019/code/lecture04/sizeof_arrays.c\n*/\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    int a[100];\n    int *p = malloc(sizeof(int) * 100);\n    printf(\"size of a = %d\\n\", sizeof(a));\n    printf(\"size of p = %d\\n\", sizeof(p));\n    return 0;\n}\n</code></pre> <p>Para ejecutar use el comando:</p> <pre><code>./sizeof_arrays\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#referencias-teoricas","title":"Referencias teoricas","text":"<p>A continuaci\u00f3n se muestran algunos apuntes de clase que ilustran algunos conceptos teoricos necesarios para comprender la lista de ejemplos adjuntos:</p> <ul> <li>Apuntadores y arreglos [link]</li> <li>Apuntadores y arreglos multidimensionales [link]</li> <li>Estructuras en C [link]</li> <li>Memoria din\u00e1mica en C [link]</li> <li>Dynamic Memory Allocation [link]</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/conceptos_c/reserva_dinamica_memoria/#referencias","title":"Referencias","text":"<ul> <li>https://skills.microchip.com/page/c-programming</li> <li>https://diveintosystems.org/book/C2-C_depth/dynamic_memory.html</li> <li>https://skills.microchip.com/fundamentals-of-the-c-programming-language-part-i</li> <li>https://skills.microchip.com/fundamentals-of-the-c-programming-language-part-ii</li> <li>https://skills.microchip.com/fundamentals-of-the-c-programming-language-part-iii</li> </ul>"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/","title":"Laboratory: Tutorial","text":"<p>En esta secci\u00f3n se toma nota de los principales conceptos tratados en el documento lab tutorial</p>"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#1-primeros-pasos","title":"1. Primeros pasos","text":""},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#compilacion-y-enlazado-basicos","title":"Compilacion y enlazado basicos","text":"<p>Se tiene el archivo fuente hw.c. Para compilar se emplea el siguiente comando:</p> <pre><code>gcc hw.c   \n</code></pre> <p>El anterior genera un ejecutable llamado <code>a.out</code>, para poder ejecutar este se ejecuta en consola el comando:</p> <pre><code>./a.out\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#compilacion-y-enlazado","title":"Compilacion y enlazado","text":"<p>Al usar la opci\u00f3n <code>-o</code> en el compilador, se puede especificar el nombre del ejecuable tal y como se muestra en el siguiente comando:</p> <pre><code>gcc -o hw hw.c # -o: to specify the executable name  \n</code></pre> <p>El resultado del comando anterior es generar el ejecutable <code>hw</code>, de modo que para ejecutar el programa se llama al ejecutable de la siguiente manera:</p> <pre><code>./hw\n</code></pre> <p>La siguiente tabla resume diferentes formas de invocar la utilidad <code>gcc</code>:</p> Comando Observaciones <code>gcc -o hw hw.c</code> <code>-o</code>: to specify the executable name <code>gcc -Wall hw.c</code> <code>-Wall</code>: gives much better warnings <code>gcc -g hw.c</code> <code>-g</code>: to enable debugging with gdb <code>gcc -O hw.c</code> <code>-O</code>: to turn on optimization"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#enlazando-con-librerias","title":"Enlazando con librerias","text":"<p>Archivo ejemplo cylinder.c</p> <p>Cuando se deseen emplear funciones externas en una aplicaci\u00f3n estas deben ser invocadas en el codigo fuente. En el caso del lenguaje C, esto se hace usando la directiva <code>#include</code>. </p> <p>Si se desea conocer lo que hace una funci\u00f3n y como invocarla se emplea el manual de la funci\u00f3n tal y como se muestra a continuaci\u00f3n:</p> <pre><code>man fork # Incovaci\u00f3n del manual para la funci\u00f3n fork\nman tan # Invocaci\u00f3n del manual para la funci\u00f3n fork\n</code></pre> <p>La siguiente tabla ilustra los principales elementos de deben ser analizados cuando se consulta un manual:</p> Funci\u00f3n Comando Archivos cabecera Flag en el gcc <code>fork</code> <code>man fork</code> <code>#include &lt;sys/types.h&gt;</code> <code>#include &lt;unistd.h&gt;</code> <code>tan</code> <code>man tan</code> <code>#include &lt;math.h&gt;</code> <code>-lm</code> <code>fwrite</code> <code>man fwrite</code> <code>#include &lt;stdio.h&gt;</code> <code>pthread_create</code> <code>man pthread_create</code> <code>#include &lt;pthread.h&gt;</code> <code>-lpthread</code> <p>En el siguiente archivo se muestra un ejemplo de la compilaci\u00f3n y enlazado del programa cylinder.c el cual hace uso de la funci\u00f3n <code>pow()</code> definida en la libreria matematica:</p> <pre><code>gcc -o cylinder cylinder.c -Wall -lm\n</code></pre>"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#compilacion-multiarchivo","title":"Compilaci\u00f3n multiarchivo","text":"<p>Para entender el concepto compile y ejecute los ejemplos que se encuentran en el siguiente link</p> <p>En construcci\u00f3n...</p>"},{"location":"lab1/sesion-2/ejemplos_c/lab_tutorial/#referencias","title":"Referencias","text":"<ol> <li>https://makefiletutorial.com/</li> <li>https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html </li> <li>https://linuxhandbook.com/using-make/</li> <li>https://github.com/vampy/Makefile </li> </ol>"},{"location":"lab2/","title":"Testing","text":""},{"location":"lab2/#why-testing","title":"Why Testing","text":"<ul> <li>Tests allow us to find flaws in our software</li> <li>Good tests document the code by describing the intent</li> <li>Automated tests saves time, compared to manual tests</li> <li>Automated tests allow us to safely change and refactor our code without introducing regressions</li> </ul>"},{"location":"lab2/#the-fundamentals","title":"The Fundamentals","text":"<ul> <li>We consider code to be incomplete if it is not accompanied by tests</li> <li>We write unit tests (tests without external dependencies) that can run before every PR merge to validate that we don\u2019t have regressions</li> <li>We write Integration tests/E2E tests that test the whole system end to end, and run them regularly</li> <li>We write our tests early and block any further code merging if tests fail.</li> <li>We run load tests/performance tests where appropriate to validate that the system performs under stress</li> </ul>"},{"location":"lab2/#build-for-testing","title":"Build for Testing","text":"<p>Testing is a critical part of the development process.  It is important to build your application with testing in mind.  Here are some tips to help you build for testing:</p> <ul> <li>Parameterize everything. Rather than hard-code any variables, consider making everything a configurable parameter with a reasonable default. This will allow you to easily change the behavior of your application during testing. Particularly during performance testing, it is common to test different values to see what impact that has on performance. If a range of defaults need to change together, consider one or more parameters which set \"modes\", changing the defaults of a group of parameters together.</li> </ul> <ul> <li>Document at startup. When your application starts up, it should log all parameters. This ensures the person reviewing the logs and application behavior know exactly how the application is configured.</li> </ul> <ul> <li>Log to console. Logging to external systems like Azure Monitor is desirable for traceability across services. This requires logs to be dispatched from the local system to the external system and that is a dependency that can fail. It is important that someone be able to console logs directly on the local system.</li> </ul> <ul> <li>Log to external system. In addition to console logs, logging to an external system like Azure Monitor is desirable for traceability across services and durability of logs.</li> </ul> <ul> <li>Log all activity. If the system is performing some activity (reading data from a database, calling an external service, etc.), it should log that activity. Ideally, there should be a log message saying the activity is starting and another log message saying the activity is complete. This allows someone reviewing the logs to understand what the application is doing and how long it is taking. Depending on how noisy this is, different messages can be associated with different log levels, but it is important to have the information available when it comes to debugging a deployed system.</li> </ul>"},{"location":"lab3/","title":"Machine Learning Fundamentals at ISE","text":"<p>This guideline documents the Machine Learning (ML) practices in ISE. ISE works with customers on developing ML models and putting them in production, with an emphasis on engineering and research best practices throughout the project's life cycle.</p>"},{"location":"lab3/#goals","title":"Goals","text":"<ul> <li>Provide a set of ML practices to follow in an ML project.</li> <li>Provide clarity on ML process and how it fits within a software engineering project.</li> <li>Provide best practices for the different stages of an ML project.</li> </ul>"},{"location":"lab3/#how-to-use-these-fundamentals","title":"How to use these Fundamentals","text":"<ul> <li>If you are starting a new ML project, consider reading through the general guidance documents.</li> <li>For specific aspects of an ML project, refer to the guidelines for different project phases.</li> </ul>"},{"location":"lab3/#ml-project-phases","title":"ML Project Phases","text":"<p>The diagram below shows different phases in an ideal ML project. Due to practical constraints and requirements, it might not always be possible to have a project structured in such a manner, however best practices should be followed for each individual phase.</p> <p></p> <ul> <li>Envisioning: Initial problem understanding, customer goals and objectives.</li> <li>Feasibility Study: Assess whether the problem in question is feasible to solve satisfactorily using ML with the available data.</li> <li>Model Milestone: There is a basic model that is achieving the minimum required performance, both in terms of ML performance and system performance. Using the knowledge gathered to this milestone, define the scope, objectives, high-level architecture, definition of done and plan for the entire project.</li> <li>Model(s) experimentation: Tools and best practices for conducting successful model experimentation.</li> <li>Model(s) Operationalization: Model readiness for production checklist.</li> </ul>"},{"location":"lab3/#general-guidance","title":"General Guidance","text":"<ul> <li>ML Process Guidance</li> <li>ML Fundamentals checklist</li> <li>Data Exploration</li> <li>Agile ML development</li> <li>Testing Data Science and ML Ops code</li> <li>Profiling Machine Learning and ML Ops code</li> <li>Responsible AI</li> <li>Program Management for ML projects</li> </ul>"},{"location":"lab3/#resources","title":"Resources","text":"<ul> <li>Model Operationalization</li> </ul>"}]}